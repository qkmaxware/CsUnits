using System;

namespace Qkmaxware.Units.Data {
/// <summary>
/// Static class housing conversions to and from the unit "ByteData"
/// </summary>
public static class ByteDataConversions {
	/// <summary>
    /// Extension method to convert Byte to Bit
    /// </summary>
    /// <param name="val">quantity measured in Byte</param>
    /// <returns>quantity measured in Bit</returns>
    public static Quantity<double, Bit> ToBit<T>(this BaseQuantity<T, Byte> val) where T:IConvertible {
        return new Quantity<double, Bit>(
            Convert.ToDouble(val.Value) * (8)
        );
    }
	/// <summary>
    /// Extension method to convert Bit to Byte
    /// </summary>
    /// <param name="val">quantity measured in Bit</param>
    /// <returns>quantity measured in Byte</returns>
    public static Quantity<double, Byte> ToByte<T>(this BaseQuantity<T, Bit> val) where T:IConvertible {
        return new Quantity<double, Byte>(
            Convert.ToDouble(val.Value) * (1d/(8))
        );
    }
	/// <summary>
    /// Extension method to convert Bit to YottaBit
    /// </summary>
    /// <param name="val">quantity measured in Bit</param>
    /// <returns>quantity measured in YottaBit</returns>
    public static Quantity<double, YottaBit> ToYottaBit<T>(this BaseQuantity<T, Bit> val) where T:IConvertible {
        return new Quantity<double, YottaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8)) * (8*1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert Bit to ZettaBit
    /// </summary>
    /// <param name="val">quantity measured in Bit</param>
    /// <returns>quantity measured in ZettaBit</returns>
    public static Quantity<double, ZettaBit> ToZettaBit<T>(this BaseQuantity<T, Bit> val) where T:IConvertible {
        return new Quantity<double, ZettaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8)) * (8*1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert Bit to ExaBit
    /// </summary>
    /// <param name="val">quantity measured in Bit</param>
    /// <returns>quantity measured in ExaBit</returns>
    public static Quantity<double, ExaBit> ToExaBit<T>(this BaseQuantity<T, Bit> val) where T:IConvertible {
        return new Quantity<double, ExaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8)) * (8*1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert Bit to PetaBit
    /// </summary>
    /// <param name="val">quantity measured in Bit</param>
    /// <returns>quantity measured in PetaBit</returns>
    public static Quantity<double, PetaBit> ToPetaBit<T>(this BaseQuantity<T, Bit> val) where T:IConvertible {
        return new Quantity<double, PetaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8)) * (8*1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert Bit to TeraBit
    /// </summary>
    /// <param name="val">quantity measured in Bit</param>
    /// <returns>quantity measured in TeraBit</returns>
    public static Quantity<double, TeraBit> ToTeraBit<T>(this BaseQuantity<T, Bit> val) where T:IConvertible {
        return new Quantity<double, TeraBit>(
            Convert.ToDouble(val.Value) * ((1d/(8)) * (8*1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert Bit to GigaBit
    /// </summary>
    /// <param name="val">quantity measured in Bit</param>
    /// <returns>quantity measured in GigaBit</returns>
    public static Quantity<double, GigaBit> ToGigaBit<T>(this BaseQuantity<T, Bit> val) where T:IConvertible {
        return new Quantity<double, GigaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8)) * (8*1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert Bit to MegaBit
    /// </summary>
    /// <param name="val">quantity measured in Bit</param>
    /// <returns>quantity measured in MegaBit</returns>
    public static Quantity<double, MegaBit> ToMegaBit<T>(this BaseQuantity<T, Bit> val) where T:IConvertible {
        return new Quantity<double, MegaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8)) * (8*1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert Bit to KiloBit
    /// </summary>
    /// <param name="val">quantity measured in Bit</param>
    /// <returns>quantity measured in KiloBit</returns>
    public static Quantity<double, KiloBit> ToKiloBit<T>(this BaseQuantity<T, Bit> val) where T:IConvertible {
        return new Quantity<double, KiloBit>(
            Convert.ToDouble(val.Value) * ((1d/(8)) * (8*1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert Bit to HectoBit
    /// </summary>
    /// <param name="val">quantity measured in Bit</param>
    /// <returns>quantity measured in HectoBit</returns>
    public static Quantity<double, HectoBit> ToHectoBit<T>(this BaseQuantity<T, Bit> val) where T:IConvertible {
        return new Quantity<double, HectoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8)) * (8*1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert Bit to DekaBit
    /// </summary>
    /// <param name="val">quantity measured in Bit</param>
    /// <returns>quantity measured in DekaBit</returns>
    public static Quantity<double, DekaBit> ToDekaBit<T>(this BaseQuantity<T, Bit> val) where T:IConvertible {
        return new Quantity<double, DekaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8)) * (8*1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert Bit to DeciBit
    /// </summary>
    /// <param name="val">quantity measured in Bit</param>
    /// <returns>quantity measured in DeciBit</returns>
    public static Quantity<double, DeciBit> ToDeciBit<T>(this BaseQuantity<T, Bit> val) where T:IConvertible {
        return new Quantity<double, DeciBit>(
            Convert.ToDouble(val.Value) * ((1d/(8)) * (8*1E1))
        );
    }
	/// <summary>
    /// Extension method to convert Bit to CentiBit
    /// </summary>
    /// <param name="val">quantity measured in Bit</param>
    /// <returns>quantity measured in CentiBit</returns>
    public static Quantity<double, CentiBit> ToCentiBit<T>(this BaseQuantity<T, Bit> val) where T:IConvertible {
        return new Quantity<double, CentiBit>(
            Convert.ToDouble(val.Value) * ((1d/(8)) * (8*1E2))
        );
    }
	/// <summary>
    /// Extension method to convert Bit to MilliBit
    /// </summary>
    /// <param name="val">quantity measured in Bit</param>
    /// <returns>quantity measured in MilliBit</returns>
    public static Quantity<double, MilliBit> ToMilliBit<T>(this BaseQuantity<T, Bit> val) where T:IConvertible {
        return new Quantity<double, MilliBit>(
            Convert.ToDouble(val.Value) * ((1d/(8)) * (8*1E3))
        );
    }
	/// <summary>
    /// Extension method to convert Bit to MicroBit
    /// </summary>
    /// <param name="val">quantity measured in Bit</param>
    /// <returns>quantity measured in MicroBit</returns>
    public static Quantity<double, MicroBit> ToMicroBit<T>(this BaseQuantity<T, Bit> val) where T:IConvertible {
        return new Quantity<double, MicroBit>(
            Convert.ToDouble(val.Value) * ((1d/(8)) * (8*1E6))
        );
    }
	/// <summary>
    /// Extension method to convert Bit to NanoBit
    /// </summary>
    /// <param name="val">quantity measured in Bit</param>
    /// <returns>quantity measured in NanoBit</returns>
    public static Quantity<double, NanoBit> ToNanoBit<T>(this BaseQuantity<T, Bit> val) where T:IConvertible {
        return new Quantity<double, NanoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8)) * (8*1E9))
        );
    }
	/// <summary>
    /// Extension method to convert Bit to PicoBit
    /// </summary>
    /// <param name="val">quantity measured in Bit</param>
    /// <returns>quantity measured in PicoBit</returns>
    public static Quantity<double, PicoBit> ToPicoBit<T>(this BaseQuantity<T, Bit> val) where T:IConvertible {
        return new Quantity<double, PicoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8)) * (8*1E12))
        );
    }
	/// <summary>
    /// Extension method to convert Bit to FemtoBit
    /// </summary>
    /// <param name="val">quantity measured in Bit</param>
    /// <returns>quantity measured in FemtoBit</returns>
    public static Quantity<double, FemtoBit> ToFemtoBit<T>(this BaseQuantity<T, Bit> val) where T:IConvertible {
        return new Quantity<double, FemtoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8)) * (8*1E15))
        );
    }
	/// <summary>
    /// Extension method to convert Bit to AttoBit
    /// </summary>
    /// <param name="val">quantity measured in Bit</param>
    /// <returns>quantity measured in AttoBit</returns>
    public static Quantity<double, AttoBit> ToAttoBit<T>(this BaseQuantity<T, Bit> val) where T:IConvertible {
        return new Quantity<double, AttoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8)) * (8*1E18))
        );
    }
	/// <summary>
    /// Extension method to convert Bit to ZeptoBit
    /// </summary>
    /// <param name="val">quantity measured in Bit</param>
    /// <returns>quantity measured in ZeptoBit</returns>
    public static Quantity<double, ZeptoBit> ToZeptoBit<T>(this BaseQuantity<T, Bit> val) where T:IConvertible {
        return new Quantity<double, ZeptoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8)) * (8*1E21))
        );
    }
	/// <summary>
    /// Extension method to convert Bit to YoctoBit
    /// </summary>
    /// <param name="val">quantity measured in Bit</param>
    /// <returns>quantity measured in YoctoBit</returns>
    public static Quantity<double, YoctoBit> ToYoctoBit<T>(this BaseQuantity<T, Bit> val) where T:IConvertible {
        return new Quantity<double, YoctoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8)) * (8*1E24))
        );
    }
	/// <summary>
    /// Extension method to convert Bit to YottaByte
    /// </summary>
    /// <param name="val">quantity measured in Bit</param>
    /// <returns>quantity measured in YottaByte</returns>
    public static Quantity<double, YottaByte> ToYottaByte<T>(this BaseQuantity<T, Bit> val) where T:IConvertible {
        return new Quantity<double, YottaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8)) * (1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert Bit to ZettaByte
    /// </summary>
    /// <param name="val">quantity measured in Bit</param>
    /// <returns>quantity measured in ZettaByte</returns>
    public static Quantity<double, ZettaByte> ToZettaByte<T>(this BaseQuantity<T, Bit> val) where T:IConvertible {
        return new Quantity<double, ZettaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8)) * (1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert Bit to ExaByte
    /// </summary>
    /// <param name="val">quantity measured in Bit</param>
    /// <returns>quantity measured in ExaByte</returns>
    public static Quantity<double, ExaByte> ToExaByte<T>(this BaseQuantity<T, Bit> val) where T:IConvertible {
        return new Quantity<double, ExaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8)) * (1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert Bit to PetaByte
    /// </summary>
    /// <param name="val">quantity measured in Bit</param>
    /// <returns>quantity measured in PetaByte</returns>
    public static Quantity<double, PetaByte> ToPetaByte<T>(this BaseQuantity<T, Bit> val) where T:IConvertible {
        return new Quantity<double, PetaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8)) * (1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert Bit to TeraByte
    /// </summary>
    /// <param name="val">quantity measured in Bit</param>
    /// <returns>quantity measured in TeraByte</returns>
    public static Quantity<double, TeraByte> ToTeraByte<T>(this BaseQuantity<T, Bit> val) where T:IConvertible {
        return new Quantity<double, TeraByte>(
            Convert.ToDouble(val.Value) * ((1d/(8)) * (1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert Bit to GigaByte
    /// </summary>
    /// <param name="val">quantity measured in Bit</param>
    /// <returns>quantity measured in GigaByte</returns>
    public static Quantity<double, GigaByte> ToGigaByte<T>(this BaseQuantity<T, Bit> val) where T:IConvertible {
        return new Quantity<double, GigaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8)) * (1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert Bit to MegaByte
    /// </summary>
    /// <param name="val">quantity measured in Bit</param>
    /// <returns>quantity measured in MegaByte</returns>
    public static Quantity<double, MegaByte> ToMegaByte<T>(this BaseQuantity<T, Bit> val) where T:IConvertible {
        return new Quantity<double, MegaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8)) * (1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert Bit to KiloByte
    /// </summary>
    /// <param name="val">quantity measured in Bit</param>
    /// <returns>quantity measured in KiloByte</returns>
    public static Quantity<double, KiloByte> ToKiloByte<T>(this BaseQuantity<T, Bit> val) where T:IConvertible {
        return new Quantity<double, KiloByte>(
            Convert.ToDouble(val.Value) * ((1d/(8)) * (1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert Bit to HectoByte
    /// </summary>
    /// <param name="val">quantity measured in Bit</param>
    /// <returns>quantity measured in HectoByte</returns>
    public static Quantity<double, HectoByte> ToHectoByte<T>(this BaseQuantity<T, Bit> val) where T:IConvertible {
        return new Quantity<double, HectoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8)) * (1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert Bit to DekaByte
    /// </summary>
    /// <param name="val">quantity measured in Bit</param>
    /// <returns>quantity measured in DekaByte</returns>
    public static Quantity<double, DekaByte> ToDekaByte<T>(this BaseQuantity<T, Bit> val) where T:IConvertible {
        return new Quantity<double, DekaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8)) * (1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert Bit to DeciByte
    /// </summary>
    /// <param name="val">quantity measured in Bit</param>
    /// <returns>quantity measured in DeciByte</returns>
    public static Quantity<double, DeciByte> ToDeciByte<T>(this BaseQuantity<T, Bit> val) where T:IConvertible {
        return new Quantity<double, DeciByte>(
            Convert.ToDouble(val.Value) * ((1d/(8)) * (1E1))
        );
    }
	/// <summary>
    /// Extension method to convert Bit to CentiByte
    /// </summary>
    /// <param name="val">quantity measured in Bit</param>
    /// <returns>quantity measured in CentiByte</returns>
    public static Quantity<double, CentiByte> ToCentiByte<T>(this BaseQuantity<T, Bit> val) where T:IConvertible {
        return new Quantity<double, CentiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8)) * (1E2))
        );
    }
	/// <summary>
    /// Extension method to convert Bit to MilliByte
    /// </summary>
    /// <param name="val">quantity measured in Bit</param>
    /// <returns>quantity measured in MilliByte</returns>
    public static Quantity<double, MilliByte> ToMilliByte<T>(this BaseQuantity<T, Bit> val) where T:IConvertible {
        return new Quantity<double, MilliByte>(
            Convert.ToDouble(val.Value) * ((1d/(8)) * (1E3))
        );
    }
	/// <summary>
    /// Extension method to convert Bit to MicroByte
    /// </summary>
    /// <param name="val">quantity measured in Bit</param>
    /// <returns>quantity measured in MicroByte</returns>
    public static Quantity<double, MicroByte> ToMicroByte<T>(this BaseQuantity<T, Bit> val) where T:IConvertible {
        return new Quantity<double, MicroByte>(
            Convert.ToDouble(val.Value) * ((1d/(8)) * (1E6))
        );
    }
	/// <summary>
    /// Extension method to convert Bit to NanoByte
    /// </summary>
    /// <param name="val">quantity measured in Bit</param>
    /// <returns>quantity measured in NanoByte</returns>
    public static Quantity<double, NanoByte> ToNanoByte<T>(this BaseQuantity<T, Bit> val) where T:IConvertible {
        return new Quantity<double, NanoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8)) * (1E9))
        );
    }
	/// <summary>
    /// Extension method to convert Bit to PicoByte
    /// </summary>
    /// <param name="val">quantity measured in Bit</param>
    /// <returns>quantity measured in PicoByte</returns>
    public static Quantity<double, PicoByte> ToPicoByte<T>(this BaseQuantity<T, Bit> val) where T:IConvertible {
        return new Quantity<double, PicoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8)) * (1E12))
        );
    }
	/// <summary>
    /// Extension method to convert Bit to FemtoByte
    /// </summary>
    /// <param name="val">quantity measured in Bit</param>
    /// <returns>quantity measured in FemtoByte</returns>
    public static Quantity<double, FemtoByte> ToFemtoByte<T>(this BaseQuantity<T, Bit> val) where T:IConvertible {
        return new Quantity<double, FemtoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8)) * (1E15))
        );
    }
	/// <summary>
    /// Extension method to convert Bit to AttoByte
    /// </summary>
    /// <param name="val">quantity measured in Bit</param>
    /// <returns>quantity measured in AttoByte</returns>
    public static Quantity<double, AttoByte> ToAttoByte<T>(this BaseQuantity<T, Bit> val) where T:IConvertible {
        return new Quantity<double, AttoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8)) * (1E18))
        );
    }
	/// <summary>
    /// Extension method to convert Bit to ZeptoByte
    /// </summary>
    /// <param name="val">quantity measured in Bit</param>
    /// <returns>quantity measured in ZeptoByte</returns>
    public static Quantity<double, ZeptoByte> ToZeptoByte<T>(this BaseQuantity<T, Bit> val) where T:IConvertible {
        return new Quantity<double, ZeptoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8)) * (1E21))
        );
    }
	/// <summary>
    /// Extension method to convert Bit to YoctoByte
    /// </summary>
    /// <param name="val">quantity measured in Bit</param>
    /// <returns>quantity measured in YoctoByte</returns>
    public static Quantity<double, YoctoByte> ToYoctoByte<T>(this BaseQuantity<T, Bit> val) where T:IConvertible {
        return new Quantity<double, YoctoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8)) * (1E24))
        );
    }
	/// <summary>
    /// Extension method to convert Bit to YobiByte
    /// </summary>
    /// <param name="val">quantity measured in Bit</param>
    /// <returns>quantity measured in YobiByte</returns>
    public static Quantity<double, YobiByte> ToYobiByte<T>(this BaseQuantity<T, Bit> val) where T:IConvertible {
        return new Quantity<double, YobiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8)) * (1.2089258e-24))
        );
    }
	/// <summary>
    /// Extension method to convert Bit to ZebiByte
    /// </summary>
    /// <param name="val">quantity measured in Bit</param>
    /// <returns>quantity measured in ZebiByte</returns>
    public static Quantity<double, ZebiByte> ToZebiByte<T>(this BaseQuantity<T, Bit> val) where T:IConvertible {
        return new Quantity<double, ZebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8)) * (1.1805916e-21))
        );
    }
	/// <summary>
    /// Extension method to convert Bit to ExbiByte
    /// </summary>
    /// <param name="val">quantity measured in Bit</param>
    /// <returns>quantity measured in ExbiByte</returns>
    public static Quantity<double, ExbiByte> ToExbiByte<T>(this BaseQuantity<T, Bit> val) where T:IConvertible {
        return new Quantity<double, ExbiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8)) * (1.1529215e-18))
        );
    }
	/// <summary>
    /// Extension method to convert Bit to PebiByte
    /// </summary>
    /// <param name="val">quantity measured in Bit</param>
    /// <returns>quantity measured in PebiByte</returns>
    public static Quantity<double, PebiByte> ToPebiByte<T>(this BaseQuantity<T, Bit> val) where T:IConvertible {
        return new Quantity<double, PebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8)) * (1.1258999e-15))
        );
    }
	/// <summary>
    /// Extension method to convert Bit to TebiByte
    /// </summary>
    /// <param name="val">quantity measured in Bit</param>
    /// <returns>quantity measured in TebiByte</returns>
    public static Quantity<double, TebiByte> ToTebiByte<T>(this BaseQuantity<T, Bit> val) where T:IConvertible {
        return new Quantity<double, TebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8)) * (1.0995116e-12))
        );
    }
	/// <summary>
    /// Extension method to convert Bit to GibiByte
    /// </summary>
    /// <param name="val">quantity measured in Bit</param>
    /// <returns>quantity measured in GibiByte</returns>
    public static Quantity<double, GibiByte> ToGibiByte<T>(this BaseQuantity<T, Bit> val) where T:IConvertible {
        return new Quantity<double, GibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8)) * (1d/1073741824))
        );
    }
	/// <summary>
    /// Extension method to convert Bit to MebiByte
    /// </summary>
    /// <param name="val">quantity measured in Bit</param>
    /// <returns>quantity measured in MebiByte</returns>
    public static Quantity<double, MebiByte> ToMebiByte<T>(this BaseQuantity<T, Bit> val) where T:IConvertible {
        return new Quantity<double, MebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8)) * (1d/1048576))
        );
    }
	/// <summary>
    /// Extension method to convert Bit to KibiByte
    /// </summary>
    /// <param name="val">quantity measured in Bit</param>
    /// <returns>quantity measured in KibiByte</returns>
    public static Quantity<double, KibiByte> ToKibiByte<T>(this BaseQuantity<T, Bit> val) where T:IConvertible {
        return new Quantity<double, KibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8)) * (1d/1024))
        );
    }
	/// <summary>
    /// Extension method to convert Byte to YottaBit
    /// </summary>
    /// <param name="val">quantity measured in Byte</param>
    /// <returns>quantity measured in YottaBit</returns>
    public static Quantity<double, YottaBit> ToYottaBit<T>(this BaseQuantity<T, Byte> val) where T:IConvertible {
        return new Quantity<double, YottaBit>(
            Convert.ToDouble(val.Value) * (8*1E-24)
        );
    }
	/// <summary>
    /// Extension method to convert YottaBit to Byte
    /// </summary>
    /// <param name="val">quantity measured in YottaBit</param>
    /// <returns>quantity measured in Byte</returns>
    public static Quantity<double, Byte> ToByte<T>(this BaseQuantity<T, YottaBit> val) where T:IConvertible {
        return new Quantity<double, Byte>(
            Convert.ToDouble(val.Value) * (1d/(8*1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert YottaBit to Bit
    /// </summary>
    /// <param name="val">quantity measured in YottaBit</param>
    /// <returns>quantity measured in Bit</returns>
    public static Quantity<double, Bit> ToBit<T>(this BaseQuantity<T, YottaBit> val) where T:IConvertible {
        return new Quantity<double, Bit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-24)) * (8))
        );
    }
	/// <summary>
    /// Extension method to convert YottaBit to ZettaBit
    /// </summary>
    /// <param name="val">quantity measured in YottaBit</param>
    /// <returns>quantity measured in ZettaBit</returns>
    public static Quantity<double, ZettaBit> ToZettaBit<T>(this BaseQuantity<T, YottaBit> val) where T:IConvertible {
        return new Quantity<double, ZettaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-24)) * (8*1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert YottaBit to ExaBit
    /// </summary>
    /// <param name="val">quantity measured in YottaBit</param>
    /// <returns>quantity measured in ExaBit</returns>
    public static Quantity<double, ExaBit> ToExaBit<T>(this BaseQuantity<T, YottaBit> val) where T:IConvertible {
        return new Quantity<double, ExaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-24)) * (8*1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert YottaBit to PetaBit
    /// </summary>
    /// <param name="val">quantity measured in YottaBit</param>
    /// <returns>quantity measured in PetaBit</returns>
    public static Quantity<double, PetaBit> ToPetaBit<T>(this BaseQuantity<T, YottaBit> val) where T:IConvertible {
        return new Quantity<double, PetaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-24)) * (8*1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert YottaBit to TeraBit
    /// </summary>
    /// <param name="val">quantity measured in YottaBit</param>
    /// <returns>quantity measured in TeraBit</returns>
    public static Quantity<double, TeraBit> ToTeraBit<T>(this BaseQuantity<T, YottaBit> val) where T:IConvertible {
        return new Quantity<double, TeraBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-24)) * (8*1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert YottaBit to GigaBit
    /// </summary>
    /// <param name="val">quantity measured in YottaBit</param>
    /// <returns>quantity measured in GigaBit</returns>
    public static Quantity<double, GigaBit> ToGigaBit<T>(this BaseQuantity<T, YottaBit> val) where T:IConvertible {
        return new Quantity<double, GigaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-24)) * (8*1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert YottaBit to MegaBit
    /// </summary>
    /// <param name="val">quantity measured in YottaBit</param>
    /// <returns>quantity measured in MegaBit</returns>
    public static Quantity<double, MegaBit> ToMegaBit<T>(this BaseQuantity<T, YottaBit> val) where T:IConvertible {
        return new Quantity<double, MegaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-24)) * (8*1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert YottaBit to KiloBit
    /// </summary>
    /// <param name="val">quantity measured in YottaBit</param>
    /// <returns>quantity measured in KiloBit</returns>
    public static Quantity<double, KiloBit> ToKiloBit<T>(this BaseQuantity<T, YottaBit> val) where T:IConvertible {
        return new Quantity<double, KiloBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-24)) * (8*1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert YottaBit to HectoBit
    /// </summary>
    /// <param name="val">quantity measured in YottaBit</param>
    /// <returns>quantity measured in HectoBit</returns>
    public static Quantity<double, HectoBit> ToHectoBit<T>(this BaseQuantity<T, YottaBit> val) where T:IConvertible {
        return new Quantity<double, HectoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-24)) * (8*1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert YottaBit to DekaBit
    /// </summary>
    /// <param name="val">quantity measured in YottaBit</param>
    /// <returns>quantity measured in DekaBit</returns>
    public static Quantity<double, DekaBit> ToDekaBit<T>(this BaseQuantity<T, YottaBit> val) where T:IConvertible {
        return new Quantity<double, DekaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-24)) * (8*1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert YottaBit to DeciBit
    /// </summary>
    /// <param name="val">quantity measured in YottaBit</param>
    /// <returns>quantity measured in DeciBit</returns>
    public static Quantity<double, DeciBit> ToDeciBit<T>(this BaseQuantity<T, YottaBit> val) where T:IConvertible {
        return new Quantity<double, DeciBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-24)) * (8*1E1))
        );
    }
	/// <summary>
    /// Extension method to convert YottaBit to CentiBit
    /// </summary>
    /// <param name="val">quantity measured in YottaBit</param>
    /// <returns>quantity measured in CentiBit</returns>
    public static Quantity<double, CentiBit> ToCentiBit<T>(this BaseQuantity<T, YottaBit> val) where T:IConvertible {
        return new Quantity<double, CentiBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-24)) * (8*1E2))
        );
    }
	/// <summary>
    /// Extension method to convert YottaBit to MilliBit
    /// </summary>
    /// <param name="val">quantity measured in YottaBit</param>
    /// <returns>quantity measured in MilliBit</returns>
    public static Quantity<double, MilliBit> ToMilliBit<T>(this BaseQuantity<T, YottaBit> val) where T:IConvertible {
        return new Quantity<double, MilliBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-24)) * (8*1E3))
        );
    }
	/// <summary>
    /// Extension method to convert YottaBit to MicroBit
    /// </summary>
    /// <param name="val">quantity measured in YottaBit</param>
    /// <returns>quantity measured in MicroBit</returns>
    public static Quantity<double, MicroBit> ToMicroBit<T>(this BaseQuantity<T, YottaBit> val) where T:IConvertible {
        return new Quantity<double, MicroBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-24)) * (8*1E6))
        );
    }
	/// <summary>
    /// Extension method to convert YottaBit to NanoBit
    /// </summary>
    /// <param name="val">quantity measured in YottaBit</param>
    /// <returns>quantity measured in NanoBit</returns>
    public static Quantity<double, NanoBit> ToNanoBit<T>(this BaseQuantity<T, YottaBit> val) where T:IConvertible {
        return new Quantity<double, NanoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-24)) * (8*1E9))
        );
    }
	/// <summary>
    /// Extension method to convert YottaBit to PicoBit
    /// </summary>
    /// <param name="val">quantity measured in YottaBit</param>
    /// <returns>quantity measured in PicoBit</returns>
    public static Quantity<double, PicoBit> ToPicoBit<T>(this BaseQuantity<T, YottaBit> val) where T:IConvertible {
        return new Quantity<double, PicoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-24)) * (8*1E12))
        );
    }
	/// <summary>
    /// Extension method to convert YottaBit to FemtoBit
    /// </summary>
    /// <param name="val">quantity measured in YottaBit</param>
    /// <returns>quantity measured in FemtoBit</returns>
    public static Quantity<double, FemtoBit> ToFemtoBit<T>(this BaseQuantity<T, YottaBit> val) where T:IConvertible {
        return new Quantity<double, FemtoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-24)) * (8*1E15))
        );
    }
	/// <summary>
    /// Extension method to convert YottaBit to AttoBit
    /// </summary>
    /// <param name="val">quantity measured in YottaBit</param>
    /// <returns>quantity measured in AttoBit</returns>
    public static Quantity<double, AttoBit> ToAttoBit<T>(this BaseQuantity<T, YottaBit> val) where T:IConvertible {
        return new Quantity<double, AttoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-24)) * (8*1E18))
        );
    }
	/// <summary>
    /// Extension method to convert YottaBit to ZeptoBit
    /// </summary>
    /// <param name="val">quantity measured in YottaBit</param>
    /// <returns>quantity measured in ZeptoBit</returns>
    public static Quantity<double, ZeptoBit> ToZeptoBit<T>(this BaseQuantity<T, YottaBit> val) where T:IConvertible {
        return new Quantity<double, ZeptoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-24)) * (8*1E21))
        );
    }
	/// <summary>
    /// Extension method to convert YottaBit to YoctoBit
    /// </summary>
    /// <param name="val">quantity measured in YottaBit</param>
    /// <returns>quantity measured in YoctoBit</returns>
    public static Quantity<double, YoctoBit> ToYoctoBit<T>(this BaseQuantity<T, YottaBit> val) where T:IConvertible {
        return new Quantity<double, YoctoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-24)) * (8*1E24))
        );
    }
	/// <summary>
    /// Extension method to convert YottaBit to YottaByte
    /// </summary>
    /// <param name="val">quantity measured in YottaBit</param>
    /// <returns>quantity measured in YottaByte</returns>
    public static Quantity<double, YottaByte> ToYottaByte<T>(this BaseQuantity<T, YottaBit> val) where T:IConvertible {
        return new Quantity<double, YottaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-24)) * (1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert YottaBit to ZettaByte
    /// </summary>
    /// <param name="val">quantity measured in YottaBit</param>
    /// <returns>quantity measured in ZettaByte</returns>
    public static Quantity<double, ZettaByte> ToZettaByte<T>(this BaseQuantity<T, YottaBit> val) where T:IConvertible {
        return new Quantity<double, ZettaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-24)) * (1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert YottaBit to ExaByte
    /// </summary>
    /// <param name="val">quantity measured in YottaBit</param>
    /// <returns>quantity measured in ExaByte</returns>
    public static Quantity<double, ExaByte> ToExaByte<T>(this BaseQuantity<T, YottaBit> val) where T:IConvertible {
        return new Quantity<double, ExaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-24)) * (1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert YottaBit to PetaByte
    /// </summary>
    /// <param name="val">quantity measured in YottaBit</param>
    /// <returns>quantity measured in PetaByte</returns>
    public static Quantity<double, PetaByte> ToPetaByte<T>(this BaseQuantity<T, YottaBit> val) where T:IConvertible {
        return new Quantity<double, PetaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-24)) * (1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert YottaBit to TeraByte
    /// </summary>
    /// <param name="val">quantity measured in YottaBit</param>
    /// <returns>quantity measured in TeraByte</returns>
    public static Quantity<double, TeraByte> ToTeraByte<T>(this BaseQuantity<T, YottaBit> val) where T:IConvertible {
        return new Quantity<double, TeraByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-24)) * (1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert YottaBit to GigaByte
    /// </summary>
    /// <param name="val">quantity measured in YottaBit</param>
    /// <returns>quantity measured in GigaByte</returns>
    public static Quantity<double, GigaByte> ToGigaByte<T>(this BaseQuantity<T, YottaBit> val) where T:IConvertible {
        return new Quantity<double, GigaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-24)) * (1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert YottaBit to MegaByte
    /// </summary>
    /// <param name="val">quantity measured in YottaBit</param>
    /// <returns>quantity measured in MegaByte</returns>
    public static Quantity<double, MegaByte> ToMegaByte<T>(this BaseQuantity<T, YottaBit> val) where T:IConvertible {
        return new Quantity<double, MegaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-24)) * (1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert YottaBit to KiloByte
    /// </summary>
    /// <param name="val">quantity measured in YottaBit</param>
    /// <returns>quantity measured in KiloByte</returns>
    public static Quantity<double, KiloByte> ToKiloByte<T>(this BaseQuantity<T, YottaBit> val) where T:IConvertible {
        return new Quantity<double, KiloByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-24)) * (1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert YottaBit to HectoByte
    /// </summary>
    /// <param name="val">quantity measured in YottaBit</param>
    /// <returns>quantity measured in HectoByte</returns>
    public static Quantity<double, HectoByte> ToHectoByte<T>(this BaseQuantity<T, YottaBit> val) where T:IConvertible {
        return new Quantity<double, HectoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-24)) * (1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert YottaBit to DekaByte
    /// </summary>
    /// <param name="val">quantity measured in YottaBit</param>
    /// <returns>quantity measured in DekaByte</returns>
    public static Quantity<double, DekaByte> ToDekaByte<T>(this BaseQuantity<T, YottaBit> val) where T:IConvertible {
        return new Quantity<double, DekaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-24)) * (1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert YottaBit to DeciByte
    /// </summary>
    /// <param name="val">quantity measured in YottaBit</param>
    /// <returns>quantity measured in DeciByte</returns>
    public static Quantity<double, DeciByte> ToDeciByte<T>(this BaseQuantity<T, YottaBit> val) where T:IConvertible {
        return new Quantity<double, DeciByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-24)) * (1E1))
        );
    }
	/// <summary>
    /// Extension method to convert YottaBit to CentiByte
    /// </summary>
    /// <param name="val">quantity measured in YottaBit</param>
    /// <returns>quantity measured in CentiByte</returns>
    public static Quantity<double, CentiByte> ToCentiByte<T>(this BaseQuantity<T, YottaBit> val) where T:IConvertible {
        return new Quantity<double, CentiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-24)) * (1E2))
        );
    }
	/// <summary>
    /// Extension method to convert YottaBit to MilliByte
    /// </summary>
    /// <param name="val">quantity measured in YottaBit</param>
    /// <returns>quantity measured in MilliByte</returns>
    public static Quantity<double, MilliByte> ToMilliByte<T>(this BaseQuantity<T, YottaBit> val) where T:IConvertible {
        return new Quantity<double, MilliByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-24)) * (1E3))
        );
    }
	/// <summary>
    /// Extension method to convert YottaBit to MicroByte
    /// </summary>
    /// <param name="val">quantity measured in YottaBit</param>
    /// <returns>quantity measured in MicroByte</returns>
    public static Quantity<double, MicroByte> ToMicroByte<T>(this BaseQuantity<T, YottaBit> val) where T:IConvertible {
        return new Quantity<double, MicroByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-24)) * (1E6))
        );
    }
	/// <summary>
    /// Extension method to convert YottaBit to NanoByte
    /// </summary>
    /// <param name="val">quantity measured in YottaBit</param>
    /// <returns>quantity measured in NanoByte</returns>
    public static Quantity<double, NanoByte> ToNanoByte<T>(this BaseQuantity<T, YottaBit> val) where T:IConvertible {
        return new Quantity<double, NanoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-24)) * (1E9))
        );
    }
	/// <summary>
    /// Extension method to convert YottaBit to PicoByte
    /// </summary>
    /// <param name="val">quantity measured in YottaBit</param>
    /// <returns>quantity measured in PicoByte</returns>
    public static Quantity<double, PicoByte> ToPicoByte<T>(this BaseQuantity<T, YottaBit> val) where T:IConvertible {
        return new Quantity<double, PicoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-24)) * (1E12))
        );
    }
	/// <summary>
    /// Extension method to convert YottaBit to FemtoByte
    /// </summary>
    /// <param name="val">quantity measured in YottaBit</param>
    /// <returns>quantity measured in FemtoByte</returns>
    public static Quantity<double, FemtoByte> ToFemtoByte<T>(this BaseQuantity<T, YottaBit> val) where T:IConvertible {
        return new Quantity<double, FemtoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-24)) * (1E15))
        );
    }
	/// <summary>
    /// Extension method to convert YottaBit to AttoByte
    /// </summary>
    /// <param name="val">quantity measured in YottaBit</param>
    /// <returns>quantity measured in AttoByte</returns>
    public static Quantity<double, AttoByte> ToAttoByte<T>(this BaseQuantity<T, YottaBit> val) where T:IConvertible {
        return new Quantity<double, AttoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-24)) * (1E18))
        );
    }
	/// <summary>
    /// Extension method to convert YottaBit to ZeptoByte
    /// </summary>
    /// <param name="val">quantity measured in YottaBit</param>
    /// <returns>quantity measured in ZeptoByte</returns>
    public static Quantity<double, ZeptoByte> ToZeptoByte<T>(this BaseQuantity<T, YottaBit> val) where T:IConvertible {
        return new Quantity<double, ZeptoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-24)) * (1E21))
        );
    }
	/// <summary>
    /// Extension method to convert YottaBit to YoctoByte
    /// </summary>
    /// <param name="val">quantity measured in YottaBit</param>
    /// <returns>quantity measured in YoctoByte</returns>
    public static Quantity<double, YoctoByte> ToYoctoByte<T>(this BaseQuantity<T, YottaBit> val) where T:IConvertible {
        return new Quantity<double, YoctoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-24)) * (1E24))
        );
    }
	/// <summary>
    /// Extension method to convert YottaBit to YobiByte
    /// </summary>
    /// <param name="val">quantity measured in YottaBit</param>
    /// <returns>quantity measured in YobiByte</returns>
    public static Quantity<double, YobiByte> ToYobiByte<T>(this BaseQuantity<T, YottaBit> val) where T:IConvertible {
        return new Quantity<double, YobiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-24)) * (1.2089258e-24))
        );
    }
	/// <summary>
    /// Extension method to convert YottaBit to ZebiByte
    /// </summary>
    /// <param name="val">quantity measured in YottaBit</param>
    /// <returns>quantity measured in ZebiByte</returns>
    public static Quantity<double, ZebiByte> ToZebiByte<T>(this BaseQuantity<T, YottaBit> val) where T:IConvertible {
        return new Quantity<double, ZebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-24)) * (1.1805916e-21))
        );
    }
	/// <summary>
    /// Extension method to convert YottaBit to ExbiByte
    /// </summary>
    /// <param name="val">quantity measured in YottaBit</param>
    /// <returns>quantity measured in ExbiByte</returns>
    public static Quantity<double, ExbiByte> ToExbiByte<T>(this BaseQuantity<T, YottaBit> val) where T:IConvertible {
        return new Quantity<double, ExbiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-24)) * (1.1529215e-18))
        );
    }
	/// <summary>
    /// Extension method to convert YottaBit to PebiByte
    /// </summary>
    /// <param name="val">quantity measured in YottaBit</param>
    /// <returns>quantity measured in PebiByte</returns>
    public static Quantity<double, PebiByte> ToPebiByte<T>(this BaseQuantity<T, YottaBit> val) where T:IConvertible {
        return new Quantity<double, PebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-24)) * (1.1258999e-15))
        );
    }
	/// <summary>
    /// Extension method to convert YottaBit to TebiByte
    /// </summary>
    /// <param name="val">quantity measured in YottaBit</param>
    /// <returns>quantity measured in TebiByte</returns>
    public static Quantity<double, TebiByte> ToTebiByte<T>(this BaseQuantity<T, YottaBit> val) where T:IConvertible {
        return new Quantity<double, TebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-24)) * (1.0995116e-12))
        );
    }
	/// <summary>
    /// Extension method to convert YottaBit to GibiByte
    /// </summary>
    /// <param name="val">quantity measured in YottaBit</param>
    /// <returns>quantity measured in GibiByte</returns>
    public static Quantity<double, GibiByte> ToGibiByte<T>(this BaseQuantity<T, YottaBit> val) where T:IConvertible {
        return new Quantity<double, GibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-24)) * (1d/1073741824))
        );
    }
	/// <summary>
    /// Extension method to convert YottaBit to MebiByte
    /// </summary>
    /// <param name="val">quantity measured in YottaBit</param>
    /// <returns>quantity measured in MebiByte</returns>
    public static Quantity<double, MebiByte> ToMebiByte<T>(this BaseQuantity<T, YottaBit> val) where T:IConvertible {
        return new Quantity<double, MebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-24)) * (1d/1048576))
        );
    }
	/// <summary>
    /// Extension method to convert YottaBit to KibiByte
    /// </summary>
    /// <param name="val">quantity measured in YottaBit</param>
    /// <returns>quantity measured in KibiByte</returns>
    public static Quantity<double, KibiByte> ToKibiByte<T>(this BaseQuantity<T, YottaBit> val) where T:IConvertible {
        return new Quantity<double, KibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-24)) * (1d/1024))
        );
    }
	/// <summary>
    /// Extension method to convert Byte to ZettaBit
    /// </summary>
    /// <param name="val">quantity measured in Byte</param>
    /// <returns>quantity measured in ZettaBit</returns>
    public static Quantity<double, ZettaBit> ToZettaBit<T>(this BaseQuantity<T, Byte> val) where T:IConvertible {
        return new Quantity<double, ZettaBit>(
            Convert.ToDouble(val.Value) * (8*1E-21)
        );
    }
	/// <summary>
    /// Extension method to convert ZettaBit to Byte
    /// </summary>
    /// <param name="val">quantity measured in ZettaBit</param>
    /// <returns>quantity measured in Byte</returns>
    public static Quantity<double, Byte> ToByte<T>(this BaseQuantity<T, ZettaBit> val) where T:IConvertible {
        return new Quantity<double, Byte>(
            Convert.ToDouble(val.Value) * (1d/(8*1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaBit to Bit
    /// </summary>
    /// <param name="val">quantity measured in ZettaBit</param>
    /// <returns>quantity measured in Bit</returns>
    public static Quantity<double, Bit> ToBit<T>(this BaseQuantity<T, ZettaBit> val) where T:IConvertible {
        return new Quantity<double, Bit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-21)) * (8))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaBit to YottaBit
    /// </summary>
    /// <param name="val">quantity measured in ZettaBit</param>
    /// <returns>quantity measured in YottaBit</returns>
    public static Quantity<double, YottaBit> ToYottaBit<T>(this BaseQuantity<T, ZettaBit> val) where T:IConvertible {
        return new Quantity<double, YottaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-21)) * (8*1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaBit to ExaBit
    /// </summary>
    /// <param name="val">quantity measured in ZettaBit</param>
    /// <returns>quantity measured in ExaBit</returns>
    public static Quantity<double, ExaBit> ToExaBit<T>(this BaseQuantity<T, ZettaBit> val) where T:IConvertible {
        return new Quantity<double, ExaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-21)) * (8*1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaBit to PetaBit
    /// </summary>
    /// <param name="val">quantity measured in ZettaBit</param>
    /// <returns>quantity measured in PetaBit</returns>
    public static Quantity<double, PetaBit> ToPetaBit<T>(this BaseQuantity<T, ZettaBit> val) where T:IConvertible {
        return new Quantity<double, PetaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-21)) * (8*1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaBit to TeraBit
    /// </summary>
    /// <param name="val">quantity measured in ZettaBit</param>
    /// <returns>quantity measured in TeraBit</returns>
    public static Quantity<double, TeraBit> ToTeraBit<T>(this BaseQuantity<T, ZettaBit> val) where T:IConvertible {
        return new Quantity<double, TeraBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-21)) * (8*1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaBit to GigaBit
    /// </summary>
    /// <param name="val">quantity measured in ZettaBit</param>
    /// <returns>quantity measured in GigaBit</returns>
    public static Quantity<double, GigaBit> ToGigaBit<T>(this BaseQuantity<T, ZettaBit> val) where T:IConvertible {
        return new Quantity<double, GigaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-21)) * (8*1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaBit to MegaBit
    /// </summary>
    /// <param name="val">quantity measured in ZettaBit</param>
    /// <returns>quantity measured in MegaBit</returns>
    public static Quantity<double, MegaBit> ToMegaBit<T>(this BaseQuantity<T, ZettaBit> val) where T:IConvertible {
        return new Quantity<double, MegaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-21)) * (8*1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaBit to KiloBit
    /// </summary>
    /// <param name="val">quantity measured in ZettaBit</param>
    /// <returns>quantity measured in KiloBit</returns>
    public static Quantity<double, KiloBit> ToKiloBit<T>(this BaseQuantity<T, ZettaBit> val) where T:IConvertible {
        return new Quantity<double, KiloBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-21)) * (8*1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaBit to HectoBit
    /// </summary>
    /// <param name="val">quantity measured in ZettaBit</param>
    /// <returns>quantity measured in HectoBit</returns>
    public static Quantity<double, HectoBit> ToHectoBit<T>(this BaseQuantity<T, ZettaBit> val) where T:IConvertible {
        return new Quantity<double, HectoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-21)) * (8*1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaBit to DekaBit
    /// </summary>
    /// <param name="val">quantity measured in ZettaBit</param>
    /// <returns>quantity measured in DekaBit</returns>
    public static Quantity<double, DekaBit> ToDekaBit<T>(this BaseQuantity<T, ZettaBit> val) where T:IConvertible {
        return new Quantity<double, DekaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-21)) * (8*1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaBit to DeciBit
    /// </summary>
    /// <param name="val">quantity measured in ZettaBit</param>
    /// <returns>quantity measured in DeciBit</returns>
    public static Quantity<double, DeciBit> ToDeciBit<T>(this BaseQuantity<T, ZettaBit> val) where T:IConvertible {
        return new Quantity<double, DeciBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-21)) * (8*1E1))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaBit to CentiBit
    /// </summary>
    /// <param name="val">quantity measured in ZettaBit</param>
    /// <returns>quantity measured in CentiBit</returns>
    public static Quantity<double, CentiBit> ToCentiBit<T>(this BaseQuantity<T, ZettaBit> val) where T:IConvertible {
        return new Quantity<double, CentiBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-21)) * (8*1E2))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaBit to MilliBit
    /// </summary>
    /// <param name="val">quantity measured in ZettaBit</param>
    /// <returns>quantity measured in MilliBit</returns>
    public static Quantity<double, MilliBit> ToMilliBit<T>(this BaseQuantity<T, ZettaBit> val) where T:IConvertible {
        return new Quantity<double, MilliBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-21)) * (8*1E3))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaBit to MicroBit
    /// </summary>
    /// <param name="val">quantity measured in ZettaBit</param>
    /// <returns>quantity measured in MicroBit</returns>
    public static Quantity<double, MicroBit> ToMicroBit<T>(this BaseQuantity<T, ZettaBit> val) where T:IConvertible {
        return new Quantity<double, MicroBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-21)) * (8*1E6))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaBit to NanoBit
    /// </summary>
    /// <param name="val">quantity measured in ZettaBit</param>
    /// <returns>quantity measured in NanoBit</returns>
    public static Quantity<double, NanoBit> ToNanoBit<T>(this BaseQuantity<T, ZettaBit> val) where T:IConvertible {
        return new Quantity<double, NanoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-21)) * (8*1E9))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaBit to PicoBit
    /// </summary>
    /// <param name="val">quantity measured in ZettaBit</param>
    /// <returns>quantity measured in PicoBit</returns>
    public static Quantity<double, PicoBit> ToPicoBit<T>(this BaseQuantity<T, ZettaBit> val) where T:IConvertible {
        return new Quantity<double, PicoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-21)) * (8*1E12))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaBit to FemtoBit
    /// </summary>
    /// <param name="val">quantity measured in ZettaBit</param>
    /// <returns>quantity measured in FemtoBit</returns>
    public static Quantity<double, FemtoBit> ToFemtoBit<T>(this BaseQuantity<T, ZettaBit> val) where T:IConvertible {
        return new Quantity<double, FemtoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-21)) * (8*1E15))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaBit to AttoBit
    /// </summary>
    /// <param name="val">quantity measured in ZettaBit</param>
    /// <returns>quantity measured in AttoBit</returns>
    public static Quantity<double, AttoBit> ToAttoBit<T>(this BaseQuantity<T, ZettaBit> val) where T:IConvertible {
        return new Quantity<double, AttoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-21)) * (8*1E18))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaBit to ZeptoBit
    /// </summary>
    /// <param name="val">quantity measured in ZettaBit</param>
    /// <returns>quantity measured in ZeptoBit</returns>
    public static Quantity<double, ZeptoBit> ToZeptoBit<T>(this BaseQuantity<T, ZettaBit> val) where T:IConvertible {
        return new Quantity<double, ZeptoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-21)) * (8*1E21))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaBit to YoctoBit
    /// </summary>
    /// <param name="val">quantity measured in ZettaBit</param>
    /// <returns>quantity measured in YoctoBit</returns>
    public static Quantity<double, YoctoBit> ToYoctoBit<T>(this BaseQuantity<T, ZettaBit> val) where T:IConvertible {
        return new Quantity<double, YoctoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-21)) * (8*1E24))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaBit to YottaByte
    /// </summary>
    /// <param name="val">quantity measured in ZettaBit</param>
    /// <returns>quantity measured in YottaByte</returns>
    public static Quantity<double, YottaByte> ToYottaByte<T>(this BaseQuantity<T, ZettaBit> val) where T:IConvertible {
        return new Quantity<double, YottaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-21)) * (1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaBit to ZettaByte
    /// </summary>
    /// <param name="val">quantity measured in ZettaBit</param>
    /// <returns>quantity measured in ZettaByte</returns>
    public static Quantity<double, ZettaByte> ToZettaByte<T>(this BaseQuantity<T, ZettaBit> val) where T:IConvertible {
        return new Quantity<double, ZettaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-21)) * (1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaBit to ExaByte
    /// </summary>
    /// <param name="val">quantity measured in ZettaBit</param>
    /// <returns>quantity measured in ExaByte</returns>
    public static Quantity<double, ExaByte> ToExaByte<T>(this BaseQuantity<T, ZettaBit> val) where T:IConvertible {
        return new Quantity<double, ExaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-21)) * (1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaBit to PetaByte
    /// </summary>
    /// <param name="val">quantity measured in ZettaBit</param>
    /// <returns>quantity measured in PetaByte</returns>
    public static Quantity<double, PetaByte> ToPetaByte<T>(this BaseQuantity<T, ZettaBit> val) where T:IConvertible {
        return new Quantity<double, PetaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-21)) * (1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaBit to TeraByte
    /// </summary>
    /// <param name="val">quantity measured in ZettaBit</param>
    /// <returns>quantity measured in TeraByte</returns>
    public static Quantity<double, TeraByte> ToTeraByte<T>(this BaseQuantity<T, ZettaBit> val) where T:IConvertible {
        return new Quantity<double, TeraByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-21)) * (1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaBit to GigaByte
    /// </summary>
    /// <param name="val">quantity measured in ZettaBit</param>
    /// <returns>quantity measured in GigaByte</returns>
    public static Quantity<double, GigaByte> ToGigaByte<T>(this BaseQuantity<T, ZettaBit> val) where T:IConvertible {
        return new Quantity<double, GigaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-21)) * (1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaBit to MegaByte
    /// </summary>
    /// <param name="val">quantity measured in ZettaBit</param>
    /// <returns>quantity measured in MegaByte</returns>
    public static Quantity<double, MegaByte> ToMegaByte<T>(this BaseQuantity<T, ZettaBit> val) where T:IConvertible {
        return new Quantity<double, MegaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-21)) * (1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaBit to KiloByte
    /// </summary>
    /// <param name="val">quantity measured in ZettaBit</param>
    /// <returns>quantity measured in KiloByte</returns>
    public static Quantity<double, KiloByte> ToKiloByte<T>(this BaseQuantity<T, ZettaBit> val) where T:IConvertible {
        return new Quantity<double, KiloByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-21)) * (1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaBit to HectoByte
    /// </summary>
    /// <param name="val">quantity measured in ZettaBit</param>
    /// <returns>quantity measured in HectoByte</returns>
    public static Quantity<double, HectoByte> ToHectoByte<T>(this BaseQuantity<T, ZettaBit> val) where T:IConvertible {
        return new Quantity<double, HectoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-21)) * (1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaBit to DekaByte
    /// </summary>
    /// <param name="val">quantity measured in ZettaBit</param>
    /// <returns>quantity measured in DekaByte</returns>
    public static Quantity<double, DekaByte> ToDekaByte<T>(this BaseQuantity<T, ZettaBit> val) where T:IConvertible {
        return new Quantity<double, DekaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-21)) * (1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaBit to DeciByte
    /// </summary>
    /// <param name="val">quantity measured in ZettaBit</param>
    /// <returns>quantity measured in DeciByte</returns>
    public static Quantity<double, DeciByte> ToDeciByte<T>(this BaseQuantity<T, ZettaBit> val) where T:IConvertible {
        return new Quantity<double, DeciByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-21)) * (1E1))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaBit to CentiByte
    /// </summary>
    /// <param name="val">quantity measured in ZettaBit</param>
    /// <returns>quantity measured in CentiByte</returns>
    public static Quantity<double, CentiByte> ToCentiByte<T>(this BaseQuantity<T, ZettaBit> val) where T:IConvertible {
        return new Quantity<double, CentiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-21)) * (1E2))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaBit to MilliByte
    /// </summary>
    /// <param name="val">quantity measured in ZettaBit</param>
    /// <returns>quantity measured in MilliByte</returns>
    public static Quantity<double, MilliByte> ToMilliByte<T>(this BaseQuantity<T, ZettaBit> val) where T:IConvertible {
        return new Quantity<double, MilliByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-21)) * (1E3))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaBit to MicroByte
    /// </summary>
    /// <param name="val">quantity measured in ZettaBit</param>
    /// <returns>quantity measured in MicroByte</returns>
    public static Quantity<double, MicroByte> ToMicroByte<T>(this BaseQuantity<T, ZettaBit> val) where T:IConvertible {
        return new Quantity<double, MicroByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-21)) * (1E6))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaBit to NanoByte
    /// </summary>
    /// <param name="val">quantity measured in ZettaBit</param>
    /// <returns>quantity measured in NanoByte</returns>
    public static Quantity<double, NanoByte> ToNanoByte<T>(this BaseQuantity<T, ZettaBit> val) where T:IConvertible {
        return new Quantity<double, NanoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-21)) * (1E9))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaBit to PicoByte
    /// </summary>
    /// <param name="val">quantity measured in ZettaBit</param>
    /// <returns>quantity measured in PicoByte</returns>
    public static Quantity<double, PicoByte> ToPicoByte<T>(this BaseQuantity<T, ZettaBit> val) where T:IConvertible {
        return new Quantity<double, PicoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-21)) * (1E12))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaBit to FemtoByte
    /// </summary>
    /// <param name="val">quantity measured in ZettaBit</param>
    /// <returns>quantity measured in FemtoByte</returns>
    public static Quantity<double, FemtoByte> ToFemtoByte<T>(this BaseQuantity<T, ZettaBit> val) where T:IConvertible {
        return new Quantity<double, FemtoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-21)) * (1E15))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaBit to AttoByte
    /// </summary>
    /// <param name="val">quantity measured in ZettaBit</param>
    /// <returns>quantity measured in AttoByte</returns>
    public static Quantity<double, AttoByte> ToAttoByte<T>(this BaseQuantity<T, ZettaBit> val) where T:IConvertible {
        return new Quantity<double, AttoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-21)) * (1E18))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaBit to ZeptoByte
    /// </summary>
    /// <param name="val">quantity measured in ZettaBit</param>
    /// <returns>quantity measured in ZeptoByte</returns>
    public static Quantity<double, ZeptoByte> ToZeptoByte<T>(this BaseQuantity<T, ZettaBit> val) where T:IConvertible {
        return new Quantity<double, ZeptoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-21)) * (1E21))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaBit to YoctoByte
    /// </summary>
    /// <param name="val">quantity measured in ZettaBit</param>
    /// <returns>quantity measured in YoctoByte</returns>
    public static Quantity<double, YoctoByte> ToYoctoByte<T>(this BaseQuantity<T, ZettaBit> val) where T:IConvertible {
        return new Quantity<double, YoctoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-21)) * (1E24))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaBit to YobiByte
    /// </summary>
    /// <param name="val">quantity measured in ZettaBit</param>
    /// <returns>quantity measured in YobiByte</returns>
    public static Quantity<double, YobiByte> ToYobiByte<T>(this BaseQuantity<T, ZettaBit> val) where T:IConvertible {
        return new Quantity<double, YobiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-21)) * (1.2089258e-24))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaBit to ZebiByte
    /// </summary>
    /// <param name="val">quantity measured in ZettaBit</param>
    /// <returns>quantity measured in ZebiByte</returns>
    public static Quantity<double, ZebiByte> ToZebiByte<T>(this BaseQuantity<T, ZettaBit> val) where T:IConvertible {
        return new Quantity<double, ZebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-21)) * (1.1805916e-21))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaBit to ExbiByte
    /// </summary>
    /// <param name="val">quantity measured in ZettaBit</param>
    /// <returns>quantity measured in ExbiByte</returns>
    public static Quantity<double, ExbiByte> ToExbiByte<T>(this BaseQuantity<T, ZettaBit> val) where T:IConvertible {
        return new Quantity<double, ExbiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-21)) * (1.1529215e-18))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaBit to PebiByte
    /// </summary>
    /// <param name="val">quantity measured in ZettaBit</param>
    /// <returns>quantity measured in PebiByte</returns>
    public static Quantity<double, PebiByte> ToPebiByte<T>(this BaseQuantity<T, ZettaBit> val) where T:IConvertible {
        return new Quantity<double, PebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-21)) * (1.1258999e-15))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaBit to TebiByte
    /// </summary>
    /// <param name="val">quantity measured in ZettaBit</param>
    /// <returns>quantity measured in TebiByte</returns>
    public static Quantity<double, TebiByte> ToTebiByte<T>(this BaseQuantity<T, ZettaBit> val) where T:IConvertible {
        return new Quantity<double, TebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-21)) * (1.0995116e-12))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaBit to GibiByte
    /// </summary>
    /// <param name="val">quantity measured in ZettaBit</param>
    /// <returns>quantity measured in GibiByte</returns>
    public static Quantity<double, GibiByte> ToGibiByte<T>(this BaseQuantity<T, ZettaBit> val) where T:IConvertible {
        return new Quantity<double, GibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-21)) * (1d/1073741824))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaBit to MebiByte
    /// </summary>
    /// <param name="val">quantity measured in ZettaBit</param>
    /// <returns>quantity measured in MebiByte</returns>
    public static Quantity<double, MebiByte> ToMebiByte<T>(this BaseQuantity<T, ZettaBit> val) where T:IConvertible {
        return new Quantity<double, MebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-21)) * (1d/1048576))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaBit to KibiByte
    /// </summary>
    /// <param name="val">quantity measured in ZettaBit</param>
    /// <returns>quantity measured in KibiByte</returns>
    public static Quantity<double, KibiByte> ToKibiByte<T>(this BaseQuantity<T, ZettaBit> val) where T:IConvertible {
        return new Quantity<double, KibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-21)) * (1d/1024))
        );
    }
	/// <summary>
    /// Extension method to convert Byte to ExaBit
    /// </summary>
    /// <param name="val">quantity measured in Byte</param>
    /// <returns>quantity measured in ExaBit</returns>
    public static Quantity<double, ExaBit> ToExaBit<T>(this BaseQuantity<T, Byte> val) where T:IConvertible {
        return new Quantity<double, ExaBit>(
            Convert.ToDouble(val.Value) * (8*1E-18)
        );
    }
	/// <summary>
    /// Extension method to convert ExaBit to Byte
    /// </summary>
    /// <param name="val">quantity measured in ExaBit</param>
    /// <returns>quantity measured in Byte</returns>
    public static Quantity<double, Byte> ToByte<T>(this BaseQuantity<T, ExaBit> val) where T:IConvertible {
        return new Quantity<double, Byte>(
            Convert.ToDouble(val.Value) * (1d/(8*1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert ExaBit to Bit
    /// </summary>
    /// <param name="val">quantity measured in ExaBit</param>
    /// <returns>quantity measured in Bit</returns>
    public static Quantity<double, Bit> ToBit<T>(this BaseQuantity<T, ExaBit> val) where T:IConvertible {
        return new Quantity<double, Bit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-18)) * (8))
        );
    }
	/// <summary>
    /// Extension method to convert ExaBit to YottaBit
    /// </summary>
    /// <param name="val">quantity measured in ExaBit</param>
    /// <returns>quantity measured in YottaBit</returns>
    public static Quantity<double, YottaBit> ToYottaBit<T>(this BaseQuantity<T, ExaBit> val) where T:IConvertible {
        return new Quantity<double, YottaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-18)) * (8*1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert ExaBit to ZettaBit
    /// </summary>
    /// <param name="val">quantity measured in ExaBit</param>
    /// <returns>quantity measured in ZettaBit</returns>
    public static Quantity<double, ZettaBit> ToZettaBit<T>(this BaseQuantity<T, ExaBit> val) where T:IConvertible {
        return new Quantity<double, ZettaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-18)) * (8*1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert ExaBit to PetaBit
    /// </summary>
    /// <param name="val">quantity measured in ExaBit</param>
    /// <returns>quantity measured in PetaBit</returns>
    public static Quantity<double, PetaBit> ToPetaBit<T>(this BaseQuantity<T, ExaBit> val) where T:IConvertible {
        return new Quantity<double, PetaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-18)) * (8*1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert ExaBit to TeraBit
    /// </summary>
    /// <param name="val">quantity measured in ExaBit</param>
    /// <returns>quantity measured in TeraBit</returns>
    public static Quantity<double, TeraBit> ToTeraBit<T>(this BaseQuantity<T, ExaBit> val) where T:IConvertible {
        return new Quantity<double, TeraBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-18)) * (8*1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert ExaBit to GigaBit
    /// </summary>
    /// <param name="val">quantity measured in ExaBit</param>
    /// <returns>quantity measured in GigaBit</returns>
    public static Quantity<double, GigaBit> ToGigaBit<T>(this BaseQuantity<T, ExaBit> val) where T:IConvertible {
        return new Quantity<double, GigaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-18)) * (8*1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert ExaBit to MegaBit
    /// </summary>
    /// <param name="val">quantity measured in ExaBit</param>
    /// <returns>quantity measured in MegaBit</returns>
    public static Quantity<double, MegaBit> ToMegaBit<T>(this BaseQuantity<T, ExaBit> val) where T:IConvertible {
        return new Quantity<double, MegaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-18)) * (8*1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert ExaBit to KiloBit
    /// </summary>
    /// <param name="val">quantity measured in ExaBit</param>
    /// <returns>quantity measured in KiloBit</returns>
    public static Quantity<double, KiloBit> ToKiloBit<T>(this BaseQuantity<T, ExaBit> val) where T:IConvertible {
        return new Quantity<double, KiloBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-18)) * (8*1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert ExaBit to HectoBit
    /// </summary>
    /// <param name="val">quantity measured in ExaBit</param>
    /// <returns>quantity measured in HectoBit</returns>
    public static Quantity<double, HectoBit> ToHectoBit<T>(this BaseQuantity<T, ExaBit> val) where T:IConvertible {
        return new Quantity<double, HectoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-18)) * (8*1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert ExaBit to DekaBit
    /// </summary>
    /// <param name="val">quantity measured in ExaBit</param>
    /// <returns>quantity measured in DekaBit</returns>
    public static Quantity<double, DekaBit> ToDekaBit<T>(this BaseQuantity<T, ExaBit> val) where T:IConvertible {
        return new Quantity<double, DekaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-18)) * (8*1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert ExaBit to DeciBit
    /// </summary>
    /// <param name="val">quantity measured in ExaBit</param>
    /// <returns>quantity measured in DeciBit</returns>
    public static Quantity<double, DeciBit> ToDeciBit<T>(this BaseQuantity<T, ExaBit> val) where T:IConvertible {
        return new Quantity<double, DeciBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-18)) * (8*1E1))
        );
    }
	/// <summary>
    /// Extension method to convert ExaBit to CentiBit
    /// </summary>
    /// <param name="val">quantity measured in ExaBit</param>
    /// <returns>quantity measured in CentiBit</returns>
    public static Quantity<double, CentiBit> ToCentiBit<T>(this BaseQuantity<T, ExaBit> val) where T:IConvertible {
        return new Quantity<double, CentiBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-18)) * (8*1E2))
        );
    }
	/// <summary>
    /// Extension method to convert ExaBit to MilliBit
    /// </summary>
    /// <param name="val">quantity measured in ExaBit</param>
    /// <returns>quantity measured in MilliBit</returns>
    public static Quantity<double, MilliBit> ToMilliBit<T>(this BaseQuantity<T, ExaBit> val) where T:IConvertible {
        return new Quantity<double, MilliBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-18)) * (8*1E3))
        );
    }
	/// <summary>
    /// Extension method to convert ExaBit to MicroBit
    /// </summary>
    /// <param name="val">quantity measured in ExaBit</param>
    /// <returns>quantity measured in MicroBit</returns>
    public static Quantity<double, MicroBit> ToMicroBit<T>(this BaseQuantity<T, ExaBit> val) where T:IConvertible {
        return new Quantity<double, MicroBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-18)) * (8*1E6))
        );
    }
	/// <summary>
    /// Extension method to convert ExaBit to NanoBit
    /// </summary>
    /// <param name="val">quantity measured in ExaBit</param>
    /// <returns>quantity measured in NanoBit</returns>
    public static Quantity<double, NanoBit> ToNanoBit<T>(this BaseQuantity<T, ExaBit> val) where T:IConvertible {
        return new Quantity<double, NanoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-18)) * (8*1E9))
        );
    }
	/// <summary>
    /// Extension method to convert ExaBit to PicoBit
    /// </summary>
    /// <param name="val">quantity measured in ExaBit</param>
    /// <returns>quantity measured in PicoBit</returns>
    public static Quantity<double, PicoBit> ToPicoBit<T>(this BaseQuantity<T, ExaBit> val) where T:IConvertible {
        return new Quantity<double, PicoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-18)) * (8*1E12))
        );
    }
	/// <summary>
    /// Extension method to convert ExaBit to FemtoBit
    /// </summary>
    /// <param name="val">quantity measured in ExaBit</param>
    /// <returns>quantity measured in FemtoBit</returns>
    public static Quantity<double, FemtoBit> ToFemtoBit<T>(this BaseQuantity<T, ExaBit> val) where T:IConvertible {
        return new Quantity<double, FemtoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-18)) * (8*1E15))
        );
    }
	/// <summary>
    /// Extension method to convert ExaBit to AttoBit
    /// </summary>
    /// <param name="val">quantity measured in ExaBit</param>
    /// <returns>quantity measured in AttoBit</returns>
    public static Quantity<double, AttoBit> ToAttoBit<T>(this BaseQuantity<T, ExaBit> val) where T:IConvertible {
        return new Quantity<double, AttoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-18)) * (8*1E18))
        );
    }
	/// <summary>
    /// Extension method to convert ExaBit to ZeptoBit
    /// </summary>
    /// <param name="val">quantity measured in ExaBit</param>
    /// <returns>quantity measured in ZeptoBit</returns>
    public static Quantity<double, ZeptoBit> ToZeptoBit<T>(this BaseQuantity<T, ExaBit> val) where T:IConvertible {
        return new Quantity<double, ZeptoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-18)) * (8*1E21))
        );
    }
	/// <summary>
    /// Extension method to convert ExaBit to YoctoBit
    /// </summary>
    /// <param name="val">quantity measured in ExaBit</param>
    /// <returns>quantity measured in YoctoBit</returns>
    public static Quantity<double, YoctoBit> ToYoctoBit<T>(this BaseQuantity<T, ExaBit> val) where T:IConvertible {
        return new Quantity<double, YoctoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-18)) * (8*1E24))
        );
    }
	/// <summary>
    /// Extension method to convert ExaBit to YottaByte
    /// </summary>
    /// <param name="val">quantity measured in ExaBit</param>
    /// <returns>quantity measured in YottaByte</returns>
    public static Quantity<double, YottaByte> ToYottaByte<T>(this BaseQuantity<T, ExaBit> val) where T:IConvertible {
        return new Quantity<double, YottaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-18)) * (1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert ExaBit to ZettaByte
    /// </summary>
    /// <param name="val">quantity measured in ExaBit</param>
    /// <returns>quantity measured in ZettaByte</returns>
    public static Quantity<double, ZettaByte> ToZettaByte<T>(this BaseQuantity<T, ExaBit> val) where T:IConvertible {
        return new Quantity<double, ZettaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-18)) * (1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert ExaBit to ExaByte
    /// </summary>
    /// <param name="val">quantity measured in ExaBit</param>
    /// <returns>quantity measured in ExaByte</returns>
    public static Quantity<double, ExaByte> ToExaByte<T>(this BaseQuantity<T, ExaBit> val) where T:IConvertible {
        return new Quantity<double, ExaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-18)) * (1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert ExaBit to PetaByte
    /// </summary>
    /// <param name="val">quantity measured in ExaBit</param>
    /// <returns>quantity measured in PetaByte</returns>
    public static Quantity<double, PetaByte> ToPetaByte<T>(this BaseQuantity<T, ExaBit> val) where T:IConvertible {
        return new Quantity<double, PetaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-18)) * (1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert ExaBit to TeraByte
    /// </summary>
    /// <param name="val">quantity measured in ExaBit</param>
    /// <returns>quantity measured in TeraByte</returns>
    public static Quantity<double, TeraByte> ToTeraByte<T>(this BaseQuantity<T, ExaBit> val) where T:IConvertible {
        return new Quantity<double, TeraByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-18)) * (1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert ExaBit to GigaByte
    /// </summary>
    /// <param name="val">quantity measured in ExaBit</param>
    /// <returns>quantity measured in GigaByte</returns>
    public static Quantity<double, GigaByte> ToGigaByte<T>(this BaseQuantity<T, ExaBit> val) where T:IConvertible {
        return new Quantity<double, GigaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-18)) * (1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert ExaBit to MegaByte
    /// </summary>
    /// <param name="val">quantity measured in ExaBit</param>
    /// <returns>quantity measured in MegaByte</returns>
    public static Quantity<double, MegaByte> ToMegaByte<T>(this BaseQuantity<T, ExaBit> val) where T:IConvertible {
        return new Quantity<double, MegaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-18)) * (1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert ExaBit to KiloByte
    /// </summary>
    /// <param name="val">quantity measured in ExaBit</param>
    /// <returns>quantity measured in KiloByte</returns>
    public static Quantity<double, KiloByte> ToKiloByte<T>(this BaseQuantity<T, ExaBit> val) where T:IConvertible {
        return new Quantity<double, KiloByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-18)) * (1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert ExaBit to HectoByte
    /// </summary>
    /// <param name="val">quantity measured in ExaBit</param>
    /// <returns>quantity measured in HectoByte</returns>
    public static Quantity<double, HectoByte> ToHectoByte<T>(this BaseQuantity<T, ExaBit> val) where T:IConvertible {
        return new Quantity<double, HectoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-18)) * (1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert ExaBit to DekaByte
    /// </summary>
    /// <param name="val">quantity measured in ExaBit</param>
    /// <returns>quantity measured in DekaByte</returns>
    public static Quantity<double, DekaByte> ToDekaByte<T>(this BaseQuantity<T, ExaBit> val) where T:IConvertible {
        return new Quantity<double, DekaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-18)) * (1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert ExaBit to DeciByte
    /// </summary>
    /// <param name="val">quantity measured in ExaBit</param>
    /// <returns>quantity measured in DeciByte</returns>
    public static Quantity<double, DeciByte> ToDeciByte<T>(this BaseQuantity<T, ExaBit> val) where T:IConvertible {
        return new Quantity<double, DeciByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-18)) * (1E1))
        );
    }
	/// <summary>
    /// Extension method to convert ExaBit to CentiByte
    /// </summary>
    /// <param name="val">quantity measured in ExaBit</param>
    /// <returns>quantity measured in CentiByte</returns>
    public static Quantity<double, CentiByte> ToCentiByte<T>(this BaseQuantity<T, ExaBit> val) where T:IConvertible {
        return new Quantity<double, CentiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-18)) * (1E2))
        );
    }
	/// <summary>
    /// Extension method to convert ExaBit to MilliByte
    /// </summary>
    /// <param name="val">quantity measured in ExaBit</param>
    /// <returns>quantity measured in MilliByte</returns>
    public static Quantity<double, MilliByte> ToMilliByte<T>(this BaseQuantity<T, ExaBit> val) where T:IConvertible {
        return new Quantity<double, MilliByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-18)) * (1E3))
        );
    }
	/// <summary>
    /// Extension method to convert ExaBit to MicroByte
    /// </summary>
    /// <param name="val">quantity measured in ExaBit</param>
    /// <returns>quantity measured in MicroByte</returns>
    public static Quantity<double, MicroByte> ToMicroByte<T>(this BaseQuantity<T, ExaBit> val) where T:IConvertible {
        return new Quantity<double, MicroByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-18)) * (1E6))
        );
    }
	/// <summary>
    /// Extension method to convert ExaBit to NanoByte
    /// </summary>
    /// <param name="val">quantity measured in ExaBit</param>
    /// <returns>quantity measured in NanoByte</returns>
    public static Quantity<double, NanoByte> ToNanoByte<T>(this BaseQuantity<T, ExaBit> val) where T:IConvertible {
        return new Quantity<double, NanoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-18)) * (1E9))
        );
    }
	/// <summary>
    /// Extension method to convert ExaBit to PicoByte
    /// </summary>
    /// <param name="val">quantity measured in ExaBit</param>
    /// <returns>quantity measured in PicoByte</returns>
    public static Quantity<double, PicoByte> ToPicoByte<T>(this BaseQuantity<T, ExaBit> val) where T:IConvertible {
        return new Quantity<double, PicoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-18)) * (1E12))
        );
    }
	/// <summary>
    /// Extension method to convert ExaBit to FemtoByte
    /// </summary>
    /// <param name="val">quantity measured in ExaBit</param>
    /// <returns>quantity measured in FemtoByte</returns>
    public static Quantity<double, FemtoByte> ToFemtoByte<T>(this BaseQuantity<T, ExaBit> val) where T:IConvertible {
        return new Quantity<double, FemtoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-18)) * (1E15))
        );
    }
	/// <summary>
    /// Extension method to convert ExaBit to AttoByte
    /// </summary>
    /// <param name="val">quantity measured in ExaBit</param>
    /// <returns>quantity measured in AttoByte</returns>
    public static Quantity<double, AttoByte> ToAttoByte<T>(this BaseQuantity<T, ExaBit> val) where T:IConvertible {
        return new Quantity<double, AttoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-18)) * (1E18))
        );
    }
	/// <summary>
    /// Extension method to convert ExaBit to ZeptoByte
    /// </summary>
    /// <param name="val">quantity measured in ExaBit</param>
    /// <returns>quantity measured in ZeptoByte</returns>
    public static Quantity<double, ZeptoByte> ToZeptoByte<T>(this BaseQuantity<T, ExaBit> val) where T:IConvertible {
        return new Quantity<double, ZeptoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-18)) * (1E21))
        );
    }
	/// <summary>
    /// Extension method to convert ExaBit to YoctoByte
    /// </summary>
    /// <param name="val">quantity measured in ExaBit</param>
    /// <returns>quantity measured in YoctoByte</returns>
    public static Quantity<double, YoctoByte> ToYoctoByte<T>(this BaseQuantity<T, ExaBit> val) where T:IConvertible {
        return new Quantity<double, YoctoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-18)) * (1E24))
        );
    }
	/// <summary>
    /// Extension method to convert ExaBit to YobiByte
    /// </summary>
    /// <param name="val">quantity measured in ExaBit</param>
    /// <returns>quantity measured in YobiByte</returns>
    public static Quantity<double, YobiByte> ToYobiByte<T>(this BaseQuantity<T, ExaBit> val) where T:IConvertible {
        return new Quantity<double, YobiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-18)) * (1.2089258e-24))
        );
    }
	/// <summary>
    /// Extension method to convert ExaBit to ZebiByte
    /// </summary>
    /// <param name="val">quantity measured in ExaBit</param>
    /// <returns>quantity measured in ZebiByte</returns>
    public static Quantity<double, ZebiByte> ToZebiByte<T>(this BaseQuantity<T, ExaBit> val) where T:IConvertible {
        return new Quantity<double, ZebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-18)) * (1.1805916e-21))
        );
    }
	/// <summary>
    /// Extension method to convert ExaBit to ExbiByte
    /// </summary>
    /// <param name="val">quantity measured in ExaBit</param>
    /// <returns>quantity measured in ExbiByte</returns>
    public static Quantity<double, ExbiByte> ToExbiByte<T>(this BaseQuantity<T, ExaBit> val) where T:IConvertible {
        return new Quantity<double, ExbiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-18)) * (1.1529215e-18))
        );
    }
	/// <summary>
    /// Extension method to convert ExaBit to PebiByte
    /// </summary>
    /// <param name="val">quantity measured in ExaBit</param>
    /// <returns>quantity measured in PebiByte</returns>
    public static Quantity<double, PebiByte> ToPebiByte<T>(this BaseQuantity<T, ExaBit> val) where T:IConvertible {
        return new Quantity<double, PebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-18)) * (1.1258999e-15))
        );
    }
	/// <summary>
    /// Extension method to convert ExaBit to TebiByte
    /// </summary>
    /// <param name="val">quantity measured in ExaBit</param>
    /// <returns>quantity measured in TebiByte</returns>
    public static Quantity<double, TebiByte> ToTebiByte<T>(this BaseQuantity<T, ExaBit> val) where T:IConvertible {
        return new Quantity<double, TebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-18)) * (1.0995116e-12))
        );
    }
	/// <summary>
    /// Extension method to convert ExaBit to GibiByte
    /// </summary>
    /// <param name="val">quantity measured in ExaBit</param>
    /// <returns>quantity measured in GibiByte</returns>
    public static Quantity<double, GibiByte> ToGibiByte<T>(this BaseQuantity<T, ExaBit> val) where T:IConvertible {
        return new Quantity<double, GibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-18)) * (1d/1073741824))
        );
    }
	/// <summary>
    /// Extension method to convert ExaBit to MebiByte
    /// </summary>
    /// <param name="val">quantity measured in ExaBit</param>
    /// <returns>quantity measured in MebiByte</returns>
    public static Quantity<double, MebiByte> ToMebiByte<T>(this BaseQuantity<T, ExaBit> val) where T:IConvertible {
        return new Quantity<double, MebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-18)) * (1d/1048576))
        );
    }
	/// <summary>
    /// Extension method to convert ExaBit to KibiByte
    /// </summary>
    /// <param name="val">quantity measured in ExaBit</param>
    /// <returns>quantity measured in KibiByte</returns>
    public static Quantity<double, KibiByte> ToKibiByte<T>(this BaseQuantity<T, ExaBit> val) where T:IConvertible {
        return new Quantity<double, KibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-18)) * (1d/1024))
        );
    }
	/// <summary>
    /// Extension method to convert Byte to PetaBit
    /// </summary>
    /// <param name="val">quantity measured in Byte</param>
    /// <returns>quantity measured in PetaBit</returns>
    public static Quantity<double, PetaBit> ToPetaBit<T>(this BaseQuantity<T, Byte> val) where T:IConvertible {
        return new Quantity<double, PetaBit>(
            Convert.ToDouble(val.Value) * (8*1E-15)
        );
    }
	/// <summary>
    /// Extension method to convert PetaBit to Byte
    /// </summary>
    /// <param name="val">quantity measured in PetaBit</param>
    /// <returns>quantity measured in Byte</returns>
    public static Quantity<double, Byte> ToByte<T>(this BaseQuantity<T, PetaBit> val) where T:IConvertible {
        return new Quantity<double, Byte>(
            Convert.ToDouble(val.Value) * (1d/(8*1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert PetaBit to Bit
    /// </summary>
    /// <param name="val">quantity measured in PetaBit</param>
    /// <returns>quantity measured in Bit</returns>
    public static Quantity<double, Bit> ToBit<T>(this BaseQuantity<T, PetaBit> val) where T:IConvertible {
        return new Quantity<double, Bit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-15)) * (8))
        );
    }
	/// <summary>
    /// Extension method to convert PetaBit to YottaBit
    /// </summary>
    /// <param name="val">quantity measured in PetaBit</param>
    /// <returns>quantity measured in YottaBit</returns>
    public static Quantity<double, YottaBit> ToYottaBit<T>(this BaseQuantity<T, PetaBit> val) where T:IConvertible {
        return new Quantity<double, YottaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-15)) * (8*1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert PetaBit to ZettaBit
    /// </summary>
    /// <param name="val">quantity measured in PetaBit</param>
    /// <returns>quantity measured in ZettaBit</returns>
    public static Quantity<double, ZettaBit> ToZettaBit<T>(this BaseQuantity<T, PetaBit> val) where T:IConvertible {
        return new Quantity<double, ZettaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-15)) * (8*1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert PetaBit to ExaBit
    /// </summary>
    /// <param name="val">quantity measured in PetaBit</param>
    /// <returns>quantity measured in ExaBit</returns>
    public static Quantity<double, ExaBit> ToExaBit<T>(this BaseQuantity<T, PetaBit> val) where T:IConvertible {
        return new Quantity<double, ExaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-15)) * (8*1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert PetaBit to TeraBit
    /// </summary>
    /// <param name="val">quantity measured in PetaBit</param>
    /// <returns>quantity measured in TeraBit</returns>
    public static Quantity<double, TeraBit> ToTeraBit<T>(this BaseQuantity<T, PetaBit> val) where T:IConvertible {
        return new Quantity<double, TeraBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-15)) * (8*1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert PetaBit to GigaBit
    /// </summary>
    /// <param name="val">quantity measured in PetaBit</param>
    /// <returns>quantity measured in GigaBit</returns>
    public static Quantity<double, GigaBit> ToGigaBit<T>(this BaseQuantity<T, PetaBit> val) where T:IConvertible {
        return new Quantity<double, GigaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-15)) * (8*1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert PetaBit to MegaBit
    /// </summary>
    /// <param name="val">quantity measured in PetaBit</param>
    /// <returns>quantity measured in MegaBit</returns>
    public static Quantity<double, MegaBit> ToMegaBit<T>(this BaseQuantity<T, PetaBit> val) where T:IConvertible {
        return new Quantity<double, MegaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-15)) * (8*1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert PetaBit to KiloBit
    /// </summary>
    /// <param name="val">quantity measured in PetaBit</param>
    /// <returns>quantity measured in KiloBit</returns>
    public static Quantity<double, KiloBit> ToKiloBit<T>(this BaseQuantity<T, PetaBit> val) where T:IConvertible {
        return new Quantity<double, KiloBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-15)) * (8*1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert PetaBit to HectoBit
    /// </summary>
    /// <param name="val">quantity measured in PetaBit</param>
    /// <returns>quantity measured in HectoBit</returns>
    public static Quantity<double, HectoBit> ToHectoBit<T>(this BaseQuantity<T, PetaBit> val) where T:IConvertible {
        return new Quantity<double, HectoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-15)) * (8*1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert PetaBit to DekaBit
    /// </summary>
    /// <param name="val">quantity measured in PetaBit</param>
    /// <returns>quantity measured in DekaBit</returns>
    public static Quantity<double, DekaBit> ToDekaBit<T>(this BaseQuantity<T, PetaBit> val) where T:IConvertible {
        return new Quantity<double, DekaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-15)) * (8*1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert PetaBit to DeciBit
    /// </summary>
    /// <param name="val">quantity measured in PetaBit</param>
    /// <returns>quantity measured in DeciBit</returns>
    public static Quantity<double, DeciBit> ToDeciBit<T>(this BaseQuantity<T, PetaBit> val) where T:IConvertible {
        return new Quantity<double, DeciBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-15)) * (8*1E1))
        );
    }
	/// <summary>
    /// Extension method to convert PetaBit to CentiBit
    /// </summary>
    /// <param name="val">quantity measured in PetaBit</param>
    /// <returns>quantity measured in CentiBit</returns>
    public static Quantity<double, CentiBit> ToCentiBit<T>(this BaseQuantity<T, PetaBit> val) where T:IConvertible {
        return new Quantity<double, CentiBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-15)) * (8*1E2))
        );
    }
	/// <summary>
    /// Extension method to convert PetaBit to MilliBit
    /// </summary>
    /// <param name="val">quantity measured in PetaBit</param>
    /// <returns>quantity measured in MilliBit</returns>
    public static Quantity<double, MilliBit> ToMilliBit<T>(this BaseQuantity<T, PetaBit> val) where T:IConvertible {
        return new Quantity<double, MilliBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-15)) * (8*1E3))
        );
    }
	/// <summary>
    /// Extension method to convert PetaBit to MicroBit
    /// </summary>
    /// <param name="val">quantity measured in PetaBit</param>
    /// <returns>quantity measured in MicroBit</returns>
    public static Quantity<double, MicroBit> ToMicroBit<T>(this BaseQuantity<T, PetaBit> val) where T:IConvertible {
        return new Quantity<double, MicroBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-15)) * (8*1E6))
        );
    }
	/// <summary>
    /// Extension method to convert PetaBit to NanoBit
    /// </summary>
    /// <param name="val">quantity measured in PetaBit</param>
    /// <returns>quantity measured in NanoBit</returns>
    public static Quantity<double, NanoBit> ToNanoBit<T>(this BaseQuantity<T, PetaBit> val) where T:IConvertible {
        return new Quantity<double, NanoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-15)) * (8*1E9))
        );
    }
	/// <summary>
    /// Extension method to convert PetaBit to PicoBit
    /// </summary>
    /// <param name="val">quantity measured in PetaBit</param>
    /// <returns>quantity measured in PicoBit</returns>
    public static Quantity<double, PicoBit> ToPicoBit<T>(this BaseQuantity<T, PetaBit> val) where T:IConvertible {
        return new Quantity<double, PicoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-15)) * (8*1E12))
        );
    }
	/// <summary>
    /// Extension method to convert PetaBit to FemtoBit
    /// </summary>
    /// <param name="val">quantity measured in PetaBit</param>
    /// <returns>quantity measured in FemtoBit</returns>
    public static Quantity<double, FemtoBit> ToFemtoBit<T>(this BaseQuantity<T, PetaBit> val) where T:IConvertible {
        return new Quantity<double, FemtoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-15)) * (8*1E15))
        );
    }
	/// <summary>
    /// Extension method to convert PetaBit to AttoBit
    /// </summary>
    /// <param name="val">quantity measured in PetaBit</param>
    /// <returns>quantity measured in AttoBit</returns>
    public static Quantity<double, AttoBit> ToAttoBit<T>(this BaseQuantity<T, PetaBit> val) where T:IConvertible {
        return new Quantity<double, AttoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-15)) * (8*1E18))
        );
    }
	/// <summary>
    /// Extension method to convert PetaBit to ZeptoBit
    /// </summary>
    /// <param name="val">quantity measured in PetaBit</param>
    /// <returns>quantity measured in ZeptoBit</returns>
    public static Quantity<double, ZeptoBit> ToZeptoBit<T>(this BaseQuantity<T, PetaBit> val) where T:IConvertible {
        return new Quantity<double, ZeptoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-15)) * (8*1E21))
        );
    }
	/// <summary>
    /// Extension method to convert PetaBit to YoctoBit
    /// </summary>
    /// <param name="val">quantity measured in PetaBit</param>
    /// <returns>quantity measured in YoctoBit</returns>
    public static Quantity<double, YoctoBit> ToYoctoBit<T>(this BaseQuantity<T, PetaBit> val) where T:IConvertible {
        return new Quantity<double, YoctoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-15)) * (8*1E24))
        );
    }
	/// <summary>
    /// Extension method to convert PetaBit to YottaByte
    /// </summary>
    /// <param name="val">quantity measured in PetaBit</param>
    /// <returns>quantity measured in YottaByte</returns>
    public static Quantity<double, YottaByte> ToYottaByte<T>(this BaseQuantity<T, PetaBit> val) where T:IConvertible {
        return new Quantity<double, YottaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-15)) * (1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert PetaBit to ZettaByte
    /// </summary>
    /// <param name="val">quantity measured in PetaBit</param>
    /// <returns>quantity measured in ZettaByte</returns>
    public static Quantity<double, ZettaByte> ToZettaByte<T>(this BaseQuantity<T, PetaBit> val) where T:IConvertible {
        return new Quantity<double, ZettaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-15)) * (1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert PetaBit to ExaByte
    /// </summary>
    /// <param name="val">quantity measured in PetaBit</param>
    /// <returns>quantity measured in ExaByte</returns>
    public static Quantity<double, ExaByte> ToExaByte<T>(this BaseQuantity<T, PetaBit> val) where T:IConvertible {
        return new Quantity<double, ExaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-15)) * (1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert PetaBit to PetaByte
    /// </summary>
    /// <param name="val">quantity measured in PetaBit</param>
    /// <returns>quantity measured in PetaByte</returns>
    public static Quantity<double, PetaByte> ToPetaByte<T>(this BaseQuantity<T, PetaBit> val) where T:IConvertible {
        return new Quantity<double, PetaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-15)) * (1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert PetaBit to TeraByte
    /// </summary>
    /// <param name="val">quantity measured in PetaBit</param>
    /// <returns>quantity measured in TeraByte</returns>
    public static Quantity<double, TeraByte> ToTeraByte<T>(this BaseQuantity<T, PetaBit> val) where T:IConvertible {
        return new Quantity<double, TeraByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-15)) * (1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert PetaBit to GigaByte
    /// </summary>
    /// <param name="val">quantity measured in PetaBit</param>
    /// <returns>quantity measured in GigaByte</returns>
    public static Quantity<double, GigaByte> ToGigaByte<T>(this BaseQuantity<T, PetaBit> val) where T:IConvertible {
        return new Quantity<double, GigaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-15)) * (1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert PetaBit to MegaByte
    /// </summary>
    /// <param name="val">quantity measured in PetaBit</param>
    /// <returns>quantity measured in MegaByte</returns>
    public static Quantity<double, MegaByte> ToMegaByte<T>(this BaseQuantity<T, PetaBit> val) where T:IConvertible {
        return new Quantity<double, MegaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-15)) * (1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert PetaBit to KiloByte
    /// </summary>
    /// <param name="val">quantity measured in PetaBit</param>
    /// <returns>quantity measured in KiloByte</returns>
    public static Quantity<double, KiloByte> ToKiloByte<T>(this BaseQuantity<T, PetaBit> val) where T:IConvertible {
        return new Quantity<double, KiloByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-15)) * (1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert PetaBit to HectoByte
    /// </summary>
    /// <param name="val">quantity measured in PetaBit</param>
    /// <returns>quantity measured in HectoByte</returns>
    public static Quantity<double, HectoByte> ToHectoByte<T>(this BaseQuantity<T, PetaBit> val) where T:IConvertible {
        return new Quantity<double, HectoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-15)) * (1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert PetaBit to DekaByte
    /// </summary>
    /// <param name="val">quantity measured in PetaBit</param>
    /// <returns>quantity measured in DekaByte</returns>
    public static Quantity<double, DekaByte> ToDekaByte<T>(this BaseQuantity<T, PetaBit> val) where T:IConvertible {
        return new Quantity<double, DekaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-15)) * (1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert PetaBit to DeciByte
    /// </summary>
    /// <param name="val">quantity measured in PetaBit</param>
    /// <returns>quantity measured in DeciByte</returns>
    public static Quantity<double, DeciByte> ToDeciByte<T>(this BaseQuantity<T, PetaBit> val) where T:IConvertible {
        return new Quantity<double, DeciByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-15)) * (1E1))
        );
    }
	/// <summary>
    /// Extension method to convert PetaBit to CentiByte
    /// </summary>
    /// <param name="val">quantity measured in PetaBit</param>
    /// <returns>quantity measured in CentiByte</returns>
    public static Quantity<double, CentiByte> ToCentiByte<T>(this BaseQuantity<T, PetaBit> val) where T:IConvertible {
        return new Quantity<double, CentiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-15)) * (1E2))
        );
    }
	/// <summary>
    /// Extension method to convert PetaBit to MilliByte
    /// </summary>
    /// <param name="val">quantity measured in PetaBit</param>
    /// <returns>quantity measured in MilliByte</returns>
    public static Quantity<double, MilliByte> ToMilliByte<T>(this BaseQuantity<T, PetaBit> val) where T:IConvertible {
        return new Quantity<double, MilliByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-15)) * (1E3))
        );
    }
	/// <summary>
    /// Extension method to convert PetaBit to MicroByte
    /// </summary>
    /// <param name="val">quantity measured in PetaBit</param>
    /// <returns>quantity measured in MicroByte</returns>
    public static Quantity<double, MicroByte> ToMicroByte<T>(this BaseQuantity<T, PetaBit> val) where T:IConvertible {
        return new Quantity<double, MicroByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-15)) * (1E6))
        );
    }
	/// <summary>
    /// Extension method to convert PetaBit to NanoByte
    /// </summary>
    /// <param name="val">quantity measured in PetaBit</param>
    /// <returns>quantity measured in NanoByte</returns>
    public static Quantity<double, NanoByte> ToNanoByte<T>(this BaseQuantity<T, PetaBit> val) where T:IConvertible {
        return new Quantity<double, NanoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-15)) * (1E9))
        );
    }
	/// <summary>
    /// Extension method to convert PetaBit to PicoByte
    /// </summary>
    /// <param name="val">quantity measured in PetaBit</param>
    /// <returns>quantity measured in PicoByte</returns>
    public static Quantity<double, PicoByte> ToPicoByte<T>(this BaseQuantity<T, PetaBit> val) where T:IConvertible {
        return new Quantity<double, PicoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-15)) * (1E12))
        );
    }
	/// <summary>
    /// Extension method to convert PetaBit to FemtoByte
    /// </summary>
    /// <param name="val">quantity measured in PetaBit</param>
    /// <returns>quantity measured in FemtoByte</returns>
    public static Quantity<double, FemtoByte> ToFemtoByte<T>(this BaseQuantity<T, PetaBit> val) where T:IConvertible {
        return new Quantity<double, FemtoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-15)) * (1E15))
        );
    }
	/// <summary>
    /// Extension method to convert PetaBit to AttoByte
    /// </summary>
    /// <param name="val">quantity measured in PetaBit</param>
    /// <returns>quantity measured in AttoByte</returns>
    public static Quantity<double, AttoByte> ToAttoByte<T>(this BaseQuantity<T, PetaBit> val) where T:IConvertible {
        return new Quantity<double, AttoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-15)) * (1E18))
        );
    }
	/// <summary>
    /// Extension method to convert PetaBit to ZeptoByte
    /// </summary>
    /// <param name="val">quantity measured in PetaBit</param>
    /// <returns>quantity measured in ZeptoByte</returns>
    public static Quantity<double, ZeptoByte> ToZeptoByte<T>(this BaseQuantity<T, PetaBit> val) where T:IConvertible {
        return new Quantity<double, ZeptoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-15)) * (1E21))
        );
    }
	/// <summary>
    /// Extension method to convert PetaBit to YoctoByte
    /// </summary>
    /// <param name="val">quantity measured in PetaBit</param>
    /// <returns>quantity measured in YoctoByte</returns>
    public static Quantity<double, YoctoByte> ToYoctoByte<T>(this BaseQuantity<T, PetaBit> val) where T:IConvertible {
        return new Quantity<double, YoctoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-15)) * (1E24))
        );
    }
	/// <summary>
    /// Extension method to convert PetaBit to YobiByte
    /// </summary>
    /// <param name="val">quantity measured in PetaBit</param>
    /// <returns>quantity measured in YobiByte</returns>
    public static Quantity<double, YobiByte> ToYobiByte<T>(this BaseQuantity<T, PetaBit> val) where T:IConvertible {
        return new Quantity<double, YobiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-15)) * (1.2089258e-24))
        );
    }
	/// <summary>
    /// Extension method to convert PetaBit to ZebiByte
    /// </summary>
    /// <param name="val">quantity measured in PetaBit</param>
    /// <returns>quantity measured in ZebiByte</returns>
    public static Quantity<double, ZebiByte> ToZebiByte<T>(this BaseQuantity<T, PetaBit> val) where T:IConvertible {
        return new Quantity<double, ZebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-15)) * (1.1805916e-21))
        );
    }
	/// <summary>
    /// Extension method to convert PetaBit to ExbiByte
    /// </summary>
    /// <param name="val">quantity measured in PetaBit</param>
    /// <returns>quantity measured in ExbiByte</returns>
    public static Quantity<double, ExbiByte> ToExbiByte<T>(this BaseQuantity<T, PetaBit> val) where T:IConvertible {
        return new Quantity<double, ExbiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-15)) * (1.1529215e-18))
        );
    }
	/// <summary>
    /// Extension method to convert PetaBit to PebiByte
    /// </summary>
    /// <param name="val">quantity measured in PetaBit</param>
    /// <returns>quantity measured in PebiByte</returns>
    public static Quantity<double, PebiByte> ToPebiByte<T>(this BaseQuantity<T, PetaBit> val) where T:IConvertible {
        return new Quantity<double, PebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-15)) * (1.1258999e-15))
        );
    }
	/// <summary>
    /// Extension method to convert PetaBit to TebiByte
    /// </summary>
    /// <param name="val">quantity measured in PetaBit</param>
    /// <returns>quantity measured in TebiByte</returns>
    public static Quantity<double, TebiByte> ToTebiByte<T>(this BaseQuantity<T, PetaBit> val) where T:IConvertible {
        return new Quantity<double, TebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-15)) * (1.0995116e-12))
        );
    }
	/// <summary>
    /// Extension method to convert PetaBit to GibiByte
    /// </summary>
    /// <param name="val">quantity measured in PetaBit</param>
    /// <returns>quantity measured in GibiByte</returns>
    public static Quantity<double, GibiByte> ToGibiByte<T>(this BaseQuantity<T, PetaBit> val) where T:IConvertible {
        return new Quantity<double, GibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-15)) * (1d/1073741824))
        );
    }
	/// <summary>
    /// Extension method to convert PetaBit to MebiByte
    /// </summary>
    /// <param name="val">quantity measured in PetaBit</param>
    /// <returns>quantity measured in MebiByte</returns>
    public static Quantity<double, MebiByte> ToMebiByte<T>(this BaseQuantity<T, PetaBit> val) where T:IConvertible {
        return new Quantity<double, MebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-15)) * (1d/1048576))
        );
    }
	/// <summary>
    /// Extension method to convert PetaBit to KibiByte
    /// </summary>
    /// <param name="val">quantity measured in PetaBit</param>
    /// <returns>quantity measured in KibiByte</returns>
    public static Quantity<double, KibiByte> ToKibiByte<T>(this BaseQuantity<T, PetaBit> val) where T:IConvertible {
        return new Quantity<double, KibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-15)) * (1d/1024))
        );
    }
	/// <summary>
    /// Extension method to convert Byte to TeraBit
    /// </summary>
    /// <param name="val">quantity measured in Byte</param>
    /// <returns>quantity measured in TeraBit</returns>
    public static Quantity<double, TeraBit> ToTeraBit<T>(this BaseQuantity<T, Byte> val) where T:IConvertible {
        return new Quantity<double, TeraBit>(
            Convert.ToDouble(val.Value) * (8*1E-12)
        );
    }
	/// <summary>
    /// Extension method to convert TeraBit to Byte
    /// </summary>
    /// <param name="val">quantity measured in TeraBit</param>
    /// <returns>quantity measured in Byte</returns>
    public static Quantity<double, Byte> ToByte<T>(this BaseQuantity<T, TeraBit> val) where T:IConvertible {
        return new Quantity<double, Byte>(
            Convert.ToDouble(val.Value) * (1d/(8*1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert TeraBit to Bit
    /// </summary>
    /// <param name="val">quantity measured in TeraBit</param>
    /// <returns>quantity measured in Bit</returns>
    public static Quantity<double, Bit> ToBit<T>(this BaseQuantity<T, TeraBit> val) where T:IConvertible {
        return new Quantity<double, Bit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-12)) * (8))
        );
    }
	/// <summary>
    /// Extension method to convert TeraBit to YottaBit
    /// </summary>
    /// <param name="val">quantity measured in TeraBit</param>
    /// <returns>quantity measured in YottaBit</returns>
    public static Quantity<double, YottaBit> ToYottaBit<T>(this BaseQuantity<T, TeraBit> val) where T:IConvertible {
        return new Quantity<double, YottaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-12)) * (8*1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert TeraBit to ZettaBit
    /// </summary>
    /// <param name="val">quantity measured in TeraBit</param>
    /// <returns>quantity measured in ZettaBit</returns>
    public static Quantity<double, ZettaBit> ToZettaBit<T>(this BaseQuantity<T, TeraBit> val) where T:IConvertible {
        return new Quantity<double, ZettaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-12)) * (8*1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert TeraBit to ExaBit
    /// </summary>
    /// <param name="val">quantity measured in TeraBit</param>
    /// <returns>quantity measured in ExaBit</returns>
    public static Quantity<double, ExaBit> ToExaBit<T>(this BaseQuantity<T, TeraBit> val) where T:IConvertible {
        return new Quantity<double, ExaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-12)) * (8*1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert TeraBit to PetaBit
    /// </summary>
    /// <param name="val">quantity measured in TeraBit</param>
    /// <returns>quantity measured in PetaBit</returns>
    public static Quantity<double, PetaBit> ToPetaBit<T>(this BaseQuantity<T, TeraBit> val) where T:IConvertible {
        return new Quantity<double, PetaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-12)) * (8*1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert TeraBit to GigaBit
    /// </summary>
    /// <param name="val">quantity measured in TeraBit</param>
    /// <returns>quantity measured in GigaBit</returns>
    public static Quantity<double, GigaBit> ToGigaBit<T>(this BaseQuantity<T, TeraBit> val) where T:IConvertible {
        return new Quantity<double, GigaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-12)) * (8*1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert TeraBit to MegaBit
    /// </summary>
    /// <param name="val">quantity measured in TeraBit</param>
    /// <returns>quantity measured in MegaBit</returns>
    public static Quantity<double, MegaBit> ToMegaBit<T>(this BaseQuantity<T, TeraBit> val) where T:IConvertible {
        return new Quantity<double, MegaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-12)) * (8*1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert TeraBit to KiloBit
    /// </summary>
    /// <param name="val">quantity measured in TeraBit</param>
    /// <returns>quantity measured in KiloBit</returns>
    public static Quantity<double, KiloBit> ToKiloBit<T>(this BaseQuantity<T, TeraBit> val) where T:IConvertible {
        return new Quantity<double, KiloBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-12)) * (8*1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert TeraBit to HectoBit
    /// </summary>
    /// <param name="val">quantity measured in TeraBit</param>
    /// <returns>quantity measured in HectoBit</returns>
    public static Quantity<double, HectoBit> ToHectoBit<T>(this BaseQuantity<T, TeraBit> val) where T:IConvertible {
        return new Quantity<double, HectoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-12)) * (8*1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert TeraBit to DekaBit
    /// </summary>
    /// <param name="val">quantity measured in TeraBit</param>
    /// <returns>quantity measured in DekaBit</returns>
    public static Quantity<double, DekaBit> ToDekaBit<T>(this BaseQuantity<T, TeraBit> val) where T:IConvertible {
        return new Quantity<double, DekaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-12)) * (8*1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert TeraBit to DeciBit
    /// </summary>
    /// <param name="val">quantity measured in TeraBit</param>
    /// <returns>quantity measured in DeciBit</returns>
    public static Quantity<double, DeciBit> ToDeciBit<T>(this BaseQuantity<T, TeraBit> val) where T:IConvertible {
        return new Quantity<double, DeciBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-12)) * (8*1E1))
        );
    }
	/// <summary>
    /// Extension method to convert TeraBit to CentiBit
    /// </summary>
    /// <param name="val">quantity measured in TeraBit</param>
    /// <returns>quantity measured in CentiBit</returns>
    public static Quantity<double, CentiBit> ToCentiBit<T>(this BaseQuantity<T, TeraBit> val) where T:IConvertible {
        return new Quantity<double, CentiBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-12)) * (8*1E2))
        );
    }
	/// <summary>
    /// Extension method to convert TeraBit to MilliBit
    /// </summary>
    /// <param name="val">quantity measured in TeraBit</param>
    /// <returns>quantity measured in MilliBit</returns>
    public static Quantity<double, MilliBit> ToMilliBit<T>(this BaseQuantity<T, TeraBit> val) where T:IConvertible {
        return new Quantity<double, MilliBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-12)) * (8*1E3))
        );
    }
	/// <summary>
    /// Extension method to convert TeraBit to MicroBit
    /// </summary>
    /// <param name="val">quantity measured in TeraBit</param>
    /// <returns>quantity measured in MicroBit</returns>
    public static Quantity<double, MicroBit> ToMicroBit<T>(this BaseQuantity<T, TeraBit> val) where T:IConvertible {
        return new Quantity<double, MicroBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-12)) * (8*1E6))
        );
    }
	/// <summary>
    /// Extension method to convert TeraBit to NanoBit
    /// </summary>
    /// <param name="val">quantity measured in TeraBit</param>
    /// <returns>quantity measured in NanoBit</returns>
    public static Quantity<double, NanoBit> ToNanoBit<T>(this BaseQuantity<T, TeraBit> val) where T:IConvertible {
        return new Quantity<double, NanoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-12)) * (8*1E9))
        );
    }
	/// <summary>
    /// Extension method to convert TeraBit to PicoBit
    /// </summary>
    /// <param name="val">quantity measured in TeraBit</param>
    /// <returns>quantity measured in PicoBit</returns>
    public static Quantity<double, PicoBit> ToPicoBit<T>(this BaseQuantity<T, TeraBit> val) where T:IConvertible {
        return new Quantity<double, PicoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-12)) * (8*1E12))
        );
    }
	/// <summary>
    /// Extension method to convert TeraBit to FemtoBit
    /// </summary>
    /// <param name="val">quantity measured in TeraBit</param>
    /// <returns>quantity measured in FemtoBit</returns>
    public static Quantity<double, FemtoBit> ToFemtoBit<T>(this BaseQuantity<T, TeraBit> val) where T:IConvertible {
        return new Quantity<double, FemtoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-12)) * (8*1E15))
        );
    }
	/// <summary>
    /// Extension method to convert TeraBit to AttoBit
    /// </summary>
    /// <param name="val">quantity measured in TeraBit</param>
    /// <returns>quantity measured in AttoBit</returns>
    public static Quantity<double, AttoBit> ToAttoBit<T>(this BaseQuantity<T, TeraBit> val) where T:IConvertible {
        return new Quantity<double, AttoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-12)) * (8*1E18))
        );
    }
	/// <summary>
    /// Extension method to convert TeraBit to ZeptoBit
    /// </summary>
    /// <param name="val">quantity measured in TeraBit</param>
    /// <returns>quantity measured in ZeptoBit</returns>
    public static Quantity<double, ZeptoBit> ToZeptoBit<T>(this BaseQuantity<T, TeraBit> val) where T:IConvertible {
        return new Quantity<double, ZeptoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-12)) * (8*1E21))
        );
    }
	/// <summary>
    /// Extension method to convert TeraBit to YoctoBit
    /// </summary>
    /// <param name="val">quantity measured in TeraBit</param>
    /// <returns>quantity measured in YoctoBit</returns>
    public static Quantity<double, YoctoBit> ToYoctoBit<T>(this BaseQuantity<T, TeraBit> val) where T:IConvertible {
        return new Quantity<double, YoctoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-12)) * (8*1E24))
        );
    }
	/// <summary>
    /// Extension method to convert TeraBit to YottaByte
    /// </summary>
    /// <param name="val">quantity measured in TeraBit</param>
    /// <returns>quantity measured in YottaByte</returns>
    public static Quantity<double, YottaByte> ToYottaByte<T>(this BaseQuantity<T, TeraBit> val) where T:IConvertible {
        return new Quantity<double, YottaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-12)) * (1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert TeraBit to ZettaByte
    /// </summary>
    /// <param name="val">quantity measured in TeraBit</param>
    /// <returns>quantity measured in ZettaByte</returns>
    public static Quantity<double, ZettaByte> ToZettaByte<T>(this BaseQuantity<T, TeraBit> val) where T:IConvertible {
        return new Quantity<double, ZettaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-12)) * (1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert TeraBit to ExaByte
    /// </summary>
    /// <param name="val">quantity measured in TeraBit</param>
    /// <returns>quantity measured in ExaByte</returns>
    public static Quantity<double, ExaByte> ToExaByte<T>(this BaseQuantity<T, TeraBit> val) where T:IConvertible {
        return new Quantity<double, ExaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-12)) * (1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert TeraBit to PetaByte
    /// </summary>
    /// <param name="val">quantity measured in TeraBit</param>
    /// <returns>quantity measured in PetaByte</returns>
    public static Quantity<double, PetaByte> ToPetaByte<T>(this BaseQuantity<T, TeraBit> val) where T:IConvertible {
        return new Quantity<double, PetaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-12)) * (1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert TeraBit to TeraByte
    /// </summary>
    /// <param name="val">quantity measured in TeraBit</param>
    /// <returns>quantity measured in TeraByte</returns>
    public static Quantity<double, TeraByte> ToTeraByte<T>(this BaseQuantity<T, TeraBit> val) where T:IConvertible {
        return new Quantity<double, TeraByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-12)) * (1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert TeraBit to GigaByte
    /// </summary>
    /// <param name="val">quantity measured in TeraBit</param>
    /// <returns>quantity measured in GigaByte</returns>
    public static Quantity<double, GigaByte> ToGigaByte<T>(this BaseQuantity<T, TeraBit> val) where T:IConvertible {
        return new Quantity<double, GigaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-12)) * (1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert TeraBit to MegaByte
    /// </summary>
    /// <param name="val">quantity measured in TeraBit</param>
    /// <returns>quantity measured in MegaByte</returns>
    public static Quantity<double, MegaByte> ToMegaByte<T>(this BaseQuantity<T, TeraBit> val) where T:IConvertible {
        return new Quantity<double, MegaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-12)) * (1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert TeraBit to KiloByte
    /// </summary>
    /// <param name="val">quantity measured in TeraBit</param>
    /// <returns>quantity measured in KiloByte</returns>
    public static Quantity<double, KiloByte> ToKiloByte<T>(this BaseQuantity<T, TeraBit> val) where T:IConvertible {
        return new Quantity<double, KiloByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-12)) * (1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert TeraBit to HectoByte
    /// </summary>
    /// <param name="val">quantity measured in TeraBit</param>
    /// <returns>quantity measured in HectoByte</returns>
    public static Quantity<double, HectoByte> ToHectoByte<T>(this BaseQuantity<T, TeraBit> val) where T:IConvertible {
        return new Quantity<double, HectoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-12)) * (1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert TeraBit to DekaByte
    /// </summary>
    /// <param name="val">quantity measured in TeraBit</param>
    /// <returns>quantity measured in DekaByte</returns>
    public static Quantity<double, DekaByte> ToDekaByte<T>(this BaseQuantity<T, TeraBit> val) where T:IConvertible {
        return new Quantity<double, DekaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-12)) * (1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert TeraBit to DeciByte
    /// </summary>
    /// <param name="val">quantity measured in TeraBit</param>
    /// <returns>quantity measured in DeciByte</returns>
    public static Quantity<double, DeciByte> ToDeciByte<T>(this BaseQuantity<T, TeraBit> val) where T:IConvertible {
        return new Quantity<double, DeciByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-12)) * (1E1))
        );
    }
	/// <summary>
    /// Extension method to convert TeraBit to CentiByte
    /// </summary>
    /// <param name="val">quantity measured in TeraBit</param>
    /// <returns>quantity measured in CentiByte</returns>
    public static Quantity<double, CentiByte> ToCentiByte<T>(this BaseQuantity<T, TeraBit> val) where T:IConvertible {
        return new Quantity<double, CentiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-12)) * (1E2))
        );
    }
	/// <summary>
    /// Extension method to convert TeraBit to MilliByte
    /// </summary>
    /// <param name="val">quantity measured in TeraBit</param>
    /// <returns>quantity measured in MilliByte</returns>
    public static Quantity<double, MilliByte> ToMilliByte<T>(this BaseQuantity<T, TeraBit> val) where T:IConvertible {
        return new Quantity<double, MilliByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-12)) * (1E3))
        );
    }
	/// <summary>
    /// Extension method to convert TeraBit to MicroByte
    /// </summary>
    /// <param name="val">quantity measured in TeraBit</param>
    /// <returns>quantity measured in MicroByte</returns>
    public static Quantity<double, MicroByte> ToMicroByte<T>(this BaseQuantity<T, TeraBit> val) where T:IConvertible {
        return new Quantity<double, MicroByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-12)) * (1E6))
        );
    }
	/// <summary>
    /// Extension method to convert TeraBit to NanoByte
    /// </summary>
    /// <param name="val">quantity measured in TeraBit</param>
    /// <returns>quantity measured in NanoByte</returns>
    public static Quantity<double, NanoByte> ToNanoByte<T>(this BaseQuantity<T, TeraBit> val) where T:IConvertible {
        return new Quantity<double, NanoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-12)) * (1E9))
        );
    }
	/// <summary>
    /// Extension method to convert TeraBit to PicoByte
    /// </summary>
    /// <param name="val">quantity measured in TeraBit</param>
    /// <returns>quantity measured in PicoByte</returns>
    public static Quantity<double, PicoByte> ToPicoByte<T>(this BaseQuantity<T, TeraBit> val) where T:IConvertible {
        return new Quantity<double, PicoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-12)) * (1E12))
        );
    }
	/// <summary>
    /// Extension method to convert TeraBit to FemtoByte
    /// </summary>
    /// <param name="val">quantity measured in TeraBit</param>
    /// <returns>quantity measured in FemtoByte</returns>
    public static Quantity<double, FemtoByte> ToFemtoByte<T>(this BaseQuantity<T, TeraBit> val) where T:IConvertible {
        return new Quantity<double, FemtoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-12)) * (1E15))
        );
    }
	/// <summary>
    /// Extension method to convert TeraBit to AttoByte
    /// </summary>
    /// <param name="val">quantity measured in TeraBit</param>
    /// <returns>quantity measured in AttoByte</returns>
    public static Quantity<double, AttoByte> ToAttoByte<T>(this BaseQuantity<T, TeraBit> val) where T:IConvertible {
        return new Quantity<double, AttoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-12)) * (1E18))
        );
    }
	/// <summary>
    /// Extension method to convert TeraBit to ZeptoByte
    /// </summary>
    /// <param name="val">quantity measured in TeraBit</param>
    /// <returns>quantity measured in ZeptoByte</returns>
    public static Quantity<double, ZeptoByte> ToZeptoByte<T>(this BaseQuantity<T, TeraBit> val) where T:IConvertible {
        return new Quantity<double, ZeptoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-12)) * (1E21))
        );
    }
	/// <summary>
    /// Extension method to convert TeraBit to YoctoByte
    /// </summary>
    /// <param name="val">quantity measured in TeraBit</param>
    /// <returns>quantity measured in YoctoByte</returns>
    public static Quantity<double, YoctoByte> ToYoctoByte<T>(this BaseQuantity<T, TeraBit> val) where T:IConvertible {
        return new Quantity<double, YoctoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-12)) * (1E24))
        );
    }
	/// <summary>
    /// Extension method to convert TeraBit to YobiByte
    /// </summary>
    /// <param name="val">quantity measured in TeraBit</param>
    /// <returns>quantity measured in YobiByte</returns>
    public static Quantity<double, YobiByte> ToYobiByte<T>(this BaseQuantity<T, TeraBit> val) where T:IConvertible {
        return new Quantity<double, YobiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-12)) * (1.2089258e-24))
        );
    }
	/// <summary>
    /// Extension method to convert TeraBit to ZebiByte
    /// </summary>
    /// <param name="val">quantity measured in TeraBit</param>
    /// <returns>quantity measured in ZebiByte</returns>
    public static Quantity<double, ZebiByte> ToZebiByte<T>(this BaseQuantity<T, TeraBit> val) where T:IConvertible {
        return new Quantity<double, ZebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-12)) * (1.1805916e-21))
        );
    }
	/// <summary>
    /// Extension method to convert TeraBit to ExbiByte
    /// </summary>
    /// <param name="val">quantity measured in TeraBit</param>
    /// <returns>quantity measured in ExbiByte</returns>
    public static Quantity<double, ExbiByte> ToExbiByte<T>(this BaseQuantity<T, TeraBit> val) where T:IConvertible {
        return new Quantity<double, ExbiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-12)) * (1.1529215e-18))
        );
    }
	/// <summary>
    /// Extension method to convert TeraBit to PebiByte
    /// </summary>
    /// <param name="val">quantity measured in TeraBit</param>
    /// <returns>quantity measured in PebiByte</returns>
    public static Quantity<double, PebiByte> ToPebiByte<T>(this BaseQuantity<T, TeraBit> val) where T:IConvertible {
        return new Quantity<double, PebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-12)) * (1.1258999e-15))
        );
    }
	/// <summary>
    /// Extension method to convert TeraBit to TebiByte
    /// </summary>
    /// <param name="val">quantity measured in TeraBit</param>
    /// <returns>quantity measured in TebiByte</returns>
    public static Quantity<double, TebiByte> ToTebiByte<T>(this BaseQuantity<T, TeraBit> val) where T:IConvertible {
        return new Quantity<double, TebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-12)) * (1.0995116e-12))
        );
    }
	/// <summary>
    /// Extension method to convert TeraBit to GibiByte
    /// </summary>
    /// <param name="val">quantity measured in TeraBit</param>
    /// <returns>quantity measured in GibiByte</returns>
    public static Quantity<double, GibiByte> ToGibiByte<T>(this BaseQuantity<T, TeraBit> val) where T:IConvertible {
        return new Quantity<double, GibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-12)) * (1d/1073741824))
        );
    }
	/// <summary>
    /// Extension method to convert TeraBit to MebiByte
    /// </summary>
    /// <param name="val">quantity measured in TeraBit</param>
    /// <returns>quantity measured in MebiByte</returns>
    public static Quantity<double, MebiByte> ToMebiByte<T>(this BaseQuantity<T, TeraBit> val) where T:IConvertible {
        return new Quantity<double, MebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-12)) * (1d/1048576))
        );
    }
	/// <summary>
    /// Extension method to convert TeraBit to KibiByte
    /// </summary>
    /// <param name="val">quantity measured in TeraBit</param>
    /// <returns>quantity measured in KibiByte</returns>
    public static Quantity<double, KibiByte> ToKibiByte<T>(this BaseQuantity<T, TeraBit> val) where T:IConvertible {
        return new Quantity<double, KibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-12)) * (1d/1024))
        );
    }
	/// <summary>
    /// Extension method to convert Byte to GigaBit
    /// </summary>
    /// <param name="val">quantity measured in Byte</param>
    /// <returns>quantity measured in GigaBit</returns>
    public static Quantity<double, GigaBit> ToGigaBit<T>(this BaseQuantity<T, Byte> val) where T:IConvertible {
        return new Quantity<double, GigaBit>(
            Convert.ToDouble(val.Value) * (8*1E-9)
        );
    }
	/// <summary>
    /// Extension method to convert GigaBit to Byte
    /// </summary>
    /// <param name="val">quantity measured in GigaBit</param>
    /// <returns>quantity measured in Byte</returns>
    public static Quantity<double, Byte> ToByte<T>(this BaseQuantity<T, GigaBit> val) where T:IConvertible {
        return new Quantity<double, Byte>(
            Convert.ToDouble(val.Value) * (1d/(8*1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert GigaBit to Bit
    /// </summary>
    /// <param name="val">quantity measured in GigaBit</param>
    /// <returns>quantity measured in Bit</returns>
    public static Quantity<double, Bit> ToBit<T>(this BaseQuantity<T, GigaBit> val) where T:IConvertible {
        return new Quantity<double, Bit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-9)) * (8))
        );
    }
	/// <summary>
    /// Extension method to convert GigaBit to YottaBit
    /// </summary>
    /// <param name="val">quantity measured in GigaBit</param>
    /// <returns>quantity measured in YottaBit</returns>
    public static Quantity<double, YottaBit> ToYottaBit<T>(this BaseQuantity<T, GigaBit> val) where T:IConvertible {
        return new Quantity<double, YottaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-9)) * (8*1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert GigaBit to ZettaBit
    /// </summary>
    /// <param name="val">quantity measured in GigaBit</param>
    /// <returns>quantity measured in ZettaBit</returns>
    public static Quantity<double, ZettaBit> ToZettaBit<T>(this BaseQuantity<T, GigaBit> val) where T:IConvertible {
        return new Quantity<double, ZettaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-9)) * (8*1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert GigaBit to ExaBit
    /// </summary>
    /// <param name="val">quantity measured in GigaBit</param>
    /// <returns>quantity measured in ExaBit</returns>
    public static Quantity<double, ExaBit> ToExaBit<T>(this BaseQuantity<T, GigaBit> val) where T:IConvertible {
        return new Quantity<double, ExaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-9)) * (8*1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert GigaBit to PetaBit
    /// </summary>
    /// <param name="val">quantity measured in GigaBit</param>
    /// <returns>quantity measured in PetaBit</returns>
    public static Quantity<double, PetaBit> ToPetaBit<T>(this BaseQuantity<T, GigaBit> val) where T:IConvertible {
        return new Quantity<double, PetaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-9)) * (8*1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert GigaBit to TeraBit
    /// </summary>
    /// <param name="val">quantity measured in GigaBit</param>
    /// <returns>quantity measured in TeraBit</returns>
    public static Quantity<double, TeraBit> ToTeraBit<T>(this BaseQuantity<T, GigaBit> val) where T:IConvertible {
        return new Quantity<double, TeraBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-9)) * (8*1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert GigaBit to MegaBit
    /// </summary>
    /// <param name="val">quantity measured in GigaBit</param>
    /// <returns>quantity measured in MegaBit</returns>
    public static Quantity<double, MegaBit> ToMegaBit<T>(this BaseQuantity<T, GigaBit> val) where T:IConvertible {
        return new Quantity<double, MegaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-9)) * (8*1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert GigaBit to KiloBit
    /// </summary>
    /// <param name="val">quantity measured in GigaBit</param>
    /// <returns>quantity measured in KiloBit</returns>
    public static Quantity<double, KiloBit> ToKiloBit<T>(this BaseQuantity<T, GigaBit> val) where T:IConvertible {
        return new Quantity<double, KiloBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-9)) * (8*1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert GigaBit to HectoBit
    /// </summary>
    /// <param name="val">quantity measured in GigaBit</param>
    /// <returns>quantity measured in HectoBit</returns>
    public static Quantity<double, HectoBit> ToHectoBit<T>(this BaseQuantity<T, GigaBit> val) where T:IConvertible {
        return new Quantity<double, HectoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-9)) * (8*1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert GigaBit to DekaBit
    /// </summary>
    /// <param name="val">quantity measured in GigaBit</param>
    /// <returns>quantity measured in DekaBit</returns>
    public static Quantity<double, DekaBit> ToDekaBit<T>(this BaseQuantity<T, GigaBit> val) where T:IConvertible {
        return new Quantity<double, DekaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-9)) * (8*1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert GigaBit to DeciBit
    /// </summary>
    /// <param name="val">quantity measured in GigaBit</param>
    /// <returns>quantity measured in DeciBit</returns>
    public static Quantity<double, DeciBit> ToDeciBit<T>(this BaseQuantity<T, GigaBit> val) where T:IConvertible {
        return new Quantity<double, DeciBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-9)) * (8*1E1))
        );
    }
	/// <summary>
    /// Extension method to convert GigaBit to CentiBit
    /// </summary>
    /// <param name="val">quantity measured in GigaBit</param>
    /// <returns>quantity measured in CentiBit</returns>
    public static Quantity<double, CentiBit> ToCentiBit<T>(this BaseQuantity<T, GigaBit> val) where T:IConvertible {
        return new Quantity<double, CentiBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-9)) * (8*1E2))
        );
    }
	/// <summary>
    /// Extension method to convert GigaBit to MilliBit
    /// </summary>
    /// <param name="val">quantity measured in GigaBit</param>
    /// <returns>quantity measured in MilliBit</returns>
    public static Quantity<double, MilliBit> ToMilliBit<T>(this BaseQuantity<T, GigaBit> val) where T:IConvertible {
        return new Quantity<double, MilliBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-9)) * (8*1E3))
        );
    }
	/// <summary>
    /// Extension method to convert GigaBit to MicroBit
    /// </summary>
    /// <param name="val">quantity measured in GigaBit</param>
    /// <returns>quantity measured in MicroBit</returns>
    public static Quantity<double, MicroBit> ToMicroBit<T>(this BaseQuantity<T, GigaBit> val) where T:IConvertible {
        return new Quantity<double, MicroBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-9)) * (8*1E6))
        );
    }
	/// <summary>
    /// Extension method to convert GigaBit to NanoBit
    /// </summary>
    /// <param name="val">quantity measured in GigaBit</param>
    /// <returns>quantity measured in NanoBit</returns>
    public static Quantity<double, NanoBit> ToNanoBit<T>(this BaseQuantity<T, GigaBit> val) where T:IConvertible {
        return new Quantity<double, NanoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-9)) * (8*1E9))
        );
    }
	/// <summary>
    /// Extension method to convert GigaBit to PicoBit
    /// </summary>
    /// <param name="val">quantity measured in GigaBit</param>
    /// <returns>quantity measured in PicoBit</returns>
    public static Quantity<double, PicoBit> ToPicoBit<T>(this BaseQuantity<T, GigaBit> val) where T:IConvertible {
        return new Quantity<double, PicoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-9)) * (8*1E12))
        );
    }
	/// <summary>
    /// Extension method to convert GigaBit to FemtoBit
    /// </summary>
    /// <param name="val">quantity measured in GigaBit</param>
    /// <returns>quantity measured in FemtoBit</returns>
    public static Quantity<double, FemtoBit> ToFemtoBit<T>(this BaseQuantity<T, GigaBit> val) where T:IConvertible {
        return new Quantity<double, FemtoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-9)) * (8*1E15))
        );
    }
	/// <summary>
    /// Extension method to convert GigaBit to AttoBit
    /// </summary>
    /// <param name="val">quantity measured in GigaBit</param>
    /// <returns>quantity measured in AttoBit</returns>
    public static Quantity<double, AttoBit> ToAttoBit<T>(this BaseQuantity<T, GigaBit> val) where T:IConvertible {
        return new Quantity<double, AttoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-9)) * (8*1E18))
        );
    }
	/// <summary>
    /// Extension method to convert GigaBit to ZeptoBit
    /// </summary>
    /// <param name="val">quantity measured in GigaBit</param>
    /// <returns>quantity measured in ZeptoBit</returns>
    public static Quantity<double, ZeptoBit> ToZeptoBit<T>(this BaseQuantity<T, GigaBit> val) where T:IConvertible {
        return new Quantity<double, ZeptoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-9)) * (8*1E21))
        );
    }
	/// <summary>
    /// Extension method to convert GigaBit to YoctoBit
    /// </summary>
    /// <param name="val">quantity measured in GigaBit</param>
    /// <returns>quantity measured in YoctoBit</returns>
    public static Quantity<double, YoctoBit> ToYoctoBit<T>(this BaseQuantity<T, GigaBit> val) where T:IConvertible {
        return new Quantity<double, YoctoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-9)) * (8*1E24))
        );
    }
	/// <summary>
    /// Extension method to convert GigaBit to YottaByte
    /// </summary>
    /// <param name="val">quantity measured in GigaBit</param>
    /// <returns>quantity measured in YottaByte</returns>
    public static Quantity<double, YottaByte> ToYottaByte<T>(this BaseQuantity<T, GigaBit> val) where T:IConvertible {
        return new Quantity<double, YottaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-9)) * (1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert GigaBit to ZettaByte
    /// </summary>
    /// <param name="val">quantity measured in GigaBit</param>
    /// <returns>quantity measured in ZettaByte</returns>
    public static Quantity<double, ZettaByte> ToZettaByte<T>(this BaseQuantity<T, GigaBit> val) where T:IConvertible {
        return new Quantity<double, ZettaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-9)) * (1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert GigaBit to ExaByte
    /// </summary>
    /// <param name="val">quantity measured in GigaBit</param>
    /// <returns>quantity measured in ExaByte</returns>
    public static Quantity<double, ExaByte> ToExaByte<T>(this BaseQuantity<T, GigaBit> val) where T:IConvertible {
        return new Quantity<double, ExaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-9)) * (1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert GigaBit to PetaByte
    /// </summary>
    /// <param name="val">quantity measured in GigaBit</param>
    /// <returns>quantity measured in PetaByte</returns>
    public static Quantity<double, PetaByte> ToPetaByte<T>(this BaseQuantity<T, GigaBit> val) where T:IConvertible {
        return new Quantity<double, PetaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-9)) * (1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert GigaBit to TeraByte
    /// </summary>
    /// <param name="val">quantity measured in GigaBit</param>
    /// <returns>quantity measured in TeraByte</returns>
    public static Quantity<double, TeraByte> ToTeraByte<T>(this BaseQuantity<T, GigaBit> val) where T:IConvertible {
        return new Quantity<double, TeraByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-9)) * (1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert GigaBit to GigaByte
    /// </summary>
    /// <param name="val">quantity measured in GigaBit</param>
    /// <returns>quantity measured in GigaByte</returns>
    public static Quantity<double, GigaByte> ToGigaByte<T>(this BaseQuantity<T, GigaBit> val) where T:IConvertible {
        return new Quantity<double, GigaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-9)) * (1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert GigaBit to MegaByte
    /// </summary>
    /// <param name="val">quantity measured in GigaBit</param>
    /// <returns>quantity measured in MegaByte</returns>
    public static Quantity<double, MegaByte> ToMegaByte<T>(this BaseQuantity<T, GigaBit> val) where T:IConvertible {
        return new Quantity<double, MegaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-9)) * (1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert GigaBit to KiloByte
    /// </summary>
    /// <param name="val">quantity measured in GigaBit</param>
    /// <returns>quantity measured in KiloByte</returns>
    public static Quantity<double, KiloByte> ToKiloByte<T>(this BaseQuantity<T, GigaBit> val) where T:IConvertible {
        return new Quantity<double, KiloByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-9)) * (1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert GigaBit to HectoByte
    /// </summary>
    /// <param name="val">quantity measured in GigaBit</param>
    /// <returns>quantity measured in HectoByte</returns>
    public static Quantity<double, HectoByte> ToHectoByte<T>(this BaseQuantity<T, GigaBit> val) where T:IConvertible {
        return new Quantity<double, HectoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-9)) * (1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert GigaBit to DekaByte
    /// </summary>
    /// <param name="val">quantity measured in GigaBit</param>
    /// <returns>quantity measured in DekaByte</returns>
    public static Quantity<double, DekaByte> ToDekaByte<T>(this BaseQuantity<T, GigaBit> val) where T:IConvertible {
        return new Quantity<double, DekaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-9)) * (1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert GigaBit to DeciByte
    /// </summary>
    /// <param name="val">quantity measured in GigaBit</param>
    /// <returns>quantity measured in DeciByte</returns>
    public static Quantity<double, DeciByte> ToDeciByte<T>(this BaseQuantity<T, GigaBit> val) where T:IConvertible {
        return new Quantity<double, DeciByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-9)) * (1E1))
        );
    }
	/// <summary>
    /// Extension method to convert GigaBit to CentiByte
    /// </summary>
    /// <param name="val">quantity measured in GigaBit</param>
    /// <returns>quantity measured in CentiByte</returns>
    public static Quantity<double, CentiByte> ToCentiByte<T>(this BaseQuantity<T, GigaBit> val) where T:IConvertible {
        return new Quantity<double, CentiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-9)) * (1E2))
        );
    }
	/// <summary>
    /// Extension method to convert GigaBit to MilliByte
    /// </summary>
    /// <param name="val">quantity measured in GigaBit</param>
    /// <returns>quantity measured in MilliByte</returns>
    public static Quantity<double, MilliByte> ToMilliByte<T>(this BaseQuantity<T, GigaBit> val) where T:IConvertible {
        return new Quantity<double, MilliByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-9)) * (1E3))
        );
    }
	/// <summary>
    /// Extension method to convert GigaBit to MicroByte
    /// </summary>
    /// <param name="val">quantity measured in GigaBit</param>
    /// <returns>quantity measured in MicroByte</returns>
    public static Quantity<double, MicroByte> ToMicroByte<T>(this BaseQuantity<T, GigaBit> val) where T:IConvertible {
        return new Quantity<double, MicroByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-9)) * (1E6))
        );
    }
	/// <summary>
    /// Extension method to convert GigaBit to NanoByte
    /// </summary>
    /// <param name="val">quantity measured in GigaBit</param>
    /// <returns>quantity measured in NanoByte</returns>
    public static Quantity<double, NanoByte> ToNanoByte<T>(this BaseQuantity<T, GigaBit> val) where T:IConvertible {
        return new Quantity<double, NanoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-9)) * (1E9))
        );
    }
	/// <summary>
    /// Extension method to convert GigaBit to PicoByte
    /// </summary>
    /// <param name="val">quantity measured in GigaBit</param>
    /// <returns>quantity measured in PicoByte</returns>
    public static Quantity<double, PicoByte> ToPicoByte<T>(this BaseQuantity<T, GigaBit> val) where T:IConvertible {
        return new Quantity<double, PicoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-9)) * (1E12))
        );
    }
	/// <summary>
    /// Extension method to convert GigaBit to FemtoByte
    /// </summary>
    /// <param name="val">quantity measured in GigaBit</param>
    /// <returns>quantity measured in FemtoByte</returns>
    public static Quantity<double, FemtoByte> ToFemtoByte<T>(this BaseQuantity<T, GigaBit> val) where T:IConvertible {
        return new Quantity<double, FemtoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-9)) * (1E15))
        );
    }
	/// <summary>
    /// Extension method to convert GigaBit to AttoByte
    /// </summary>
    /// <param name="val">quantity measured in GigaBit</param>
    /// <returns>quantity measured in AttoByte</returns>
    public static Quantity<double, AttoByte> ToAttoByte<T>(this BaseQuantity<T, GigaBit> val) where T:IConvertible {
        return new Quantity<double, AttoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-9)) * (1E18))
        );
    }
	/// <summary>
    /// Extension method to convert GigaBit to ZeptoByte
    /// </summary>
    /// <param name="val">quantity measured in GigaBit</param>
    /// <returns>quantity measured in ZeptoByte</returns>
    public static Quantity<double, ZeptoByte> ToZeptoByte<T>(this BaseQuantity<T, GigaBit> val) where T:IConvertible {
        return new Quantity<double, ZeptoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-9)) * (1E21))
        );
    }
	/// <summary>
    /// Extension method to convert GigaBit to YoctoByte
    /// </summary>
    /// <param name="val">quantity measured in GigaBit</param>
    /// <returns>quantity measured in YoctoByte</returns>
    public static Quantity<double, YoctoByte> ToYoctoByte<T>(this BaseQuantity<T, GigaBit> val) where T:IConvertible {
        return new Quantity<double, YoctoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-9)) * (1E24))
        );
    }
	/// <summary>
    /// Extension method to convert GigaBit to YobiByte
    /// </summary>
    /// <param name="val">quantity measured in GigaBit</param>
    /// <returns>quantity measured in YobiByte</returns>
    public static Quantity<double, YobiByte> ToYobiByte<T>(this BaseQuantity<T, GigaBit> val) where T:IConvertible {
        return new Quantity<double, YobiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-9)) * (1.2089258e-24))
        );
    }
	/// <summary>
    /// Extension method to convert GigaBit to ZebiByte
    /// </summary>
    /// <param name="val">quantity measured in GigaBit</param>
    /// <returns>quantity measured in ZebiByte</returns>
    public static Quantity<double, ZebiByte> ToZebiByte<T>(this BaseQuantity<T, GigaBit> val) where T:IConvertible {
        return new Quantity<double, ZebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-9)) * (1.1805916e-21))
        );
    }
	/// <summary>
    /// Extension method to convert GigaBit to ExbiByte
    /// </summary>
    /// <param name="val">quantity measured in GigaBit</param>
    /// <returns>quantity measured in ExbiByte</returns>
    public static Quantity<double, ExbiByte> ToExbiByte<T>(this BaseQuantity<T, GigaBit> val) where T:IConvertible {
        return new Quantity<double, ExbiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-9)) * (1.1529215e-18))
        );
    }
	/// <summary>
    /// Extension method to convert GigaBit to PebiByte
    /// </summary>
    /// <param name="val">quantity measured in GigaBit</param>
    /// <returns>quantity measured in PebiByte</returns>
    public static Quantity<double, PebiByte> ToPebiByte<T>(this BaseQuantity<T, GigaBit> val) where T:IConvertible {
        return new Quantity<double, PebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-9)) * (1.1258999e-15))
        );
    }
	/// <summary>
    /// Extension method to convert GigaBit to TebiByte
    /// </summary>
    /// <param name="val">quantity measured in GigaBit</param>
    /// <returns>quantity measured in TebiByte</returns>
    public static Quantity<double, TebiByte> ToTebiByte<T>(this BaseQuantity<T, GigaBit> val) where T:IConvertible {
        return new Quantity<double, TebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-9)) * (1.0995116e-12))
        );
    }
	/// <summary>
    /// Extension method to convert GigaBit to GibiByte
    /// </summary>
    /// <param name="val">quantity measured in GigaBit</param>
    /// <returns>quantity measured in GibiByte</returns>
    public static Quantity<double, GibiByte> ToGibiByte<T>(this BaseQuantity<T, GigaBit> val) where T:IConvertible {
        return new Quantity<double, GibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-9)) * (1d/1073741824))
        );
    }
	/// <summary>
    /// Extension method to convert GigaBit to MebiByte
    /// </summary>
    /// <param name="val">quantity measured in GigaBit</param>
    /// <returns>quantity measured in MebiByte</returns>
    public static Quantity<double, MebiByte> ToMebiByte<T>(this BaseQuantity<T, GigaBit> val) where T:IConvertible {
        return new Quantity<double, MebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-9)) * (1d/1048576))
        );
    }
	/// <summary>
    /// Extension method to convert GigaBit to KibiByte
    /// </summary>
    /// <param name="val">quantity measured in GigaBit</param>
    /// <returns>quantity measured in KibiByte</returns>
    public static Quantity<double, KibiByte> ToKibiByte<T>(this BaseQuantity<T, GigaBit> val) where T:IConvertible {
        return new Quantity<double, KibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-9)) * (1d/1024))
        );
    }
	/// <summary>
    /// Extension method to convert Byte to MegaBit
    /// </summary>
    /// <param name="val">quantity measured in Byte</param>
    /// <returns>quantity measured in MegaBit</returns>
    public static Quantity<double, MegaBit> ToMegaBit<T>(this BaseQuantity<T, Byte> val) where T:IConvertible {
        return new Quantity<double, MegaBit>(
            Convert.ToDouble(val.Value) * (8*1E-6)
        );
    }
	/// <summary>
    /// Extension method to convert MegaBit to Byte
    /// </summary>
    /// <param name="val">quantity measured in MegaBit</param>
    /// <returns>quantity measured in Byte</returns>
    public static Quantity<double, Byte> ToByte<T>(this BaseQuantity<T, MegaBit> val) where T:IConvertible {
        return new Quantity<double, Byte>(
            Convert.ToDouble(val.Value) * (1d/(8*1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert MegaBit to Bit
    /// </summary>
    /// <param name="val">quantity measured in MegaBit</param>
    /// <returns>quantity measured in Bit</returns>
    public static Quantity<double, Bit> ToBit<T>(this BaseQuantity<T, MegaBit> val) where T:IConvertible {
        return new Quantity<double, Bit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-6)) * (8))
        );
    }
	/// <summary>
    /// Extension method to convert MegaBit to YottaBit
    /// </summary>
    /// <param name="val">quantity measured in MegaBit</param>
    /// <returns>quantity measured in YottaBit</returns>
    public static Quantity<double, YottaBit> ToYottaBit<T>(this BaseQuantity<T, MegaBit> val) where T:IConvertible {
        return new Quantity<double, YottaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-6)) * (8*1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert MegaBit to ZettaBit
    /// </summary>
    /// <param name="val">quantity measured in MegaBit</param>
    /// <returns>quantity measured in ZettaBit</returns>
    public static Quantity<double, ZettaBit> ToZettaBit<T>(this BaseQuantity<T, MegaBit> val) where T:IConvertible {
        return new Quantity<double, ZettaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-6)) * (8*1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert MegaBit to ExaBit
    /// </summary>
    /// <param name="val">quantity measured in MegaBit</param>
    /// <returns>quantity measured in ExaBit</returns>
    public static Quantity<double, ExaBit> ToExaBit<T>(this BaseQuantity<T, MegaBit> val) where T:IConvertible {
        return new Quantity<double, ExaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-6)) * (8*1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert MegaBit to PetaBit
    /// </summary>
    /// <param name="val">quantity measured in MegaBit</param>
    /// <returns>quantity measured in PetaBit</returns>
    public static Quantity<double, PetaBit> ToPetaBit<T>(this BaseQuantity<T, MegaBit> val) where T:IConvertible {
        return new Quantity<double, PetaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-6)) * (8*1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert MegaBit to TeraBit
    /// </summary>
    /// <param name="val">quantity measured in MegaBit</param>
    /// <returns>quantity measured in TeraBit</returns>
    public static Quantity<double, TeraBit> ToTeraBit<T>(this BaseQuantity<T, MegaBit> val) where T:IConvertible {
        return new Quantity<double, TeraBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-6)) * (8*1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert MegaBit to GigaBit
    /// </summary>
    /// <param name="val">quantity measured in MegaBit</param>
    /// <returns>quantity measured in GigaBit</returns>
    public static Quantity<double, GigaBit> ToGigaBit<T>(this BaseQuantity<T, MegaBit> val) where T:IConvertible {
        return new Quantity<double, GigaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-6)) * (8*1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert MegaBit to KiloBit
    /// </summary>
    /// <param name="val">quantity measured in MegaBit</param>
    /// <returns>quantity measured in KiloBit</returns>
    public static Quantity<double, KiloBit> ToKiloBit<T>(this BaseQuantity<T, MegaBit> val) where T:IConvertible {
        return new Quantity<double, KiloBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-6)) * (8*1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert MegaBit to HectoBit
    /// </summary>
    /// <param name="val">quantity measured in MegaBit</param>
    /// <returns>quantity measured in HectoBit</returns>
    public static Quantity<double, HectoBit> ToHectoBit<T>(this BaseQuantity<T, MegaBit> val) where T:IConvertible {
        return new Quantity<double, HectoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-6)) * (8*1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert MegaBit to DekaBit
    /// </summary>
    /// <param name="val">quantity measured in MegaBit</param>
    /// <returns>quantity measured in DekaBit</returns>
    public static Quantity<double, DekaBit> ToDekaBit<T>(this BaseQuantity<T, MegaBit> val) where T:IConvertible {
        return new Quantity<double, DekaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-6)) * (8*1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert MegaBit to DeciBit
    /// </summary>
    /// <param name="val">quantity measured in MegaBit</param>
    /// <returns>quantity measured in DeciBit</returns>
    public static Quantity<double, DeciBit> ToDeciBit<T>(this BaseQuantity<T, MegaBit> val) where T:IConvertible {
        return new Quantity<double, DeciBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-6)) * (8*1E1))
        );
    }
	/// <summary>
    /// Extension method to convert MegaBit to CentiBit
    /// </summary>
    /// <param name="val">quantity measured in MegaBit</param>
    /// <returns>quantity measured in CentiBit</returns>
    public static Quantity<double, CentiBit> ToCentiBit<T>(this BaseQuantity<T, MegaBit> val) where T:IConvertible {
        return new Quantity<double, CentiBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-6)) * (8*1E2))
        );
    }
	/// <summary>
    /// Extension method to convert MegaBit to MilliBit
    /// </summary>
    /// <param name="val">quantity measured in MegaBit</param>
    /// <returns>quantity measured in MilliBit</returns>
    public static Quantity<double, MilliBit> ToMilliBit<T>(this BaseQuantity<T, MegaBit> val) where T:IConvertible {
        return new Quantity<double, MilliBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-6)) * (8*1E3))
        );
    }
	/// <summary>
    /// Extension method to convert MegaBit to MicroBit
    /// </summary>
    /// <param name="val">quantity measured in MegaBit</param>
    /// <returns>quantity measured in MicroBit</returns>
    public static Quantity<double, MicroBit> ToMicroBit<T>(this BaseQuantity<T, MegaBit> val) where T:IConvertible {
        return new Quantity<double, MicroBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-6)) * (8*1E6))
        );
    }
	/// <summary>
    /// Extension method to convert MegaBit to NanoBit
    /// </summary>
    /// <param name="val">quantity measured in MegaBit</param>
    /// <returns>quantity measured in NanoBit</returns>
    public static Quantity<double, NanoBit> ToNanoBit<T>(this BaseQuantity<T, MegaBit> val) where T:IConvertible {
        return new Quantity<double, NanoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-6)) * (8*1E9))
        );
    }
	/// <summary>
    /// Extension method to convert MegaBit to PicoBit
    /// </summary>
    /// <param name="val">quantity measured in MegaBit</param>
    /// <returns>quantity measured in PicoBit</returns>
    public static Quantity<double, PicoBit> ToPicoBit<T>(this BaseQuantity<T, MegaBit> val) where T:IConvertible {
        return new Quantity<double, PicoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-6)) * (8*1E12))
        );
    }
	/// <summary>
    /// Extension method to convert MegaBit to FemtoBit
    /// </summary>
    /// <param name="val">quantity measured in MegaBit</param>
    /// <returns>quantity measured in FemtoBit</returns>
    public static Quantity<double, FemtoBit> ToFemtoBit<T>(this BaseQuantity<T, MegaBit> val) where T:IConvertible {
        return new Quantity<double, FemtoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-6)) * (8*1E15))
        );
    }
	/// <summary>
    /// Extension method to convert MegaBit to AttoBit
    /// </summary>
    /// <param name="val">quantity measured in MegaBit</param>
    /// <returns>quantity measured in AttoBit</returns>
    public static Quantity<double, AttoBit> ToAttoBit<T>(this BaseQuantity<T, MegaBit> val) where T:IConvertible {
        return new Quantity<double, AttoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-6)) * (8*1E18))
        );
    }
	/// <summary>
    /// Extension method to convert MegaBit to ZeptoBit
    /// </summary>
    /// <param name="val">quantity measured in MegaBit</param>
    /// <returns>quantity measured in ZeptoBit</returns>
    public static Quantity<double, ZeptoBit> ToZeptoBit<T>(this BaseQuantity<T, MegaBit> val) where T:IConvertible {
        return new Quantity<double, ZeptoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-6)) * (8*1E21))
        );
    }
	/// <summary>
    /// Extension method to convert MegaBit to YoctoBit
    /// </summary>
    /// <param name="val">quantity measured in MegaBit</param>
    /// <returns>quantity measured in YoctoBit</returns>
    public static Quantity<double, YoctoBit> ToYoctoBit<T>(this BaseQuantity<T, MegaBit> val) where T:IConvertible {
        return new Quantity<double, YoctoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-6)) * (8*1E24))
        );
    }
	/// <summary>
    /// Extension method to convert MegaBit to YottaByte
    /// </summary>
    /// <param name="val">quantity measured in MegaBit</param>
    /// <returns>quantity measured in YottaByte</returns>
    public static Quantity<double, YottaByte> ToYottaByte<T>(this BaseQuantity<T, MegaBit> val) where T:IConvertible {
        return new Quantity<double, YottaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-6)) * (1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert MegaBit to ZettaByte
    /// </summary>
    /// <param name="val">quantity measured in MegaBit</param>
    /// <returns>quantity measured in ZettaByte</returns>
    public static Quantity<double, ZettaByte> ToZettaByte<T>(this BaseQuantity<T, MegaBit> val) where T:IConvertible {
        return new Quantity<double, ZettaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-6)) * (1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert MegaBit to ExaByte
    /// </summary>
    /// <param name="val">quantity measured in MegaBit</param>
    /// <returns>quantity measured in ExaByte</returns>
    public static Quantity<double, ExaByte> ToExaByte<T>(this BaseQuantity<T, MegaBit> val) where T:IConvertible {
        return new Quantity<double, ExaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-6)) * (1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert MegaBit to PetaByte
    /// </summary>
    /// <param name="val">quantity measured in MegaBit</param>
    /// <returns>quantity measured in PetaByte</returns>
    public static Quantity<double, PetaByte> ToPetaByte<T>(this BaseQuantity<T, MegaBit> val) where T:IConvertible {
        return new Quantity<double, PetaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-6)) * (1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert MegaBit to TeraByte
    /// </summary>
    /// <param name="val">quantity measured in MegaBit</param>
    /// <returns>quantity measured in TeraByte</returns>
    public static Quantity<double, TeraByte> ToTeraByte<T>(this BaseQuantity<T, MegaBit> val) where T:IConvertible {
        return new Quantity<double, TeraByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-6)) * (1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert MegaBit to GigaByte
    /// </summary>
    /// <param name="val">quantity measured in MegaBit</param>
    /// <returns>quantity measured in GigaByte</returns>
    public static Quantity<double, GigaByte> ToGigaByte<T>(this BaseQuantity<T, MegaBit> val) where T:IConvertible {
        return new Quantity<double, GigaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-6)) * (1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert MegaBit to MegaByte
    /// </summary>
    /// <param name="val">quantity measured in MegaBit</param>
    /// <returns>quantity measured in MegaByte</returns>
    public static Quantity<double, MegaByte> ToMegaByte<T>(this BaseQuantity<T, MegaBit> val) where T:IConvertible {
        return new Quantity<double, MegaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-6)) * (1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert MegaBit to KiloByte
    /// </summary>
    /// <param name="val">quantity measured in MegaBit</param>
    /// <returns>quantity measured in KiloByte</returns>
    public static Quantity<double, KiloByte> ToKiloByte<T>(this BaseQuantity<T, MegaBit> val) where T:IConvertible {
        return new Quantity<double, KiloByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-6)) * (1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert MegaBit to HectoByte
    /// </summary>
    /// <param name="val">quantity measured in MegaBit</param>
    /// <returns>quantity measured in HectoByte</returns>
    public static Quantity<double, HectoByte> ToHectoByte<T>(this BaseQuantity<T, MegaBit> val) where T:IConvertible {
        return new Quantity<double, HectoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-6)) * (1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert MegaBit to DekaByte
    /// </summary>
    /// <param name="val">quantity measured in MegaBit</param>
    /// <returns>quantity measured in DekaByte</returns>
    public static Quantity<double, DekaByte> ToDekaByte<T>(this BaseQuantity<T, MegaBit> val) where T:IConvertible {
        return new Quantity<double, DekaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-6)) * (1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert MegaBit to DeciByte
    /// </summary>
    /// <param name="val">quantity measured in MegaBit</param>
    /// <returns>quantity measured in DeciByte</returns>
    public static Quantity<double, DeciByte> ToDeciByte<T>(this BaseQuantity<T, MegaBit> val) where T:IConvertible {
        return new Quantity<double, DeciByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-6)) * (1E1))
        );
    }
	/// <summary>
    /// Extension method to convert MegaBit to CentiByte
    /// </summary>
    /// <param name="val">quantity measured in MegaBit</param>
    /// <returns>quantity measured in CentiByte</returns>
    public static Quantity<double, CentiByte> ToCentiByte<T>(this BaseQuantity<T, MegaBit> val) where T:IConvertible {
        return new Quantity<double, CentiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-6)) * (1E2))
        );
    }
	/// <summary>
    /// Extension method to convert MegaBit to MilliByte
    /// </summary>
    /// <param name="val">quantity measured in MegaBit</param>
    /// <returns>quantity measured in MilliByte</returns>
    public static Quantity<double, MilliByte> ToMilliByte<T>(this BaseQuantity<T, MegaBit> val) where T:IConvertible {
        return new Quantity<double, MilliByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-6)) * (1E3))
        );
    }
	/// <summary>
    /// Extension method to convert MegaBit to MicroByte
    /// </summary>
    /// <param name="val">quantity measured in MegaBit</param>
    /// <returns>quantity measured in MicroByte</returns>
    public static Quantity<double, MicroByte> ToMicroByte<T>(this BaseQuantity<T, MegaBit> val) where T:IConvertible {
        return new Quantity<double, MicroByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-6)) * (1E6))
        );
    }
	/// <summary>
    /// Extension method to convert MegaBit to NanoByte
    /// </summary>
    /// <param name="val">quantity measured in MegaBit</param>
    /// <returns>quantity measured in NanoByte</returns>
    public static Quantity<double, NanoByte> ToNanoByte<T>(this BaseQuantity<T, MegaBit> val) where T:IConvertible {
        return new Quantity<double, NanoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-6)) * (1E9))
        );
    }
	/// <summary>
    /// Extension method to convert MegaBit to PicoByte
    /// </summary>
    /// <param name="val">quantity measured in MegaBit</param>
    /// <returns>quantity measured in PicoByte</returns>
    public static Quantity<double, PicoByte> ToPicoByte<T>(this BaseQuantity<T, MegaBit> val) where T:IConvertible {
        return new Quantity<double, PicoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-6)) * (1E12))
        );
    }
	/// <summary>
    /// Extension method to convert MegaBit to FemtoByte
    /// </summary>
    /// <param name="val">quantity measured in MegaBit</param>
    /// <returns>quantity measured in FemtoByte</returns>
    public static Quantity<double, FemtoByte> ToFemtoByte<T>(this BaseQuantity<T, MegaBit> val) where T:IConvertible {
        return new Quantity<double, FemtoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-6)) * (1E15))
        );
    }
	/// <summary>
    /// Extension method to convert MegaBit to AttoByte
    /// </summary>
    /// <param name="val">quantity measured in MegaBit</param>
    /// <returns>quantity measured in AttoByte</returns>
    public static Quantity<double, AttoByte> ToAttoByte<T>(this BaseQuantity<T, MegaBit> val) where T:IConvertible {
        return new Quantity<double, AttoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-6)) * (1E18))
        );
    }
	/// <summary>
    /// Extension method to convert MegaBit to ZeptoByte
    /// </summary>
    /// <param name="val">quantity measured in MegaBit</param>
    /// <returns>quantity measured in ZeptoByte</returns>
    public static Quantity<double, ZeptoByte> ToZeptoByte<T>(this BaseQuantity<T, MegaBit> val) where T:IConvertible {
        return new Quantity<double, ZeptoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-6)) * (1E21))
        );
    }
	/// <summary>
    /// Extension method to convert MegaBit to YoctoByte
    /// </summary>
    /// <param name="val">quantity measured in MegaBit</param>
    /// <returns>quantity measured in YoctoByte</returns>
    public static Quantity<double, YoctoByte> ToYoctoByte<T>(this BaseQuantity<T, MegaBit> val) where T:IConvertible {
        return new Quantity<double, YoctoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-6)) * (1E24))
        );
    }
	/// <summary>
    /// Extension method to convert MegaBit to YobiByte
    /// </summary>
    /// <param name="val">quantity measured in MegaBit</param>
    /// <returns>quantity measured in YobiByte</returns>
    public static Quantity<double, YobiByte> ToYobiByte<T>(this BaseQuantity<T, MegaBit> val) where T:IConvertible {
        return new Quantity<double, YobiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-6)) * (1.2089258e-24))
        );
    }
	/// <summary>
    /// Extension method to convert MegaBit to ZebiByte
    /// </summary>
    /// <param name="val">quantity measured in MegaBit</param>
    /// <returns>quantity measured in ZebiByte</returns>
    public static Quantity<double, ZebiByte> ToZebiByte<T>(this BaseQuantity<T, MegaBit> val) where T:IConvertible {
        return new Quantity<double, ZebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-6)) * (1.1805916e-21))
        );
    }
	/// <summary>
    /// Extension method to convert MegaBit to ExbiByte
    /// </summary>
    /// <param name="val">quantity measured in MegaBit</param>
    /// <returns>quantity measured in ExbiByte</returns>
    public static Quantity<double, ExbiByte> ToExbiByte<T>(this BaseQuantity<T, MegaBit> val) where T:IConvertible {
        return new Quantity<double, ExbiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-6)) * (1.1529215e-18))
        );
    }
	/// <summary>
    /// Extension method to convert MegaBit to PebiByte
    /// </summary>
    /// <param name="val">quantity measured in MegaBit</param>
    /// <returns>quantity measured in PebiByte</returns>
    public static Quantity<double, PebiByte> ToPebiByte<T>(this BaseQuantity<T, MegaBit> val) where T:IConvertible {
        return new Quantity<double, PebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-6)) * (1.1258999e-15))
        );
    }
	/// <summary>
    /// Extension method to convert MegaBit to TebiByte
    /// </summary>
    /// <param name="val">quantity measured in MegaBit</param>
    /// <returns>quantity measured in TebiByte</returns>
    public static Quantity<double, TebiByte> ToTebiByte<T>(this BaseQuantity<T, MegaBit> val) where T:IConvertible {
        return new Quantity<double, TebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-6)) * (1.0995116e-12))
        );
    }
	/// <summary>
    /// Extension method to convert MegaBit to GibiByte
    /// </summary>
    /// <param name="val">quantity measured in MegaBit</param>
    /// <returns>quantity measured in GibiByte</returns>
    public static Quantity<double, GibiByte> ToGibiByte<T>(this BaseQuantity<T, MegaBit> val) where T:IConvertible {
        return new Quantity<double, GibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-6)) * (1d/1073741824))
        );
    }
	/// <summary>
    /// Extension method to convert MegaBit to MebiByte
    /// </summary>
    /// <param name="val">quantity measured in MegaBit</param>
    /// <returns>quantity measured in MebiByte</returns>
    public static Quantity<double, MebiByte> ToMebiByte<T>(this BaseQuantity<T, MegaBit> val) where T:IConvertible {
        return new Quantity<double, MebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-6)) * (1d/1048576))
        );
    }
	/// <summary>
    /// Extension method to convert MegaBit to KibiByte
    /// </summary>
    /// <param name="val">quantity measured in MegaBit</param>
    /// <returns>quantity measured in KibiByte</returns>
    public static Quantity<double, KibiByte> ToKibiByte<T>(this BaseQuantity<T, MegaBit> val) where T:IConvertible {
        return new Quantity<double, KibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-6)) * (1d/1024))
        );
    }
	/// <summary>
    /// Extension method to convert Byte to KiloBit
    /// </summary>
    /// <param name="val">quantity measured in Byte</param>
    /// <returns>quantity measured in KiloBit</returns>
    public static Quantity<double, KiloBit> ToKiloBit<T>(this BaseQuantity<T, Byte> val) where T:IConvertible {
        return new Quantity<double, KiloBit>(
            Convert.ToDouble(val.Value) * (8*1E-3)
        );
    }
	/// <summary>
    /// Extension method to convert KiloBit to Byte
    /// </summary>
    /// <param name="val">quantity measured in KiloBit</param>
    /// <returns>quantity measured in Byte</returns>
    public static Quantity<double, Byte> ToByte<T>(this BaseQuantity<T, KiloBit> val) where T:IConvertible {
        return new Quantity<double, Byte>(
            Convert.ToDouble(val.Value) * (1d/(8*1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert KiloBit to Bit
    /// </summary>
    /// <param name="val">quantity measured in KiloBit</param>
    /// <returns>quantity measured in Bit</returns>
    public static Quantity<double, Bit> ToBit<T>(this BaseQuantity<T, KiloBit> val) where T:IConvertible {
        return new Quantity<double, Bit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-3)) * (8))
        );
    }
	/// <summary>
    /// Extension method to convert KiloBit to YottaBit
    /// </summary>
    /// <param name="val">quantity measured in KiloBit</param>
    /// <returns>quantity measured in YottaBit</returns>
    public static Quantity<double, YottaBit> ToYottaBit<T>(this BaseQuantity<T, KiloBit> val) where T:IConvertible {
        return new Quantity<double, YottaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-3)) * (8*1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert KiloBit to ZettaBit
    /// </summary>
    /// <param name="val">quantity measured in KiloBit</param>
    /// <returns>quantity measured in ZettaBit</returns>
    public static Quantity<double, ZettaBit> ToZettaBit<T>(this BaseQuantity<T, KiloBit> val) where T:IConvertible {
        return new Quantity<double, ZettaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-3)) * (8*1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert KiloBit to ExaBit
    /// </summary>
    /// <param name="val">quantity measured in KiloBit</param>
    /// <returns>quantity measured in ExaBit</returns>
    public static Quantity<double, ExaBit> ToExaBit<T>(this BaseQuantity<T, KiloBit> val) where T:IConvertible {
        return new Quantity<double, ExaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-3)) * (8*1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert KiloBit to PetaBit
    /// </summary>
    /// <param name="val">quantity measured in KiloBit</param>
    /// <returns>quantity measured in PetaBit</returns>
    public static Quantity<double, PetaBit> ToPetaBit<T>(this BaseQuantity<T, KiloBit> val) where T:IConvertible {
        return new Quantity<double, PetaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-3)) * (8*1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert KiloBit to TeraBit
    /// </summary>
    /// <param name="val">quantity measured in KiloBit</param>
    /// <returns>quantity measured in TeraBit</returns>
    public static Quantity<double, TeraBit> ToTeraBit<T>(this BaseQuantity<T, KiloBit> val) where T:IConvertible {
        return new Quantity<double, TeraBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-3)) * (8*1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert KiloBit to GigaBit
    /// </summary>
    /// <param name="val">quantity measured in KiloBit</param>
    /// <returns>quantity measured in GigaBit</returns>
    public static Quantity<double, GigaBit> ToGigaBit<T>(this BaseQuantity<T, KiloBit> val) where T:IConvertible {
        return new Quantity<double, GigaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-3)) * (8*1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert KiloBit to MegaBit
    /// </summary>
    /// <param name="val">quantity measured in KiloBit</param>
    /// <returns>quantity measured in MegaBit</returns>
    public static Quantity<double, MegaBit> ToMegaBit<T>(this BaseQuantity<T, KiloBit> val) where T:IConvertible {
        return new Quantity<double, MegaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-3)) * (8*1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert KiloBit to HectoBit
    /// </summary>
    /// <param name="val">quantity measured in KiloBit</param>
    /// <returns>quantity measured in HectoBit</returns>
    public static Quantity<double, HectoBit> ToHectoBit<T>(this BaseQuantity<T, KiloBit> val) where T:IConvertible {
        return new Quantity<double, HectoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-3)) * (8*1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert KiloBit to DekaBit
    /// </summary>
    /// <param name="val">quantity measured in KiloBit</param>
    /// <returns>quantity measured in DekaBit</returns>
    public static Quantity<double, DekaBit> ToDekaBit<T>(this BaseQuantity<T, KiloBit> val) where T:IConvertible {
        return new Quantity<double, DekaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-3)) * (8*1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert KiloBit to DeciBit
    /// </summary>
    /// <param name="val">quantity measured in KiloBit</param>
    /// <returns>quantity measured in DeciBit</returns>
    public static Quantity<double, DeciBit> ToDeciBit<T>(this BaseQuantity<T, KiloBit> val) where T:IConvertible {
        return new Quantity<double, DeciBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-3)) * (8*1E1))
        );
    }
	/// <summary>
    /// Extension method to convert KiloBit to CentiBit
    /// </summary>
    /// <param name="val">quantity measured in KiloBit</param>
    /// <returns>quantity measured in CentiBit</returns>
    public static Quantity<double, CentiBit> ToCentiBit<T>(this BaseQuantity<T, KiloBit> val) where T:IConvertible {
        return new Quantity<double, CentiBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-3)) * (8*1E2))
        );
    }
	/// <summary>
    /// Extension method to convert KiloBit to MilliBit
    /// </summary>
    /// <param name="val">quantity measured in KiloBit</param>
    /// <returns>quantity measured in MilliBit</returns>
    public static Quantity<double, MilliBit> ToMilliBit<T>(this BaseQuantity<T, KiloBit> val) where T:IConvertible {
        return new Quantity<double, MilliBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-3)) * (8*1E3))
        );
    }
	/// <summary>
    /// Extension method to convert KiloBit to MicroBit
    /// </summary>
    /// <param name="val">quantity measured in KiloBit</param>
    /// <returns>quantity measured in MicroBit</returns>
    public static Quantity<double, MicroBit> ToMicroBit<T>(this BaseQuantity<T, KiloBit> val) where T:IConvertible {
        return new Quantity<double, MicroBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-3)) * (8*1E6))
        );
    }
	/// <summary>
    /// Extension method to convert KiloBit to NanoBit
    /// </summary>
    /// <param name="val">quantity measured in KiloBit</param>
    /// <returns>quantity measured in NanoBit</returns>
    public static Quantity<double, NanoBit> ToNanoBit<T>(this BaseQuantity<T, KiloBit> val) where T:IConvertible {
        return new Quantity<double, NanoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-3)) * (8*1E9))
        );
    }
	/// <summary>
    /// Extension method to convert KiloBit to PicoBit
    /// </summary>
    /// <param name="val">quantity measured in KiloBit</param>
    /// <returns>quantity measured in PicoBit</returns>
    public static Quantity<double, PicoBit> ToPicoBit<T>(this BaseQuantity<T, KiloBit> val) where T:IConvertible {
        return new Quantity<double, PicoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-3)) * (8*1E12))
        );
    }
	/// <summary>
    /// Extension method to convert KiloBit to FemtoBit
    /// </summary>
    /// <param name="val">quantity measured in KiloBit</param>
    /// <returns>quantity measured in FemtoBit</returns>
    public static Quantity<double, FemtoBit> ToFemtoBit<T>(this BaseQuantity<T, KiloBit> val) where T:IConvertible {
        return new Quantity<double, FemtoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-3)) * (8*1E15))
        );
    }
	/// <summary>
    /// Extension method to convert KiloBit to AttoBit
    /// </summary>
    /// <param name="val">quantity measured in KiloBit</param>
    /// <returns>quantity measured in AttoBit</returns>
    public static Quantity<double, AttoBit> ToAttoBit<T>(this BaseQuantity<T, KiloBit> val) where T:IConvertible {
        return new Quantity<double, AttoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-3)) * (8*1E18))
        );
    }
	/// <summary>
    /// Extension method to convert KiloBit to ZeptoBit
    /// </summary>
    /// <param name="val">quantity measured in KiloBit</param>
    /// <returns>quantity measured in ZeptoBit</returns>
    public static Quantity<double, ZeptoBit> ToZeptoBit<T>(this BaseQuantity<T, KiloBit> val) where T:IConvertible {
        return new Quantity<double, ZeptoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-3)) * (8*1E21))
        );
    }
	/// <summary>
    /// Extension method to convert KiloBit to YoctoBit
    /// </summary>
    /// <param name="val">quantity measured in KiloBit</param>
    /// <returns>quantity measured in YoctoBit</returns>
    public static Quantity<double, YoctoBit> ToYoctoBit<T>(this BaseQuantity<T, KiloBit> val) where T:IConvertible {
        return new Quantity<double, YoctoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-3)) * (8*1E24))
        );
    }
	/// <summary>
    /// Extension method to convert KiloBit to YottaByte
    /// </summary>
    /// <param name="val">quantity measured in KiloBit</param>
    /// <returns>quantity measured in YottaByte</returns>
    public static Quantity<double, YottaByte> ToYottaByte<T>(this BaseQuantity<T, KiloBit> val) where T:IConvertible {
        return new Quantity<double, YottaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-3)) * (1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert KiloBit to ZettaByte
    /// </summary>
    /// <param name="val">quantity measured in KiloBit</param>
    /// <returns>quantity measured in ZettaByte</returns>
    public static Quantity<double, ZettaByte> ToZettaByte<T>(this BaseQuantity<T, KiloBit> val) where T:IConvertible {
        return new Quantity<double, ZettaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-3)) * (1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert KiloBit to ExaByte
    /// </summary>
    /// <param name="val">quantity measured in KiloBit</param>
    /// <returns>quantity measured in ExaByte</returns>
    public static Quantity<double, ExaByte> ToExaByte<T>(this BaseQuantity<T, KiloBit> val) where T:IConvertible {
        return new Quantity<double, ExaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-3)) * (1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert KiloBit to PetaByte
    /// </summary>
    /// <param name="val">quantity measured in KiloBit</param>
    /// <returns>quantity measured in PetaByte</returns>
    public static Quantity<double, PetaByte> ToPetaByte<T>(this BaseQuantity<T, KiloBit> val) where T:IConvertible {
        return new Quantity<double, PetaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-3)) * (1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert KiloBit to TeraByte
    /// </summary>
    /// <param name="val">quantity measured in KiloBit</param>
    /// <returns>quantity measured in TeraByte</returns>
    public static Quantity<double, TeraByte> ToTeraByte<T>(this BaseQuantity<T, KiloBit> val) where T:IConvertible {
        return new Quantity<double, TeraByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-3)) * (1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert KiloBit to GigaByte
    /// </summary>
    /// <param name="val">quantity measured in KiloBit</param>
    /// <returns>quantity measured in GigaByte</returns>
    public static Quantity<double, GigaByte> ToGigaByte<T>(this BaseQuantity<T, KiloBit> val) where T:IConvertible {
        return new Quantity<double, GigaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-3)) * (1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert KiloBit to MegaByte
    /// </summary>
    /// <param name="val">quantity measured in KiloBit</param>
    /// <returns>quantity measured in MegaByte</returns>
    public static Quantity<double, MegaByte> ToMegaByte<T>(this BaseQuantity<T, KiloBit> val) where T:IConvertible {
        return new Quantity<double, MegaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-3)) * (1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert KiloBit to KiloByte
    /// </summary>
    /// <param name="val">quantity measured in KiloBit</param>
    /// <returns>quantity measured in KiloByte</returns>
    public static Quantity<double, KiloByte> ToKiloByte<T>(this BaseQuantity<T, KiloBit> val) where T:IConvertible {
        return new Quantity<double, KiloByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-3)) * (1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert KiloBit to HectoByte
    /// </summary>
    /// <param name="val">quantity measured in KiloBit</param>
    /// <returns>quantity measured in HectoByte</returns>
    public static Quantity<double, HectoByte> ToHectoByte<T>(this BaseQuantity<T, KiloBit> val) where T:IConvertible {
        return new Quantity<double, HectoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-3)) * (1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert KiloBit to DekaByte
    /// </summary>
    /// <param name="val">quantity measured in KiloBit</param>
    /// <returns>quantity measured in DekaByte</returns>
    public static Quantity<double, DekaByte> ToDekaByte<T>(this BaseQuantity<T, KiloBit> val) where T:IConvertible {
        return new Quantity<double, DekaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-3)) * (1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert KiloBit to DeciByte
    /// </summary>
    /// <param name="val">quantity measured in KiloBit</param>
    /// <returns>quantity measured in DeciByte</returns>
    public static Quantity<double, DeciByte> ToDeciByte<T>(this BaseQuantity<T, KiloBit> val) where T:IConvertible {
        return new Quantity<double, DeciByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-3)) * (1E1))
        );
    }
	/// <summary>
    /// Extension method to convert KiloBit to CentiByte
    /// </summary>
    /// <param name="val">quantity measured in KiloBit</param>
    /// <returns>quantity measured in CentiByte</returns>
    public static Quantity<double, CentiByte> ToCentiByte<T>(this BaseQuantity<T, KiloBit> val) where T:IConvertible {
        return new Quantity<double, CentiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-3)) * (1E2))
        );
    }
	/// <summary>
    /// Extension method to convert KiloBit to MilliByte
    /// </summary>
    /// <param name="val">quantity measured in KiloBit</param>
    /// <returns>quantity measured in MilliByte</returns>
    public static Quantity<double, MilliByte> ToMilliByte<T>(this BaseQuantity<T, KiloBit> val) where T:IConvertible {
        return new Quantity<double, MilliByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-3)) * (1E3))
        );
    }
	/// <summary>
    /// Extension method to convert KiloBit to MicroByte
    /// </summary>
    /// <param name="val">quantity measured in KiloBit</param>
    /// <returns>quantity measured in MicroByte</returns>
    public static Quantity<double, MicroByte> ToMicroByte<T>(this BaseQuantity<T, KiloBit> val) where T:IConvertible {
        return new Quantity<double, MicroByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-3)) * (1E6))
        );
    }
	/// <summary>
    /// Extension method to convert KiloBit to NanoByte
    /// </summary>
    /// <param name="val">quantity measured in KiloBit</param>
    /// <returns>quantity measured in NanoByte</returns>
    public static Quantity<double, NanoByte> ToNanoByte<T>(this BaseQuantity<T, KiloBit> val) where T:IConvertible {
        return new Quantity<double, NanoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-3)) * (1E9))
        );
    }
	/// <summary>
    /// Extension method to convert KiloBit to PicoByte
    /// </summary>
    /// <param name="val">quantity measured in KiloBit</param>
    /// <returns>quantity measured in PicoByte</returns>
    public static Quantity<double, PicoByte> ToPicoByte<T>(this BaseQuantity<T, KiloBit> val) where T:IConvertible {
        return new Quantity<double, PicoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-3)) * (1E12))
        );
    }
	/// <summary>
    /// Extension method to convert KiloBit to FemtoByte
    /// </summary>
    /// <param name="val">quantity measured in KiloBit</param>
    /// <returns>quantity measured in FemtoByte</returns>
    public static Quantity<double, FemtoByte> ToFemtoByte<T>(this BaseQuantity<T, KiloBit> val) where T:IConvertible {
        return new Quantity<double, FemtoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-3)) * (1E15))
        );
    }
	/// <summary>
    /// Extension method to convert KiloBit to AttoByte
    /// </summary>
    /// <param name="val">quantity measured in KiloBit</param>
    /// <returns>quantity measured in AttoByte</returns>
    public static Quantity<double, AttoByte> ToAttoByte<T>(this BaseQuantity<T, KiloBit> val) where T:IConvertible {
        return new Quantity<double, AttoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-3)) * (1E18))
        );
    }
	/// <summary>
    /// Extension method to convert KiloBit to ZeptoByte
    /// </summary>
    /// <param name="val">quantity measured in KiloBit</param>
    /// <returns>quantity measured in ZeptoByte</returns>
    public static Quantity<double, ZeptoByte> ToZeptoByte<T>(this BaseQuantity<T, KiloBit> val) where T:IConvertible {
        return new Quantity<double, ZeptoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-3)) * (1E21))
        );
    }
	/// <summary>
    /// Extension method to convert KiloBit to YoctoByte
    /// </summary>
    /// <param name="val">quantity measured in KiloBit</param>
    /// <returns>quantity measured in YoctoByte</returns>
    public static Quantity<double, YoctoByte> ToYoctoByte<T>(this BaseQuantity<T, KiloBit> val) where T:IConvertible {
        return new Quantity<double, YoctoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-3)) * (1E24))
        );
    }
	/// <summary>
    /// Extension method to convert KiloBit to YobiByte
    /// </summary>
    /// <param name="val">quantity measured in KiloBit</param>
    /// <returns>quantity measured in YobiByte</returns>
    public static Quantity<double, YobiByte> ToYobiByte<T>(this BaseQuantity<T, KiloBit> val) where T:IConvertible {
        return new Quantity<double, YobiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-3)) * (1.2089258e-24))
        );
    }
	/// <summary>
    /// Extension method to convert KiloBit to ZebiByte
    /// </summary>
    /// <param name="val">quantity measured in KiloBit</param>
    /// <returns>quantity measured in ZebiByte</returns>
    public static Quantity<double, ZebiByte> ToZebiByte<T>(this BaseQuantity<T, KiloBit> val) where T:IConvertible {
        return new Quantity<double, ZebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-3)) * (1.1805916e-21))
        );
    }
	/// <summary>
    /// Extension method to convert KiloBit to ExbiByte
    /// </summary>
    /// <param name="val">quantity measured in KiloBit</param>
    /// <returns>quantity measured in ExbiByte</returns>
    public static Quantity<double, ExbiByte> ToExbiByte<T>(this BaseQuantity<T, KiloBit> val) where T:IConvertible {
        return new Quantity<double, ExbiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-3)) * (1.1529215e-18))
        );
    }
	/// <summary>
    /// Extension method to convert KiloBit to PebiByte
    /// </summary>
    /// <param name="val">quantity measured in KiloBit</param>
    /// <returns>quantity measured in PebiByte</returns>
    public static Quantity<double, PebiByte> ToPebiByte<T>(this BaseQuantity<T, KiloBit> val) where T:IConvertible {
        return new Quantity<double, PebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-3)) * (1.1258999e-15))
        );
    }
	/// <summary>
    /// Extension method to convert KiloBit to TebiByte
    /// </summary>
    /// <param name="val">quantity measured in KiloBit</param>
    /// <returns>quantity measured in TebiByte</returns>
    public static Quantity<double, TebiByte> ToTebiByte<T>(this BaseQuantity<T, KiloBit> val) where T:IConvertible {
        return new Quantity<double, TebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-3)) * (1.0995116e-12))
        );
    }
	/// <summary>
    /// Extension method to convert KiloBit to GibiByte
    /// </summary>
    /// <param name="val">quantity measured in KiloBit</param>
    /// <returns>quantity measured in GibiByte</returns>
    public static Quantity<double, GibiByte> ToGibiByte<T>(this BaseQuantity<T, KiloBit> val) where T:IConvertible {
        return new Quantity<double, GibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-3)) * (1d/1073741824))
        );
    }
	/// <summary>
    /// Extension method to convert KiloBit to MebiByte
    /// </summary>
    /// <param name="val">quantity measured in KiloBit</param>
    /// <returns>quantity measured in MebiByte</returns>
    public static Quantity<double, MebiByte> ToMebiByte<T>(this BaseQuantity<T, KiloBit> val) where T:IConvertible {
        return new Quantity<double, MebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-3)) * (1d/1048576))
        );
    }
	/// <summary>
    /// Extension method to convert KiloBit to KibiByte
    /// </summary>
    /// <param name="val">quantity measured in KiloBit</param>
    /// <returns>quantity measured in KibiByte</returns>
    public static Quantity<double, KibiByte> ToKibiByte<T>(this BaseQuantity<T, KiloBit> val) where T:IConvertible {
        return new Quantity<double, KibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-3)) * (1d/1024))
        );
    }
	/// <summary>
    /// Extension method to convert Byte to HectoBit
    /// </summary>
    /// <param name="val">quantity measured in Byte</param>
    /// <returns>quantity measured in HectoBit</returns>
    public static Quantity<double, HectoBit> ToHectoBit<T>(this BaseQuantity<T, Byte> val) where T:IConvertible {
        return new Quantity<double, HectoBit>(
            Convert.ToDouble(val.Value) * (8*1E-2)
        );
    }
	/// <summary>
    /// Extension method to convert HectoBit to Byte
    /// </summary>
    /// <param name="val">quantity measured in HectoBit</param>
    /// <returns>quantity measured in Byte</returns>
    public static Quantity<double, Byte> ToByte<T>(this BaseQuantity<T, HectoBit> val) where T:IConvertible {
        return new Quantity<double, Byte>(
            Convert.ToDouble(val.Value) * (1d/(8*1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert HectoBit to Bit
    /// </summary>
    /// <param name="val">quantity measured in HectoBit</param>
    /// <returns>quantity measured in Bit</returns>
    public static Quantity<double, Bit> ToBit<T>(this BaseQuantity<T, HectoBit> val) where T:IConvertible {
        return new Quantity<double, Bit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-2)) * (8))
        );
    }
	/// <summary>
    /// Extension method to convert HectoBit to YottaBit
    /// </summary>
    /// <param name="val">quantity measured in HectoBit</param>
    /// <returns>quantity measured in YottaBit</returns>
    public static Quantity<double, YottaBit> ToYottaBit<T>(this BaseQuantity<T, HectoBit> val) where T:IConvertible {
        return new Quantity<double, YottaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-2)) * (8*1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert HectoBit to ZettaBit
    /// </summary>
    /// <param name="val">quantity measured in HectoBit</param>
    /// <returns>quantity measured in ZettaBit</returns>
    public static Quantity<double, ZettaBit> ToZettaBit<T>(this BaseQuantity<T, HectoBit> val) where T:IConvertible {
        return new Quantity<double, ZettaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-2)) * (8*1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert HectoBit to ExaBit
    /// </summary>
    /// <param name="val">quantity measured in HectoBit</param>
    /// <returns>quantity measured in ExaBit</returns>
    public static Quantity<double, ExaBit> ToExaBit<T>(this BaseQuantity<T, HectoBit> val) where T:IConvertible {
        return new Quantity<double, ExaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-2)) * (8*1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert HectoBit to PetaBit
    /// </summary>
    /// <param name="val">quantity measured in HectoBit</param>
    /// <returns>quantity measured in PetaBit</returns>
    public static Quantity<double, PetaBit> ToPetaBit<T>(this BaseQuantity<T, HectoBit> val) where T:IConvertible {
        return new Quantity<double, PetaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-2)) * (8*1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert HectoBit to TeraBit
    /// </summary>
    /// <param name="val">quantity measured in HectoBit</param>
    /// <returns>quantity measured in TeraBit</returns>
    public static Quantity<double, TeraBit> ToTeraBit<T>(this BaseQuantity<T, HectoBit> val) where T:IConvertible {
        return new Quantity<double, TeraBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-2)) * (8*1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert HectoBit to GigaBit
    /// </summary>
    /// <param name="val">quantity measured in HectoBit</param>
    /// <returns>quantity measured in GigaBit</returns>
    public static Quantity<double, GigaBit> ToGigaBit<T>(this BaseQuantity<T, HectoBit> val) where T:IConvertible {
        return new Quantity<double, GigaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-2)) * (8*1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert HectoBit to MegaBit
    /// </summary>
    /// <param name="val">quantity measured in HectoBit</param>
    /// <returns>quantity measured in MegaBit</returns>
    public static Quantity<double, MegaBit> ToMegaBit<T>(this BaseQuantity<T, HectoBit> val) where T:IConvertible {
        return new Quantity<double, MegaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-2)) * (8*1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert HectoBit to KiloBit
    /// </summary>
    /// <param name="val">quantity measured in HectoBit</param>
    /// <returns>quantity measured in KiloBit</returns>
    public static Quantity<double, KiloBit> ToKiloBit<T>(this BaseQuantity<T, HectoBit> val) where T:IConvertible {
        return new Quantity<double, KiloBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-2)) * (8*1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert HectoBit to DekaBit
    /// </summary>
    /// <param name="val">quantity measured in HectoBit</param>
    /// <returns>quantity measured in DekaBit</returns>
    public static Quantity<double, DekaBit> ToDekaBit<T>(this BaseQuantity<T, HectoBit> val) where T:IConvertible {
        return new Quantity<double, DekaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-2)) * (8*1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert HectoBit to DeciBit
    /// </summary>
    /// <param name="val">quantity measured in HectoBit</param>
    /// <returns>quantity measured in DeciBit</returns>
    public static Quantity<double, DeciBit> ToDeciBit<T>(this BaseQuantity<T, HectoBit> val) where T:IConvertible {
        return new Quantity<double, DeciBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-2)) * (8*1E1))
        );
    }
	/// <summary>
    /// Extension method to convert HectoBit to CentiBit
    /// </summary>
    /// <param name="val">quantity measured in HectoBit</param>
    /// <returns>quantity measured in CentiBit</returns>
    public static Quantity<double, CentiBit> ToCentiBit<T>(this BaseQuantity<T, HectoBit> val) where T:IConvertible {
        return new Quantity<double, CentiBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-2)) * (8*1E2))
        );
    }
	/// <summary>
    /// Extension method to convert HectoBit to MilliBit
    /// </summary>
    /// <param name="val">quantity measured in HectoBit</param>
    /// <returns>quantity measured in MilliBit</returns>
    public static Quantity<double, MilliBit> ToMilliBit<T>(this BaseQuantity<T, HectoBit> val) where T:IConvertible {
        return new Quantity<double, MilliBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-2)) * (8*1E3))
        );
    }
	/// <summary>
    /// Extension method to convert HectoBit to MicroBit
    /// </summary>
    /// <param name="val">quantity measured in HectoBit</param>
    /// <returns>quantity measured in MicroBit</returns>
    public static Quantity<double, MicroBit> ToMicroBit<T>(this BaseQuantity<T, HectoBit> val) where T:IConvertible {
        return new Quantity<double, MicroBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-2)) * (8*1E6))
        );
    }
	/// <summary>
    /// Extension method to convert HectoBit to NanoBit
    /// </summary>
    /// <param name="val">quantity measured in HectoBit</param>
    /// <returns>quantity measured in NanoBit</returns>
    public static Quantity<double, NanoBit> ToNanoBit<T>(this BaseQuantity<T, HectoBit> val) where T:IConvertible {
        return new Quantity<double, NanoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-2)) * (8*1E9))
        );
    }
	/// <summary>
    /// Extension method to convert HectoBit to PicoBit
    /// </summary>
    /// <param name="val">quantity measured in HectoBit</param>
    /// <returns>quantity measured in PicoBit</returns>
    public static Quantity<double, PicoBit> ToPicoBit<T>(this BaseQuantity<T, HectoBit> val) where T:IConvertible {
        return new Quantity<double, PicoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-2)) * (8*1E12))
        );
    }
	/// <summary>
    /// Extension method to convert HectoBit to FemtoBit
    /// </summary>
    /// <param name="val">quantity measured in HectoBit</param>
    /// <returns>quantity measured in FemtoBit</returns>
    public static Quantity<double, FemtoBit> ToFemtoBit<T>(this BaseQuantity<T, HectoBit> val) where T:IConvertible {
        return new Quantity<double, FemtoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-2)) * (8*1E15))
        );
    }
	/// <summary>
    /// Extension method to convert HectoBit to AttoBit
    /// </summary>
    /// <param name="val">quantity measured in HectoBit</param>
    /// <returns>quantity measured in AttoBit</returns>
    public static Quantity<double, AttoBit> ToAttoBit<T>(this BaseQuantity<T, HectoBit> val) where T:IConvertible {
        return new Quantity<double, AttoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-2)) * (8*1E18))
        );
    }
	/// <summary>
    /// Extension method to convert HectoBit to ZeptoBit
    /// </summary>
    /// <param name="val">quantity measured in HectoBit</param>
    /// <returns>quantity measured in ZeptoBit</returns>
    public static Quantity<double, ZeptoBit> ToZeptoBit<T>(this BaseQuantity<T, HectoBit> val) where T:IConvertible {
        return new Quantity<double, ZeptoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-2)) * (8*1E21))
        );
    }
	/// <summary>
    /// Extension method to convert HectoBit to YoctoBit
    /// </summary>
    /// <param name="val">quantity measured in HectoBit</param>
    /// <returns>quantity measured in YoctoBit</returns>
    public static Quantity<double, YoctoBit> ToYoctoBit<T>(this BaseQuantity<T, HectoBit> val) where T:IConvertible {
        return new Quantity<double, YoctoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-2)) * (8*1E24))
        );
    }
	/// <summary>
    /// Extension method to convert HectoBit to YottaByte
    /// </summary>
    /// <param name="val">quantity measured in HectoBit</param>
    /// <returns>quantity measured in YottaByte</returns>
    public static Quantity<double, YottaByte> ToYottaByte<T>(this BaseQuantity<T, HectoBit> val) where T:IConvertible {
        return new Quantity<double, YottaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-2)) * (1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert HectoBit to ZettaByte
    /// </summary>
    /// <param name="val">quantity measured in HectoBit</param>
    /// <returns>quantity measured in ZettaByte</returns>
    public static Quantity<double, ZettaByte> ToZettaByte<T>(this BaseQuantity<T, HectoBit> val) where T:IConvertible {
        return new Quantity<double, ZettaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-2)) * (1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert HectoBit to ExaByte
    /// </summary>
    /// <param name="val">quantity measured in HectoBit</param>
    /// <returns>quantity measured in ExaByte</returns>
    public static Quantity<double, ExaByte> ToExaByte<T>(this BaseQuantity<T, HectoBit> val) where T:IConvertible {
        return new Quantity<double, ExaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-2)) * (1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert HectoBit to PetaByte
    /// </summary>
    /// <param name="val">quantity measured in HectoBit</param>
    /// <returns>quantity measured in PetaByte</returns>
    public static Quantity<double, PetaByte> ToPetaByte<T>(this BaseQuantity<T, HectoBit> val) where T:IConvertible {
        return new Quantity<double, PetaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-2)) * (1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert HectoBit to TeraByte
    /// </summary>
    /// <param name="val">quantity measured in HectoBit</param>
    /// <returns>quantity measured in TeraByte</returns>
    public static Quantity<double, TeraByte> ToTeraByte<T>(this BaseQuantity<T, HectoBit> val) where T:IConvertible {
        return new Quantity<double, TeraByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-2)) * (1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert HectoBit to GigaByte
    /// </summary>
    /// <param name="val">quantity measured in HectoBit</param>
    /// <returns>quantity measured in GigaByte</returns>
    public static Quantity<double, GigaByte> ToGigaByte<T>(this BaseQuantity<T, HectoBit> val) where T:IConvertible {
        return new Quantity<double, GigaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-2)) * (1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert HectoBit to MegaByte
    /// </summary>
    /// <param name="val">quantity measured in HectoBit</param>
    /// <returns>quantity measured in MegaByte</returns>
    public static Quantity<double, MegaByte> ToMegaByte<T>(this BaseQuantity<T, HectoBit> val) where T:IConvertible {
        return new Quantity<double, MegaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-2)) * (1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert HectoBit to KiloByte
    /// </summary>
    /// <param name="val">quantity measured in HectoBit</param>
    /// <returns>quantity measured in KiloByte</returns>
    public static Quantity<double, KiloByte> ToKiloByte<T>(this BaseQuantity<T, HectoBit> val) where T:IConvertible {
        return new Quantity<double, KiloByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-2)) * (1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert HectoBit to HectoByte
    /// </summary>
    /// <param name="val">quantity measured in HectoBit</param>
    /// <returns>quantity measured in HectoByte</returns>
    public static Quantity<double, HectoByte> ToHectoByte<T>(this BaseQuantity<T, HectoBit> val) where T:IConvertible {
        return new Quantity<double, HectoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-2)) * (1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert HectoBit to DekaByte
    /// </summary>
    /// <param name="val">quantity measured in HectoBit</param>
    /// <returns>quantity measured in DekaByte</returns>
    public static Quantity<double, DekaByte> ToDekaByte<T>(this BaseQuantity<T, HectoBit> val) where T:IConvertible {
        return new Quantity<double, DekaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-2)) * (1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert HectoBit to DeciByte
    /// </summary>
    /// <param name="val">quantity measured in HectoBit</param>
    /// <returns>quantity measured in DeciByte</returns>
    public static Quantity<double, DeciByte> ToDeciByte<T>(this BaseQuantity<T, HectoBit> val) where T:IConvertible {
        return new Quantity<double, DeciByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-2)) * (1E1))
        );
    }
	/// <summary>
    /// Extension method to convert HectoBit to CentiByte
    /// </summary>
    /// <param name="val">quantity measured in HectoBit</param>
    /// <returns>quantity measured in CentiByte</returns>
    public static Quantity<double, CentiByte> ToCentiByte<T>(this BaseQuantity<T, HectoBit> val) where T:IConvertible {
        return new Quantity<double, CentiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-2)) * (1E2))
        );
    }
	/// <summary>
    /// Extension method to convert HectoBit to MilliByte
    /// </summary>
    /// <param name="val">quantity measured in HectoBit</param>
    /// <returns>quantity measured in MilliByte</returns>
    public static Quantity<double, MilliByte> ToMilliByte<T>(this BaseQuantity<T, HectoBit> val) where T:IConvertible {
        return new Quantity<double, MilliByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-2)) * (1E3))
        );
    }
	/// <summary>
    /// Extension method to convert HectoBit to MicroByte
    /// </summary>
    /// <param name="val">quantity measured in HectoBit</param>
    /// <returns>quantity measured in MicroByte</returns>
    public static Quantity<double, MicroByte> ToMicroByte<T>(this BaseQuantity<T, HectoBit> val) where T:IConvertible {
        return new Quantity<double, MicroByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-2)) * (1E6))
        );
    }
	/// <summary>
    /// Extension method to convert HectoBit to NanoByte
    /// </summary>
    /// <param name="val">quantity measured in HectoBit</param>
    /// <returns>quantity measured in NanoByte</returns>
    public static Quantity<double, NanoByte> ToNanoByte<T>(this BaseQuantity<T, HectoBit> val) where T:IConvertible {
        return new Quantity<double, NanoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-2)) * (1E9))
        );
    }
	/// <summary>
    /// Extension method to convert HectoBit to PicoByte
    /// </summary>
    /// <param name="val">quantity measured in HectoBit</param>
    /// <returns>quantity measured in PicoByte</returns>
    public static Quantity<double, PicoByte> ToPicoByte<T>(this BaseQuantity<T, HectoBit> val) where T:IConvertible {
        return new Quantity<double, PicoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-2)) * (1E12))
        );
    }
	/// <summary>
    /// Extension method to convert HectoBit to FemtoByte
    /// </summary>
    /// <param name="val">quantity measured in HectoBit</param>
    /// <returns>quantity measured in FemtoByte</returns>
    public static Quantity<double, FemtoByte> ToFemtoByte<T>(this BaseQuantity<T, HectoBit> val) where T:IConvertible {
        return new Quantity<double, FemtoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-2)) * (1E15))
        );
    }
	/// <summary>
    /// Extension method to convert HectoBit to AttoByte
    /// </summary>
    /// <param name="val">quantity measured in HectoBit</param>
    /// <returns>quantity measured in AttoByte</returns>
    public static Quantity<double, AttoByte> ToAttoByte<T>(this BaseQuantity<T, HectoBit> val) where T:IConvertible {
        return new Quantity<double, AttoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-2)) * (1E18))
        );
    }
	/// <summary>
    /// Extension method to convert HectoBit to ZeptoByte
    /// </summary>
    /// <param name="val">quantity measured in HectoBit</param>
    /// <returns>quantity measured in ZeptoByte</returns>
    public static Quantity<double, ZeptoByte> ToZeptoByte<T>(this BaseQuantity<T, HectoBit> val) where T:IConvertible {
        return new Quantity<double, ZeptoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-2)) * (1E21))
        );
    }
	/// <summary>
    /// Extension method to convert HectoBit to YoctoByte
    /// </summary>
    /// <param name="val">quantity measured in HectoBit</param>
    /// <returns>quantity measured in YoctoByte</returns>
    public static Quantity<double, YoctoByte> ToYoctoByte<T>(this BaseQuantity<T, HectoBit> val) where T:IConvertible {
        return new Quantity<double, YoctoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-2)) * (1E24))
        );
    }
	/// <summary>
    /// Extension method to convert HectoBit to YobiByte
    /// </summary>
    /// <param name="val">quantity measured in HectoBit</param>
    /// <returns>quantity measured in YobiByte</returns>
    public static Quantity<double, YobiByte> ToYobiByte<T>(this BaseQuantity<T, HectoBit> val) where T:IConvertible {
        return new Quantity<double, YobiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-2)) * (1.2089258e-24))
        );
    }
	/// <summary>
    /// Extension method to convert HectoBit to ZebiByte
    /// </summary>
    /// <param name="val">quantity measured in HectoBit</param>
    /// <returns>quantity measured in ZebiByte</returns>
    public static Quantity<double, ZebiByte> ToZebiByte<T>(this BaseQuantity<T, HectoBit> val) where T:IConvertible {
        return new Quantity<double, ZebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-2)) * (1.1805916e-21))
        );
    }
	/// <summary>
    /// Extension method to convert HectoBit to ExbiByte
    /// </summary>
    /// <param name="val">quantity measured in HectoBit</param>
    /// <returns>quantity measured in ExbiByte</returns>
    public static Quantity<double, ExbiByte> ToExbiByte<T>(this BaseQuantity<T, HectoBit> val) where T:IConvertible {
        return new Quantity<double, ExbiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-2)) * (1.1529215e-18))
        );
    }
	/// <summary>
    /// Extension method to convert HectoBit to PebiByte
    /// </summary>
    /// <param name="val">quantity measured in HectoBit</param>
    /// <returns>quantity measured in PebiByte</returns>
    public static Quantity<double, PebiByte> ToPebiByte<T>(this BaseQuantity<T, HectoBit> val) where T:IConvertible {
        return new Quantity<double, PebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-2)) * (1.1258999e-15))
        );
    }
	/// <summary>
    /// Extension method to convert HectoBit to TebiByte
    /// </summary>
    /// <param name="val">quantity measured in HectoBit</param>
    /// <returns>quantity measured in TebiByte</returns>
    public static Quantity<double, TebiByte> ToTebiByte<T>(this BaseQuantity<T, HectoBit> val) where T:IConvertible {
        return new Quantity<double, TebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-2)) * (1.0995116e-12))
        );
    }
	/// <summary>
    /// Extension method to convert HectoBit to GibiByte
    /// </summary>
    /// <param name="val">quantity measured in HectoBit</param>
    /// <returns>quantity measured in GibiByte</returns>
    public static Quantity<double, GibiByte> ToGibiByte<T>(this BaseQuantity<T, HectoBit> val) where T:IConvertible {
        return new Quantity<double, GibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-2)) * (1d/1073741824))
        );
    }
	/// <summary>
    /// Extension method to convert HectoBit to MebiByte
    /// </summary>
    /// <param name="val">quantity measured in HectoBit</param>
    /// <returns>quantity measured in MebiByte</returns>
    public static Quantity<double, MebiByte> ToMebiByte<T>(this BaseQuantity<T, HectoBit> val) where T:IConvertible {
        return new Quantity<double, MebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-2)) * (1d/1048576))
        );
    }
	/// <summary>
    /// Extension method to convert HectoBit to KibiByte
    /// </summary>
    /// <param name="val">quantity measured in HectoBit</param>
    /// <returns>quantity measured in KibiByte</returns>
    public static Quantity<double, KibiByte> ToKibiByte<T>(this BaseQuantity<T, HectoBit> val) where T:IConvertible {
        return new Quantity<double, KibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-2)) * (1d/1024))
        );
    }
	/// <summary>
    /// Extension method to convert Byte to DekaBit
    /// </summary>
    /// <param name="val">quantity measured in Byte</param>
    /// <returns>quantity measured in DekaBit</returns>
    public static Quantity<double, DekaBit> ToDekaBit<T>(this BaseQuantity<T, Byte> val) where T:IConvertible {
        return new Quantity<double, DekaBit>(
            Convert.ToDouble(val.Value) * (8*1E-1)
        );
    }
	/// <summary>
    /// Extension method to convert DekaBit to Byte
    /// </summary>
    /// <param name="val">quantity measured in DekaBit</param>
    /// <returns>quantity measured in Byte</returns>
    public static Quantity<double, Byte> ToByte<T>(this BaseQuantity<T, DekaBit> val) where T:IConvertible {
        return new Quantity<double, Byte>(
            Convert.ToDouble(val.Value) * (1d/(8*1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert DekaBit to Bit
    /// </summary>
    /// <param name="val">quantity measured in DekaBit</param>
    /// <returns>quantity measured in Bit</returns>
    public static Quantity<double, Bit> ToBit<T>(this BaseQuantity<T, DekaBit> val) where T:IConvertible {
        return new Quantity<double, Bit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-1)) * (8))
        );
    }
	/// <summary>
    /// Extension method to convert DekaBit to YottaBit
    /// </summary>
    /// <param name="val">quantity measured in DekaBit</param>
    /// <returns>quantity measured in YottaBit</returns>
    public static Quantity<double, YottaBit> ToYottaBit<T>(this BaseQuantity<T, DekaBit> val) where T:IConvertible {
        return new Quantity<double, YottaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-1)) * (8*1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert DekaBit to ZettaBit
    /// </summary>
    /// <param name="val">quantity measured in DekaBit</param>
    /// <returns>quantity measured in ZettaBit</returns>
    public static Quantity<double, ZettaBit> ToZettaBit<T>(this BaseQuantity<T, DekaBit> val) where T:IConvertible {
        return new Quantity<double, ZettaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-1)) * (8*1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert DekaBit to ExaBit
    /// </summary>
    /// <param name="val">quantity measured in DekaBit</param>
    /// <returns>quantity measured in ExaBit</returns>
    public static Quantity<double, ExaBit> ToExaBit<T>(this BaseQuantity<T, DekaBit> val) where T:IConvertible {
        return new Quantity<double, ExaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-1)) * (8*1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert DekaBit to PetaBit
    /// </summary>
    /// <param name="val">quantity measured in DekaBit</param>
    /// <returns>quantity measured in PetaBit</returns>
    public static Quantity<double, PetaBit> ToPetaBit<T>(this BaseQuantity<T, DekaBit> val) where T:IConvertible {
        return new Quantity<double, PetaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-1)) * (8*1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert DekaBit to TeraBit
    /// </summary>
    /// <param name="val">quantity measured in DekaBit</param>
    /// <returns>quantity measured in TeraBit</returns>
    public static Quantity<double, TeraBit> ToTeraBit<T>(this BaseQuantity<T, DekaBit> val) where T:IConvertible {
        return new Quantity<double, TeraBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-1)) * (8*1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert DekaBit to GigaBit
    /// </summary>
    /// <param name="val">quantity measured in DekaBit</param>
    /// <returns>quantity measured in GigaBit</returns>
    public static Quantity<double, GigaBit> ToGigaBit<T>(this BaseQuantity<T, DekaBit> val) where T:IConvertible {
        return new Quantity<double, GigaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-1)) * (8*1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert DekaBit to MegaBit
    /// </summary>
    /// <param name="val">quantity measured in DekaBit</param>
    /// <returns>quantity measured in MegaBit</returns>
    public static Quantity<double, MegaBit> ToMegaBit<T>(this BaseQuantity<T, DekaBit> val) where T:IConvertible {
        return new Quantity<double, MegaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-1)) * (8*1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert DekaBit to KiloBit
    /// </summary>
    /// <param name="val">quantity measured in DekaBit</param>
    /// <returns>quantity measured in KiloBit</returns>
    public static Quantity<double, KiloBit> ToKiloBit<T>(this BaseQuantity<T, DekaBit> val) where T:IConvertible {
        return new Quantity<double, KiloBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-1)) * (8*1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert DekaBit to HectoBit
    /// </summary>
    /// <param name="val">quantity measured in DekaBit</param>
    /// <returns>quantity measured in HectoBit</returns>
    public static Quantity<double, HectoBit> ToHectoBit<T>(this BaseQuantity<T, DekaBit> val) where T:IConvertible {
        return new Quantity<double, HectoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-1)) * (8*1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert DekaBit to DeciBit
    /// </summary>
    /// <param name="val">quantity measured in DekaBit</param>
    /// <returns>quantity measured in DeciBit</returns>
    public static Quantity<double, DeciBit> ToDeciBit<T>(this BaseQuantity<T, DekaBit> val) where T:IConvertible {
        return new Quantity<double, DeciBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-1)) * (8*1E1))
        );
    }
	/// <summary>
    /// Extension method to convert DekaBit to CentiBit
    /// </summary>
    /// <param name="val">quantity measured in DekaBit</param>
    /// <returns>quantity measured in CentiBit</returns>
    public static Quantity<double, CentiBit> ToCentiBit<T>(this BaseQuantity<T, DekaBit> val) where T:IConvertible {
        return new Quantity<double, CentiBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-1)) * (8*1E2))
        );
    }
	/// <summary>
    /// Extension method to convert DekaBit to MilliBit
    /// </summary>
    /// <param name="val">quantity measured in DekaBit</param>
    /// <returns>quantity measured in MilliBit</returns>
    public static Quantity<double, MilliBit> ToMilliBit<T>(this BaseQuantity<T, DekaBit> val) where T:IConvertible {
        return new Quantity<double, MilliBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-1)) * (8*1E3))
        );
    }
	/// <summary>
    /// Extension method to convert DekaBit to MicroBit
    /// </summary>
    /// <param name="val">quantity measured in DekaBit</param>
    /// <returns>quantity measured in MicroBit</returns>
    public static Quantity<double, MicroBit> ToMicroBit<T>(this BaseQuantity<T, DekaBit> val) where T:IConvertible {
        return new Quantity<double, MicroBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-1)) * (8*1E6))
        );
    }
	/// <summary>
    /// Extension method to convert DekaBit to NanoBit
    /// </summary>
    /// <param name="val">quantity measured in DekaBit</param>
    /// <returns>quantity measured in NanoBit</returns>
    public static Quantity<double, NanoBit> ToNanoBit<T>(this BaseQuantity<T, DekaBit> val) where T:IConvertible {
        return new Quantity<double, NanoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-1)) * (8*1E9))
        );
    }
	/// <summary>
    /// Extension method to convert DekaBit to PicoBit
    /// </summary>
    /// <param name="val">quantity measured in DekaBit</param>
    /// <returns>quantity measured in PicoBit</returns>
    public static Quantity<double, PicoBit> ToPicoBit<T>(this BaseQuantity<T, DekaBit> val) where T:IConvertible {
        return new Quantity<double, PicoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-1)) * (8*1E12))
        );
    }
	/// <summary>
    /// Extension method to convert DekaBit to FemtoBit
    /// </summary>
    /// <param name="val">quantity measured in DekaBit</param>
    /// <returns>quantity measured in FemtoBit</returns>
    public static Quantity<double, FemtoBit> ToFemtoBit<T>(this BaseQuantity<T, DekaBit> val) where T:IConvertible {
        return new Quantity<double, FemtoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-1)) * (8*1E15))
        );
    }
	/// <summary>
    /// Extension method to convert DekaBit to AttoBit
    /// </summary>
    /// <param name="val">quantity measured in DekaBit</param>
    /// <returns>quantity measured in AttoBit</returns>
    public static Quantity<double, AttoBit> ToAttoBit<T>(this BaseQuantity<T, DekaBit> val) where T:IConvertible {
        return new Quantity<double, AttoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-1)) * (8*1E18))
        );
    }
	/// <summary>
    /// Extension method to convert DekaBit to ZeptoBit
    /// </summary>
    /// <param name="val">quantity measured in DekaBit</param>
    /// <returns>quantity measured in ZeptoBit</returns>
    public static Quantity<double, ZeptoBit> ToZeptoBit<T>(this BaseQuantity<T, DekaBit> val) where T:IConvertible {
        return new Quantity<double, ZeptoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-1)) * (8*1E21))
        );
    }
	/// <summary>
    /// Extension method to convert DekaBit to YoctoBit
    /// </summary>
    /// <param name="val">quantity measured in DekaBit</param>
    /// <returns>quantity measured in YoctoBit</returns>
    public static Quantity<double, YoctoBit> ToYoctoBit<T>(this BaseQuantity<T, DekaBit> val) where T:IConvertible {
        return new Quantity<double, YoctoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-1)) * (8*1E24))
        );
    }
	/// <summary>
    /// Extension method to convert DekaBit to YottaByte
    /// </summary>
    /// <param name="val">quantity measured in DekaBit</param>
    /// <returns>quantity measured in YottaByte</returns>
    public static Quantity<double, YottaByte> ToYottaByte<T>(this BaseQuantity<T, DekaBit> val) where T:IConvertible {
        return new Quantity<double, YottaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-1)) * (1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert DekaBit to ZettaByte
    /// </summary>
    /// <param name="val">quantity measured in DekaBit</param>
    /// <returns>quantity measured in ZettaByte</returns>
    public static Quantity<double, ZettaByte> ToZettaByte<T>(this BaseQuantity<T, DekaBit> val) where T:IConvertible {
        return new Quantity<double, ZettaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-1)) * (1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert DekaBit to ExaByte
    /// </summary>
    /// <param name="val">quantity measured in DekaBit</param>
    /// <returns>quantity measured in ExaByte</returns>
    public static Quantity<double, ExaByte> ToExaByte<T>(this BaseQuantity<T, DekaBit> val) where T:IConvertible {
        return new Quantity<double, ExaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-1)) * (1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert DekaBit to PetaByte
    /// </summary>
    /// <param name="val">quantity measured in DekaBit</param>
    /// <returns>quantity measured in PetaByte</returns>
    public static Quantity<double, PetaByte> ToPetaByte<T>(this BaseQuantity<T, DekaBit> val) where T:IConvertible {
        return new Quantity<double, PetaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-1)) * (1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert DekaBit to TeraByte
    /// </summary>
    /// <param name="val">quantity measured in DekaBit</param>
    /// <returns>quantity measured in TeraByte</returns>
    public static Quantity<double, TeraByte> ToTeraByte<T>(this BaseQuantity<T, DekaBit> val) where T:IConvertible {
        return new Quantity<double, TeraByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-1)) * (1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert DekaBit to GigaByte
    /// </summary>
    /// <param name="val">quantity measured in DekaBit</param>
    /// <returns>quantity measured in GigaByte</returns>
    public static Quantity<double, GigaByte> ToGigaByte<T>(this BaseQuantity<T, DekaBit> val) where T:IConvertible {
        return new Quantity<double, GigaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-1)) * (1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert DekaBit to MegaByte
    /// </summary>
    /// <param name="val">quantity measured in DekaBit</param>
    /// <returns>quantity measured in MegaByte</returns>
    public static Quantity<double, MegaByte> ToMegaByte<T>(this BaseQuantity<T, DekaBit> val) where T:IConvertible {
        return new Quantity<double, MegaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-1)) * (1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert DekaBit to KiloByte
    /// </summary>
    /// <param name="val">quantity measured in DekaBit</param>
    /// <returns>quantity measured in KiloByte</returns>
    public static Quantity<double, KiloByte> ToKiloByte<T>(this BaseQuantity<T, DekaBit> val) where T:IConvertible {
        return new Quantity<double, KiloByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-1)) * (1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert DekaBit to HectoByte
    /// </summary>
    /// <param name="val">quantity measured in DekaBit</param>
    /// <returns>quantity measured in HectoByte</returns>
    public static Quantity<double, HectoByte> ToHectoByte<T>(this BaseQuantity<T, DekaBit> val) where T:IConvertible {
        return new Quantity<double, HectoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-1)) * (1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert DekaBit to DekaByte
    /// </summary>
    /// <param name="val">quantity measured in DekaBit</param>
    /// <returns>quantity measured in DekaByte</returns>
    public static Quantity<double, DekaByte> ToDekaByte<T>(this BaseQuantity<T, DekaBit> val) where T:IConvertible {
        return new Quantity<double, DekaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-1)) * (1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert DekaBit to DeciByte
    /// </summary>
    /// <param name="val">quantity measured in DekaBit</param>
    /// <returns>quantity measured in DeciByte</returns>
    public static Quantity<double, DeciByte> ToDeciByte<T>(this BaseQuantity<T, DekaBit> val) where T:IConvertible {
        return new Quantity<double, DeciByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-1)) * (1E1))
        );
    }
	/// <summary>
    /// Extension method to convert DekaBit to CentiByte
    /// </summary>
    /// <param name="val">quantity measured in DekaBit</param>
    /// <returns>quantity measured in CentiByte</returns>
    public static Quantity<double, CentiByte> ToCentiByte<T>(this BaseQuantity<T, DekaBit> val) where T:IConvertible {
        return new Quantity<double, CentiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-1)) * (1E2))
        );
    }
	/// <summary>
    /// Extension method to convert DekaBit to MilliByte
    /// </summary>
    /// <param name="val">quantity measured in DekaBit</param>
    /// <returns>quantity measured in MilliByte</returns>
    public static Quantity<double, MilliByte> ToMilliByte<T>(this BaseQuantity<T, DekaBit> val) where T:IConvertible {
        return new Quantity<double, MilliByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-1)) * (1E3))
        );
    }
	/// <summary>
    /// Extension method to convert DekaBit to MicroByte
    /// </summary>
    /// <param name="val">quantity measured in DekaBit</param>
    /// <returns>quantity measured in MicroByte</returns>
    public static Quantity<double, MicroByte> ToMicroByte<T>(this BaseQuantity<T, DekaBit> val) where T:IConvertible {
        return new Quantity<double, MicroByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-1)) * (1E6))
        );
    }
	/// <summary>
    /// Extension method to convert DekaBit to NanoByte
    /// </summary>
    /// <param name="val">quantity measured in DekaBit</param>
    /// <returns>quantity measured in NanoByte</returns>
    public static Quantity<double, NanoByte> ToNanoByte<T>(this BaseQuantity<T, DekaBit> val) where T:IConvertible {
        return new Quantity<double, NanoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-1)) * (1E9))
        );
    }
	/// <summary>
    /// Extension method to convert DekaBit to PicoByte
    /// </summary>
    /// <param name="val">quantity measured in DekaBit</param>
    /// <returns>quantity measured in PicoByte</returns>
    public static Quantity<double, PicoByte> ToPicoByte<T>(this BaseQuantity<T, DekaBit> val) where T:IConvertible {
        return new Quantity<double, PicoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-1)) * (1E12))
        );
    }
	/// <summary>
    /// Extension method to convert DekaBit to FemtoByte
    /// </summary>
    /// <param name="val">quantity measured in DekaBit</param>
    /// <returns>quantity measured in FemtoByte</returns>
    public static Quantity<double, FemtoByte> ToFemtoByte<T>(this BaseQuantity<T, DekaBit> val) where T:IConvertible {
        return new Quantity<double, FemtoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-1)) * (1E15))
        );
    }
	/// <summary>
    /// Extension method to convert DekaBit to AttoByte
    /// </summary>
    /// <param name="val">quantity measured in DekaBit</param>
    /// <returns>quantity measured in AttoByte</returns>
    public static Quantity<double, AttoByte> ToAttoByte<T>(this BaseQuantity<T, DekaBit> val) where T:IConvertible {
        return new Quantity<double, AttoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-1)) * (1E18))
        );
    }
	/// <summary>
    /// Extension method to convert DekaBit to ZeptoByte
    /// </summary>
    /// <param name="val">quantity measured in DekaBit</param>
    /// <returns>quantity measured in ZeptoByte</returns>
    public static Quantity<double, ZeptoByte> ToZeptoByte<T>(this BaseQuantity<T, DekaBit> val) where T:IConvertible {
        return new Quantity<double, ZeptoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-1)) * (1E21))
        );
    }
	/// <summary>
    /// Extension method to convert DekaBit to YoctoByte
    /// </summary>
    /// <param name="val">quantity measured in DekaBit</param>
    /// <returns>quantity measured in YoctoByte</returns>
    public static Quantity<double, YoctoByte> ToYoctoByte<T>(this BaseQuantity<T, DekaBit> val) where T:IConvertible {
        return new Quantity<double, YoctoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-1)) * (1E24))
        );
    }
	/// <summary>
    /// Extension method to convert DekaBit to YobiByte
    /// </summary>
    /// <param name="val">quantity measured in DekaBit</param>
    /// <returns>quantity measured in YobiByte</returns>
    public static Quantity<double, YobiByte> ToYobiByte<T>(this BaseQuantity<T, DekaBit> val) where T:IConvertible {
        return new Quantity<double, YobiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-1)) * (1.2089258e-24))
        );
    }
	/// <summary>
    /// Extension method to convert DekaBit to ZebiByte
    /// </summary>
    /// <param name="val">quantity measured in DekaBit</param>
    /// <returns>quantity measured in ZebiByte</returns>
    public static Quantity<double, ZebiByte> ToZebiByte<T>(this BaseQuantity<T, DekaBit> val) where T:IConvertible {
        return new Quantity<double, ZebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-1)) * (1.1805916e-21))
        );
    }
	/// <summary>
    /// Extension method to convert DekaBit to ExbiByte
    /// </summary>
    /// <param name="val">quantity measured in DekaBit</param>
    /// <returns>quantity measured in ExbiByte</returns>
    public static Quantity<double, ExbiByte> ToExbiByte<T>(this BaseQuantity<T, DekaBit> val) where T:IConvertible {
        return new Quantity<double, ExbiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-1)) * (1.1529215e-18))
        );
    }
	/// <summary>
    /// Extension method to convert DekaBit to PebiByte
    /// </summary>
    /// <param name="val">quantity measured in DekaBit</param>
    /// <returns>quantity measured in PebiByte</returns>
    public static Quantity<double, PebiByte> ToPebiByte<T>(this BaseQuantity<T, DekaBit> val) where T:IConvertible {
        return new Quantity<double, PebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-1)) * (1.1258999e-15))
        );
    }
	/// <summary>
    /// Extension method to convert DekaBit to TebiByte
    /// </summary>
    /// <param name="val">quantity measured in DekaBit</param>
    /// <returns>quantity measured in TebiByte</returns>
    public static Quantity<double, TebiByte> ToTebiByte<T>(this BaseQuantity<T, DekaBit> val) where T:IConvertible {
        return new Quantity<double, TebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-1)) * (1.0995116e-12))
        );
    }
	/// <summary>
    /// Extension method to convert DekaBit to GibiByte
    /// </summary>
    /// <param name="val">quantity measured in DekaBit</param>
    /// <returns>quantity measured in GibiByte</returns>
    public static Quantity<double, GibiByte> ToGibiByte<T>(this BaseQuantity<T, DekaBit> val) where T:IConvertible {
        return new Quantity<double, GibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-1)) * (1d/1073741824))
        );
    }
	/// <summary>
    /// Extension method to convert DekaBit to MebiByte
    /// </summary>
    /// <param name="val">quantity measured in DekaBit</param>
    /// <returns>quantity measured in MebiByte</returns>
    public static Quantity<double, MebiByte> ToMebiByte<T>(this BaseQuantity<T, DekaBit> val) where T:IConvertible {
        return new Quantity<double, MebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-1)) * (1d/1048576))
        );
    }
	/// <summary>
    /// Extension method to convert DekaBit to KibiByte
    /// </summary>
    /// <param name="val">quantity measured in DekaBit</param>
    /// <returns>quantity measured in KibiByte</returns>
    public static Quantity<double, KibiByte> ToKibiByte<T>(this BaseQuantity<T, DekaBit> val) where T:IConvertible {
        return new Quantity<double, KibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E-1)) * (1d/1024))
        );
    }
	/// <summary>
    /// Extension method to convert Byte to DeciBit
    /// </summary>
    /// <param name="val">quantity measured in Byte</param>
    /// <returns>quantity measured in DeciBit</returns>
    public static Quantity<double, DeciBit> ToDeciBit<T>(this BaseQuantity<T, Byte> val) where T:IConvertible {
        return new Quantity<double, DeciBit>(
            Convert.ToDouble(val.Value) * (8*1E1)
        );
    }
	/// <summary>
    /// Extension method to convert DeciBit to Byte
    /// </summary>
    /// <param name="val">quantity measured in DeciBit</param>
    /// <returns>quantity measured in Byte</returns>
    public static Quantity<double, Byte> ToByte<T>(this BaseQuantity<T, DeciBit> val) where T:IConvertible {
        return new Quantity<double, Byte>(
            Convert.ToDouble(val.Value) * (1d/(8*1E1))
        );
    }
	/// <summary>
    /// Extension method to convert DeciBit to Bit
    /// </summary>
    /// <param name="val">quantity measured in DeciBit</param>
    /// <returns>quantity measured in Bit</returns>
    public static Quantity<double, Bit> ToBit<T>(this BaseQuantity<T, DeciBit> val) where T:IConvertible {
        return new Quantity<double, Bit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E1)) * (8))
        );
    }
	/// <summary>
    /// Extension method to convert DeciBit to YottaBit
    /// </summary>
    /// <param name="val">quantity measured in DeciBit</param>
    /// <returns>quantity measured in YottaBit</returns>
    public static Quantity<double, YottaBit> ToYottaBit<T>(this BaseQuantity<T, DeciBit> val) where T:IConvertible {
        return new Quantity<double, YottaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E1)) * (8*1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert DeciBit to ZettaBit
    /// </summary>
    /// <param name="val">quantity measured in DeciBit</param>
    /// <returns>quantity measured in ZettaBit</returns>
    public static Quantity<double, ZettaBit> ToZettaBit<T>(this BaseQuantity<T, DeciBit> val) where T:IConvertible {
        return new Quantity<double, ZettaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E1)) * (8*1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert DeciBit to ExaBit
    /// </summary>
    /// <param name="val">quantity measured in DeciBit</param>
    /// <returns>quantity measured in ExaBit</returns>
    public static Quantity<double, ExaBit> ToExaBit<T>(this BaseQuantity<T, DeciBit> val) where T:IConvertible {
        return new Quantity<double, ExaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E1)) * (8*1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert DeciBit to PetaBit
    /// </summary>
    /// <param name="val">quantity measured in DeciBit</param>
    /// <returns>quantity measured in PetaBit</returns>
    public static Quantity<double, PetaBit> ToPetaBit<T>(this BaseQuantity<T, DeciBit> val) where T:IConvertible {
        return new Quantity<double, PetaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E1)) * (8*1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert DeciBit to TeraBit
    /// </summary>
    /// <param name="val">quantity measured in DeciBit</param>
    /// <returns>quantity measured in TeraBit</returns>
    public static Quantity<double, TeraBit> ToTeraBit<T>(this BaseQuantity<T, DeciBit> val) where T:IConvertible {
        return new Quantity<double, TeraBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E1)) * (8*1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert DeciBit to GigaBit
    /// </summary>
    /// <param name="val">quantity measured in DeciBit</param>
    /// <returns>quantity measured in GigaBit</returns>
    public static Quantity<double, GigaBit> ToGigaBit<T>(this BaseQuantity<T, DeciBit> val) where T:IConvertible {
        return new Quantity<double, GigaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E1)) * (8*1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert DeciBit to MegaBit
    /// </summary>
    /// <param name="val">quantity measured in DeciBit</param>
    /// <returns>quantity measured in MegaBit</returns>
    public static Quantity<double, MegaBit> ToMegaBit<T>(this BaseQuantity<T, DeciBit> val) where T:IConvertible {
        return new Quantity<double, MegaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E1)) * (8*1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert DeciBit to KiloBit
    /// </summary>
    /// <param name="val">quantity measured in DeciBit</param>
    /// <returns>quantity measured in KiloBit</returns>
    public static Quantity<double, KiloBit> ToKiloBit<T>(this BaseQuantity<T, DeciBit> val) where T:IConvertible {
        return new Quantity<double, KiloBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E1)) * (8*1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert DeciBit to HectoBit
    /// </summary>
    /// <param name="val">quantity measured in DeciBit</param>
    /// <returns>quantity measured in HectoBit</returns>
    public static Quantity<double, HectoBit> ToHectoBit<T>(this BaseQuantity<T, DeciBit> val) where T:IConvertible {
        return new Quantity<double, HectoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E1)) * (8*1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert DeciBit to DekaBit
    /// </summary>
    /// <param name="val">quantity measured in DeciBit</param>
    /// <returns>quantity measured in DekaBit</returns>
    public static Quantity<double, DekaBit> ToDekaBit<T>(this BaseQuantity<T, DeciBit> val) where T:IConvertible {
        return new Quantity<double, DekaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E1)) * (8*1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert DeciBit to CentiBit
    /// </summary>
    /// <param name="val">quantity measured in DeciBit</param>
    /// <returns>quantity measured in CentiBit</returns>
    public static Quantity<double, CentiBit> ToCentiBit<T>(this BaseQuantity<T, DeciBit> val) where T:IConvertible {
        return new Quantity<double, CentiBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E1)) * (8*1E2))
        );
    }
	/// <summary>
    /// Extension method to convert DeciBit to MilliBit
    /// </summary>
    /// <param name="val">quantity measured in DeciBit</param>
    /// <returns>quantity measured in MilliBit</returns>
    public static Quantity<double, MilliBit> ToMilliBit<T>(this BaseQuantity<T, DeciBit> val) where T:IConvertible {
        return new Quantity<double, MilliBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E1)) * (8*1E3))
        );
    }
	/// <summary>
    /// Extension method to convert DeciBit to MicroBit
    /// </summary>
    /// <param name="val">quantity measured in DeciBit</param>
    /// <returns>quantity measured in MicroBit</returns>
    public static Quantity<double, MicroBit> ToMicroBit<T>(this BaseQuantity<T, DeciBit> val) where T:IConvertible {
        return new Quantity<double, MicroBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E1)) * (8*1E6))
        );
    }
	/// <summary>
    /// Extension method to convert DeciBit to NanoBit
    /// </summary>
    /// <param name="val">quantity measured in DeciBit</param>
    /// <returns>quantity measured in NanoBit</returns>
    public static Quantity<double, NanoBit> ToNanoBit<T>(this BaseQuantity<T, DeciBit> val) where T:IConvertible {
        return new Quantity<double, NanoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E1)) * (8*1E9))
        );
    }
	/// <summary>
    /// Extension method to convert DeciBit to PicoBit
    /// </summary>
    /// <param name="val">quantity measured in DeciBit</param>
    /// <returns>quantity measured in PicoBit</returns>
    public static Quantity<double, PicoBit> ToPicoBit<T>(this BaseQuantity<T, DeciBit> val) where T:IConvertible {
        return new Quantity<double, PicoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E1)) * (8*1E12))
        );
    }
	/// <summary>
    /// Extension method to convert DeciBit to FemtoBit
    /// </summary>
    /// <param name="val">quantity measured in DeciBit</param>
    /// <returns>quantity measured in FemtoBit</returns>
    public static Quantity<double, FemtoBit> ToFemtoBit<T>(this BaseQuantity<T, DeciBit> val) where T:IConvertible {
        return new Quantity<double, FemtoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E1)) * (8*1E15))
        );
    }
	/// <summary>
    /// Extension method to convert DeciBit to AttoBit
    /// </summary>
    /// <param name="val">quantity measured in DeciBit</param>
    /// <returns>quantity measured in AttoBit</returns>
    public static Quantity<double, AttoBit> ToAttoBit<T>(this BaseQuantity<T, DeciBit> val) where T:IConvertible {
        return new Quantity<double, AttoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E1)) * (8*1E18))
        );
    }
	/// <summary>
    /// Extension method to convert DeciBit to ZeptoBit
    /// </summary>
    /// <param name="val">quantity measured in DeciBit</param>
    /// <returns>quantity measured in ZeptoBit</returns>
    public static Quantity<double, ZeptoBit> ToZeptoBit<T>(this BaseQuantity<T, DeciBit> val) where T:IConvertible {
        return new Quantity<double, ZeptoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E1)) * (8*1E21))
        );
    }
	/// <summary>
    /// Extension method to convert DeciBit to YoctoBit
    /// </summary>
    /// <param name="val">quantity measured in DeciBit</param>
    /// <returns>quantity measured in YoctoBit</returns>
    public static Quantity<double, YoctoBit> ToYoctoBit<T>(this BaseQuantity<T, DeciBit> val) where T:IConvertible {
        return new Quantity<double, YoctoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E1)) * (8*1E24))
        );
    }
	/// <summary>
    /// Extension method to convert DeciBit to YottaByte
    /// </summary>
    /// <param name="val">quantity measured in DeciBit</param>
    /// <returns>quantity measured in YottaByte</returns>
    public static Quantity<double, YottaByte> ToYottaByte<T>(this BaseQuantity<T, DeciBit> val) where T:IConvertible {
        return new Quantity<double, YottaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E1)) * (1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert DeciBit to ZettaByte
    /// </summary>
    /// <param name="val">quantity measured in DeciBit</param>
    /// <returns>quantity measured in ZettaByte</returns>
    public static Quantity<double, ZettaByte> ToZettaByte<T>(this BaseQuantity<T, DeciBit> val) where T:IConvertible {
        return new Quantity<double, ZettaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E1)) * (1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert DeciBit to ExaByte
    /// </summary>
    /// <param name="val">quantity measured in DeciBit</param>
    /// <returns>quantity measured in ExaByte</returns>
    public static Quantity<double, ExaByte> ToExaByte<T>(this BaseQuantity<T, DeciBit> val) where T:IConvertible {
        return new Quantity<double, ExaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E1)) * (1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert DeciBit to PetaByte
    /// </summary>
    /// <param name="val">quantity measured in DeciBit</param>
    /// <returns>quantity measured in PetaByte</returns>
    public static Quantity<double, PetaByte> ToPetaByte<T>(this BaseQuantity<T, DeciBit> val) where T:IConvertible {
        return new Quantity<double, PetaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E1)) * (1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert DeciBit to TeraByte
    /// </summary>
    /// <param name="val">quantity measured in DeciBit</param>
    /// <returns>quantity measured in TeraByte</returns>
    public static Quantity<double, TeraByte> ToTeraByte<T>(this BaseQuantity<T, DeciBit> val) where T:IConvertible {
        return new Quantity<double, TeraByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E1)) * (1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert DeciBit to GigaByte
    /// </summary>
    /// <param name="val">quantity measured in DeciBit</param>
    /// <returns>quantity measured in GigaByte</returns>
    public static Quantity<double, GigaByte> ToGigaByte<T>(this BaseQuantity<T, DeciBit> val) where T:IConvertible {
        return new Quantity<double, GigaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E1)) * (1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert DeciBit to MegaByte
    /// </summary>
    /// <param name="val">quantity measured in DeciBit</param>
    /// <returns>quantity measured in MegaByte</returns>
    public static Quantity<double, MegaByte> ToMegaByte<T>(this BaseQuantity<T, DeciBit> val) where T:IConvertible {
        return new Quantity<double, MegaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E1)) * (1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert DeciBit to KiloByte
    /// </summary>
    /// <param name="val">quantity measured in DeciBit</param>
    /// <returns>quantity measured in KiloByte</returns>
    public static Quantity<double, KiloByte> ToKiloByte<T>(this BaseQuantity<T, DeciBit> val) where T:IConvertible {
        return new Quantity<double, KiloByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E1)) * (1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert DeciBit to HectoByte
    /// </summary>
    /// <param name="val">quantity measured in DeciBit</param>
    /// <returns>quantity measured in HectoByte</returns>
    public static Quantity<double, HectoByte> ToHectoByte<T>(this BaseQuantity<T, DeciBit> val) where T:IConvertible {
        return new Quantity<double, HectoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E1)) * (1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert DeciBit to DekaByte
    /// </summary>
    /// <param name="val">quantity measured in DeciBit</param>
    /// <returns>quantity measured in DekaByte</returns>
    public static Quantity<double, DekaByte> ToDekaByte<T>(this BaseQuantity<T, DeciBit> val) where T:IConvertible {
        return new Quantity<double, DekaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E1)) * (1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert DeciBit to DeciByte
    /// </summary>
    /// <param name="val">quantity measured in DeciBit</param>
    /// <returns>quantity measured in DeciByte</returns>
    public static Quantity<double, DeciByte> ToDeciByte<T>(this BaseQuantity<T, DeciBit> val) where T:IConvertible {
        return new Quantity<double, DeciByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E1)) * (1E1))
        );
    }
	/// <summary>
    /// Extension method to convert DeciBit to CentiByte
    /// </summary>
    /// <param name="val">quantity measured in DeciBit</param>
    /// <returns>quantity measured in CentiByte</returns>
    public static Quantity<double, CentiByte> ToCentiByte<T>(this BaseQuantity<T, DeciBit> val) where T:IConvertible {
        return new Quantity<double, CentiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E1)) * (1E2))
        );
    }
	/// <summary>
    /// Extension method to convert DeciBit to MilliByte
    /// </summary>
    /// <param name="val">quantity measured in DeciBit</param>
    /// <returns>quantity measured in MilliByte</returns>
    public static Quantity<double, MilliByte> ToMilliByte<T>(this BaseQuantity<T, DeciBit> val) where T:IConvertible {
        return new Quantity<double, MilliByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E1)) * (1E3))
        );
    }
	/// <summary>
    /// Extension method to convert DeciBit to MicroByte
    /// </summary>
    /// <param name="val">quantity measured in DeciBit</param>
    /// <returns>quantity measured in MicroByte</returns>
    public static Quantity<double, MicroByte> ToMicroByte<T>(this BaseQuantity<T, DeciBit> val) where T:IConvertible {
        return new Quantity<double, MicroByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E1)) * (1E6))
        );
    }
	/// <summary>
    /// Extension method to convert DeciBit to NanoByte
    /// </summary>
    /// <param name="val">quantity measured in DeciBit</param>
    /// <returns>quantity measured in NanoByte</returns>
    public static Quantity<double, NanoByte> ToNanoByte<T>(this BaseQuantity<T, DeciBit> val) where T:IConvertible {
        return new Quantity<double, NanoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E1)) * (1E9))
        );
    }
	/// <summary>
    /// Extension method to convert DeciBit to PicoByte
    /// </summary>
    /// <param name="val">quantity measured in DeciBit</param>
    /// <returns>quantity measured in PicoByte</returns>
    public static Quantity<double, PicoByte> ToPicoByte<T>(this BaseQuantity<T, DeciBit> val) where T:IConvertible {
        return new Quantity<double, PicoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E1)) * (1E12))
        );
    }
	/// <summary>
    /// Extension method to convert DeciBit to FemtoByte
    /// </summary>
    /// <param name="val">quantity measured in DeciBit</param>
    /// <returns>quantity measured in FemtoByte</returns>
    public static Quantity<double, FemtoByte> ToFemtoByte<T>(this BaseQuantity<T, DeciBit> val) where T:IConvertible {
        return new Quantity<double, FemtoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E1)) * (1E15))
        );
    }
	/// <summary>
    /// Extension method to convert DeciBit to AttoByte
    /// </summary>
    /// <param name="val">quantity measured in DeciBit</param>
    /// <returns>quantity measured in AttoByte</returns>
    public static Quantity<double, AttoByte> ToAttoByte<T>(this BaseQuantity<T, DeciBit> val) where T:IConvertible {
        return new Quantity<double, AttoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E1)) * (1E18))
        );
    }
	/// <summary>
    /// Extension method to convert DeciBit to ZeptoByte
    /// </summary>
    /// <param name="val">quantity measured in DeciBit</param>
    /// <returns>quantity measured in ZeptoByte</returns>
    public static Quantity<double, ZeptoByte> ToZeptoByte<T>(this BaseQuantity<T, DeciBit> val) where T:IConvertible {
        return new Quantity<double, ZeptoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E1)) * (1E21))
        );
    }
	/// <summary>
    /// Extension method to convert DeciBit to YoctoByte
    /// </summary>
    /// <param name="val">quantity measured in DeciBit</param>
    /// <returns>quantity measured in YoctoByte</returns>
    public static Quantity<double, YoctoByte> ToYoctoByte<T>(this BaseQuantity<T, DeciBit> val) where T:IConvertible {
        return new Quantity<double, YoctoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E1)) * (1E24))
        );
    }
	/// <summary>
    /// Extension method to convert DeciBit to YobiByte
    /// </summary>
    /// <param name="val">quantity measured in DeciBit</param>
    /// <returns>quantity measured in YobiByte</returns>
    public static Quantity<double, YobiByte> ToYobiByte<T>(this BaseQuantity<T, DeciBit> val) where T:IConvertible {
        return new Quantity<double, YobiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E1)) * (1.2089258e-24))
        );
    }
	/// <summary>
    /// Extension method to convert DeciBit to ZebiByte
    /// </summary>
    /// <param name="val">quantity measured in DeciBit</param>
    /// <returns>quantity measured in ZebiByte</returns>
    public static Quantity<double, ZebiByte> ToZebiByte<T>(this BaseQuantity<T, DeciBit> val) where T:IConvertible {
        return new Quantity<double, ZebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E1)) * (1.1805916e-21))
        );
    }
	/// <summary>
    /// Extension method to convert DeciBit to ExbiByte
    /// </summary>
    /// <param name="val">quantity measured in DeciBit</param>
    /// <returns>quantity measured in ExbiByte</returns>
    public static Quantity<double, ExbiByte> ToExbiByte<T>(this BaseQuantity<T, DeciBit> val) where T:IConvertible {
        return new Quantity<double, ExbiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E1)) * (1.1529215e-18))
        );
    }
	/// <summary>
    /// Extension method to convert DeciBit to PebiByte
    /// </summary>
    /// <param name="val">quantity measured in DeciBit</param>
    /// <returns>quantity measured in PebiByte</returns>
    public static Quantity<double, PebiByte> ToPebiByte<T>(this BaseQuantity<T, DeciBit> val) where T:IConvertible {
        return new Quantity<double, PebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E1)) * (1.1258999e-15))
        );
    }
	/// <summary>
    /// Extension method to convert DeciBit to TebiByte
    /// </summary>
    /// <param name="val">quantity measured in DeciBit</param>
    /// <returns>quantity measured in TebiByte</returns>
    public static Quantity<double, TebiByte> ToTebiByte<T>(this BaseQuantity<T, DeciBit> val) where T:IConvertible {
        return new Quantity<double, TebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E1)) * (1.0995116e-12))
        );
    }
	/// <summary>
    /// Extension method to convert DeciBit to GibiByte
    /// </summary>
    /// <param name="val">quantity measured in DeciBit</param>
    /// <returns>quantity measured in GibiByte</returns>
    public static Quantity<double, GibiByte> ToGibiByte<T>(this BaseQuantity<T, DeciBit> val) where T:IConvertible {
        return new Quantity<double, GibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E1)) * (1d/1073741824))
        );
    }
	/// <summary>
    /// Extension method to convert DeciBit to MebiByte
    /// </summary>
    /// <param name="val">quantity measured in DeciBit</param>
    /// <returns>quantity measured in MebiByte</returns>
    public static Quantity<double, MebiByte> ToMebiByte<T>(this BaseQuantity<T, DeciBit> val) where T:IConvertible {
        return new Quantity<double, MebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E1)) * (1d/1048576))
        );
    }
	/// <summary>
    /// Extension method to convert DeciBit to KibiByte
    /// </summary>
    /// <param name="val">quantity measured in DeciBit</param>
    /// <returns>quantity measured in KibiByte</returns>
    public static Quantity<double, KibiByte> ToKibiByte<T>(this BaseQuantity<T, DeciBit> val) where T:IConvertible {
        return new Quantity<double, KibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E1)) * (1d/1024))
        );
    }
	/// <summary>
    /// Extension method to convert Byte to CentiBit
    /// </summary>
    /// <param name="val">quantity measured in Byte</param>
    /// <returns>quantity measured in CentiBit</returns>
    public static Quantity<double, CentiBit> ToCentiBit<T>(this BaseQuantity<T, Byte> val) where T:IConvertible {
        return new Quantity<double, CentiBit>(
            Convert.ToDouble(val.Value) * (8*1E2)
        );
    }
	/// <summary>
    /// Extension method to convert CentiBit to Byte
    /// </summary>
    /// <param name="val">quantity measured in CentiBit</param>
    /// <returns>quantity measured in Byte</returns>
    public static Quantity<double, Byte> ToByte<T>(this BaseQuantity<T, CentiBit> val) where T:IConvertible {
        return new Quantity<double, Byte>(
            Convert.ToDouble(val.Value) * (1d/(8*1E2))
        );
    }
	/// <summary>
    /// Extension method to convert CentiBit to Bit
    /// </summary>
    /// <param name="val">quantity measured in CentiBit</param>
    /// <returns>quantity measured in Bit</returns>
    public static Quantity<double, Bit> ToBit<T>(this BaseQuantity<T, CentiBit> val) where T:IConvertible {
        return new Quantity<double, Bit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E2)) * (8))
        );
    }
	/// <summary>
    /// Extension method to convert CentiBit to YottaBit
    /// </summary>
    /// <param name="val">quantity measured in CentiBit</param>
    /// <returns>quantity measured in YottaBit</returns>
    public static Quantity<double, YottaBit> ToYottaBit<T>(this BaseQuantity<T, CentiBit> val) where T:IConvertible {
        return new Quantity<double, YottaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E2)) * (8*1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert CentiBit to ZettaBit
    /// </summary>
    /// <param name="val">quantity measured in CentiBit</param>
    /// <returns>quantity measured in ZettaBit</returns>
    public static Quantity<double, ZettaBit> ToZettaBit<T>(this BaseQuantity<T, CentiBit> val) where T:IConvertible {
        return new Quantity<double, ZettaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E2)) * (8*1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert CentiBit to ExaBit
    /// </summary>
    /// <param name="val">quantity measured in CentiBit</param>
    /// <returns>quantity measured in ExaBit</returns>
    public static Quantity<double, ExaBit> ToExaBit<T>(this BaseQuantity<T, CentiBit> val) where T:IConvertible {
        return new Quantity<double, ExaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E2)) * (8*1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert CentiBit to PetaBit
    /// </summary>
    /// <param name="val">quantity measured in CentiBit</param>
    /// <returns>quantity measured in PetaBit</returns>
    public static Quantity<double, PetaBit> ToPetaBit<T>(this BaseQuantity<T, CentiBit> val) where T:IConvertible {
        return new Quantity<double, PetaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E2)) * (8*1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert CentiBit to TeraBit
    /// </summary>
    /// <param name="val">quantity measured in CentiBit</param>
    /// <returns>quantity measured in TeraBit</returns>
    public static Quantity<double, TeraBit> ToTeraBit<T>(this BaseQuantity<T, CentiBit> val) where T:IConvertible {
        return new Quantity<double, TeraBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E2)) * (8*1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert CentiBit to GigaBit
    /// </summary>
    /// <param name="val">quantity measured in CentiBit</param>
    /// <returns>quantity measured in GigaBit</returns>
    public static Quantity<double, GigaBit> ToGigaBit<T>(this BaseQuantity<T, CentiBit> val) where T:IConvertible {
        return new Quantity<double, GigaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E2)) * (8*1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert CentiBit to MegaBit
    /// </summary>
    /// <param name="val">quantity measured in CentiBit</param>
    /// <returns>quantity measured in MegaBit</returns>
    public static Quantity<double, MegaBit> ToMegaBit<T>(this BaseQuantity<T, CentiBit> val) where T:IConvertible {
        return new Quantity<double, MegaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E2)) * (8*1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert CentiBit to KiloBit
    /// </summary>
    /// <param name="val">quantity measured in CentiBit</param>
    /// <returns>quantity measured in KiloBit</returns>
    public static Quantity<double, KiloBit> ToKiloBit<T>(this BaseQuantity<T, CentiBit> val) where T:IConvertible {
        return new Quantity<double, KiloBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E2)) * (8*1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert CentiBit to HectoBit
    /// </summary>
    /// <param name="val">quantity measured in CentiBit</param>
    /// <returns>quantity measured in HectoBit</returns>
    public static Quantity<double, HectoBit> ToHectoBit<T>(this BaseQuantity<T, CentiBit> val) where T:IConvertible {
        return new Quantity<double, HectoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E2)) * (8*1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert CentiBit to DekaBit
    /// </summary>
    /// <param name="val">quantity measured in CentiBit</param>
    /// <returns>quantity measured in DekaBit</returns>
    public static Quantity<double, DekaBit> ToDekaBit<T>(this BaseQuantity<T, CentiBit> val) where T:IConvertible {
        return new Quantity<double, DekaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E2)) * (8*1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert CentiBit to DeciBit
    /// </summary>
    /// <param name="val">quantity measured in CentiBit</param>
    /// <returns>quantity measured in DeciBit</returns>
    public static Quantity<double, DeciBit> ToDeciBit<T>(this BaseQuantity<T, CentiBit> val) where T:IConvertible {
        return new Quantity<double, DeciBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E2)) * (8*1E1))
        );
    }
	/// <summary>
    /// Extension method to convert CentiBit to MilliBit
    /// </summary>
    /// <param name="val">quantity measured in CentiBit</param>
    /// <returns>quantity measured in MilliBit</returns>
    public static Quantity<double, MilliBit> ToMilliBit<T>(this BaseQuantity<T, CentiBit> val) where T:IConvertible {
        return new Quantity<double, MilliBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E2)) * (8*1E3))
        );
    }
	/// <summary>
    /// Extension method to convert CentiBit to MicroBit
    /// </summary>
    /// <param name="val">quantity measured in CentiBit</param>
    /// <returns>quantity measured in MicroBit</returns>
    public static Quantity<double, MicroBit> ToMicroBit<T>(this BaseQuantity<T, CentiBit> val) where T:IConvertible {
        return new Quantity<double, MicroBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E2)) * (8*1E6))
        );
    }
	/// <summary>
    /// Extension method to convert CentiBit to NanoBit
    /// </summary>
    /// <param name="val">quantity measured in CentiBit</param>
    /// <returns>quantity measured in NanoBit</returns>
    public static Quantity<double, NanoBit> ToNanoBit<T>(this BaseQuantity<T, CentiBit> val) where T:IConvertible {
        return new Quantity<double, NanoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E2)) * (8*1E9))
        );
    }
	/// <summary>
    /// Extension method to convert CentiBit to PicoBit
    /// </summary>
    /// <param name="val">quantity measured in CentiBit</param>
    /// <returns>quantity measured in PicoBit</returns>
    public static Quantity<double, PicoBit> ToPicoBit<T>(this BaseQuantity<T, CentiBit> val) where T:IConvertible {
        return new Quantity<double, PicoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E2)) * (8*1E12))
        );
    }
	/// <summary>
    /// Extension method to convert CentiBit to FemtoBit
    /// </summary>
    /// <param name="val">quantity measured in CentiBit</param>
    /// <returns>quantity measured in FemtoBit</returns>
    public static Quantity<double, FemtoBit> ToFemtoBit<T>(this BaseQuantity<T, CentiBit> val) where T:IConvertible {
        return new Quantity<double, FemtoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E2)) * (8*1E15))
        );
    }
	/// <summary>
    /// Extension method to convert CentiBit to AttoBit
    /// </summary>
    /// <param name="val">quantity measured in CentiBit</param>
    /// <returns>quantity measured in AttoBit</returns>
    public static Quantity<double, AttoBit> ToAttoBit<T>(this BaseQuantity<T, CentiBit> val) where T:IConvertible {
        return new Quantity<double, AttoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E2)) * (8*1E18))
        );
    }
	/// <summary>
    /// Extension method to convert CentiBit to ZeptoBit
    /// </summary>
    /// <param name="val">quantity measured in CentiBit</param>
    /// <returns>quantity measured in ZeptoBit</returns>
    public static Quantity<double, ZeptoBit> ToZeptoBit<T>(this BaseQuantity<T, CentiBit> val) where T:IConvertible {
        return new Quantity<double, ZeptoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E2)) * (8*1E21))
        );
    }
	/// <summary>
    /// Extension method to convert CentiBit to YoctoBit
    /// </summary>
    /// <param name="val">quantity measured in CentiBit</param>
    /// <returns>quantity measured in YoctoBit</returns>
    public static Quantity<double, YoctoBit> ToYoctoBit<T>(this BaseQuantity<T, CentiBit> val) where T:IConvertible {
        return new Quantity<double, YoctoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E2)) * (8*1E24))
        );
    }
	/// <summary>
    /// Extension method to convert CentiBit to YottaByte
    /// </summary>
    /// <param name="val">quantity measured in CentiBit</param>
    /// <returns>quantity measured in YottaByte</returns>
    public static Quantity<double, YottaByte> ToYottaByte<T>(this BaseQuantity<T, CentiBit> val) where T:IConvertible {
        return new Quantity<double, YottaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E2)) * (1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert CentiBit to ZettaByte
    /// </summary>
    /// <param name="val">quantity measured in CentiBit</param>
    /// <returns>quantity measured in ZettaByte</returns>
    public static Quantity<double, ZettaByte> ToZettaByte<T>(this BaseQuantity<T, CentiBit> val) where T:IConvertible {
        return new Quantity<double, ZettaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E2)) * (1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert CentiBit to ExaByte
    /// </summary>
    /// <param name="val">quantity measured in CentiBit</param>
    /// <returns>quantity measured in ExaByte</returns>
    public static Quantity<double, ExaByte> ToExaByte<T>(this BaseQuantity<T, CentiBit> val) where T:IConvertible {
        return new Quantity<double, ExaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E2)) * (1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert CentiBit to PetaByte
    /// </summary>
    /// <param name="val">quantity measured in CentiBit</param>
    /// <returns>quantity measured in PetaByte</returns>
    public static Quantity<double, PetaByte> ToPetaByte<T>(this BaseQuantity<T, CentiBit> val) where T:IConvertible {
        return new Quantity<double, PetaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E2)) * (1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert CentiBit to TeraByte
    /// </summary>
    /// <param name="val">quantity measured in CentiBit</param>
    /// <returns>quantity measured in TeraByte</returns>
    public static Quantity<double, TeraByte> ToTeraByte<T>(this BaseQuantity<T, CentiBit> val) where T:IConvertible {
        return new Quantity<double, TeraByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E2)) * (1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert CentiBit to GigaByte
    /// </summary>
    /// <param name="val">quantity measured in CentiBit</param>
    /// <returns>quantity measured in GigaByte</returns>
    public static Quantity<double, GigaByte> ToGigaByte<T>(this BaseQuantity<T, CentiBit> val) where T:IConvertible {
        return new Quantity<double, GigaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E2)) * (1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert CentiBit to MegaByte
    /// </summary>
    /// <param name="val">quantity measured in CentiBit</param>
    /// <returns>quantity measured in MegaByte</returns>
    public static Quantity<double, MegaByte> ToMegaByte<T>(this BaseQuantity<T, CentiBit> val) where T:IConvertible {
        return new Quantity<double, MegaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E2)) * (1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert CentiBit to KiloByte
    /// </summary>
    /// <param name="val">quantity measured in CentiBit</param>
    /// <returns>quantity measured in KiloByte</returns>
    public static Quantity<double, KiloByte> ToKiloByte<T>(this BaseQuantity<T, CentiBit> val) where T:IConvertible {
        return new Quantity<double, KiloByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E2)) * (1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert CentiBit to HectoByte
    /// </summary>
    /// <param name="val">quantity measured in CentiBit</param>
    /// <returns>quantity measured in HectoByte</returns>
    public static Quantity<double, HectoByte> ToHectoByte<T>(this BaseQuantity<T, CentiBit> val) where T:IConvertible {
        return new Quantity<double, HectoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E2)) * (1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert CentiBit to DekaByte
    /// </summary>
    /// <param name="val">quantity measured in CentiBit</param>
    /// <returns>quantity measured in DekaByte</returns>
    public static Quantity<double, DekaByte> ToDekaByte<T>(this BaseQuantity<T, CentiBit> val) where T:IConvertible {
        return new Quantity<double, DekaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E2)) * (1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert CentiBit to DeciByte
    /// </summary>
    /// <param name="val">quantity measured in CentiBit</param>
    /// <returns>quantity measured in DeciByte</returns>
    public static Quantity<double, DeciByte> ToDeciByte<T>(this BaseQuantity<T, CentiBit> val) where T:IConvertible {
        return new Quantity<double, DeciByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E2)) * (1E1))
        );
    }
	/// <summary>
    /// Extension method to convert CentiBit to CentiByte
    /// </summary>
    /// <param name="val">quantity measured in CentiBit</param>
    /// <returns>quantity measured in CentiByte</returns>
    public static Quantity<double, CentiByte> ToCentiByte<T>(this BaseQuantity<T, CentiBit> val) where T:IConvertible {
        return new Quantity<double, CentiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E2)) * (1E2))
        );
    }
	/// <summary>
    /// Extension method to convert CentiBit to MilliByte
    /// </summary>
    /// <param name="val">quantity measured in CentiBit</param>
    /// <returns>quantity measured in MilliByte</returns>
    public static Quantity<double, MilliByte> ToMilliByte<T>(this BaseQuantity<T, CentiBit> val) where T:IConvertible {
        return new Quantity<double, MilliByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E2)) * (1E3))
        );
    }
	/// <summary>
    /// Extension method to convert CentiBit to MicroByte
    /// </summary>
    /// <param name="val">quantity measured in CentiBit</param>
    /// <returns>quantity measured in MicroByte</returns>
    public static Quantity<double, MicroByte> ToMicroByte<T>(this BaseQuantity<T, CentiBit> val) where T:IConvertible {
        return new Quantity<double, MicroByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E2)) * (1E6))
        );
    }
	/// <summary>
    /// Extension method to convert CentiBit to NanoByte
    /// </summary>
    /// <param name="val">quantity measured in CentiBit</param>
    /// <returns>quantity measured in NanoByte</returns>
    public static Quantity<double, NanoByte> ToNanoByte<T>(this BaseQuantity<T, CentiBit> val) where T:IConvertible {
        return new Quantity<double, NanoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E2)) * (1E9))
        );
    }
	/// <summary>
    /// Extension method to convert CentiBit to PicoByte
    /// </summary>
    /// <param name="val">quantity measured in CentiBit</param>
    /// <returns>quantity measured in PicoByte</returns>
    public static Quantity<double, PicoByte> ToPicoByte<T>(this BaseQuantity<T, CentiBit> val) where T:IConvertible {
        return new Quantity<double, PicoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E2)) * (1E12))
        );
    }
	/// <summary>
    /// Extension method to convert CentiBit to FemtoByte
    /// </summary>
    /// <param name="val">quantity measured in CentiBit</param>
    /// <returns>quantity measured in FemtoByte</returns>
    public static Quantity<double, FemtoByte> ToFemtoByte<T>(this BaseQuantity<T, CentiBit> val) where T:IConvertible {
        return new Quantity<double, FemtoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E2)) * (1E15))
        );
    }
	/// <summary>
    /// Extension method to convert CentiBit to AttoByte
    /// </summary>
    /// <param name="val">quantity measured in CentiBit</param>
    /// <returns>quantity measured in AttoByte</returns>
    public static Quantity<double, AttoByte> ToAttoByte<T>(this BaseQuantity<T, CentiBit> val) where T:IConvertible {
        return new Quantity<double, AttoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E2)) * (1E18))
        );
    }
	/// <summary>
    /// Extension method to convert CentiBit to ZeptoByte
    /// </summary>
    /// <param name="val">quantity measured in CentiBit</param>
    /// <returns>quantity measured in ZeptoByte</returns>
    public static Quantity<double, ZeptoByte> ToZeptoByte<T>(this BaseQuantity<T, CentiBit> val) where T:IConvertible {
        return new Quantity<double, ZeptoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E2)) * (1E21))
        );
    }
	/// <summary>
    /// Extension method to convert CentiBit to YoctoByte
    /// </summary>
    /// <param name="val">quantity measured in CentiBit</param>
    /// <returns>quantity measured in YoctoByte</returns>
    public static Quantity<double, YoctoByte> ToYoctoByte<T>(this BaseQuantity<T, CentiBit> val) where T:IConvertible {
        return new Quantity<double, YoctoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E2)) * (1E24))
        );
    }
	/// <summary>
    /// Extension method to convert CentiBit to YobiByte
    /// </summary>
    /// <param name="val">quantity measured in CentiBit</param>
    /// <returns>quantity measured in YobiByte</returns>
    public static Quantity<double, YobiByte> ToYobiByte<T>(this BaseQuantity<T, CentiBit> val) where T:IConvertible {
        return new Quantity<double, YobiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E2)) * (1.2089258e-24))
        );
    }
	/// <summary>
    /// Extension method to convert CentiBit to ZebiByte
    /// </summary>
    /// <param name="val">quantity measured in CentiBit</param>
    /// <returns>quantity measured in ZebiByte</returns>
    public static Quantity<double, ZebiByte> ToZebiByte<T>(this BaseQuantity<T, CentiBit> val) where T:IConvertible {
        return new Quantity<double, ZebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E2)) * (1.1805916e-21))
        );
    }
	/// <summary>
    /// Extension method to convert CentiBit to ExbiByte
    /// </summary>
    /// <param name="val">quantity measured in CentiBit</param>
    /// <returns>quantity measured in ExbiByte</returns>
    public static Quantity<double, ExbiByte> ToExbiByte<T>(this BaseQuantity<T, CentiBit> val) where T:IConvertible {
        return new Quantity<double, ExbiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E2)) * (1.1529215e-18))
        );
    }
	/// <summary>
    /// Extension method to convert CentiBit to PebiByte
    /// </summary>
    /// <param name="val">quantity measured in CentiBit</param>
    /// <returns>quantity measured in PebiByte</returns>
    public static Quantity<double, PebiByte> ToPebiByte<T>(this BaseQuantity<T, CentiBit> val) where T:IConvertible {
        return new Quantity<double, PebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E2)) * (1.1258999e-15))
        );
    }
	/// <summary>
    /// Extension method to convert CentiBit to TebiByte
    /// </summary>
    /// <param name="val">quantity measured in CentiBit</param>
    /// <returns>quantity measured in TebiByte</returns>
    public static Quantity<double, TebiByte> ToTebiByte<T>(this BaseQuantity<T, CentiBit> val) where T:IConvertible {
        return new Quantity<double, TebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E2)) * (1.0995116e-12))
        );
    }
	/// <summary>
    /// Extension method to convert CentiBit to GibiByte
    /// </summary>
    /// <param name="val">quantity measured in CentiBit</param>
    /// <returns>quantity measured in GibiByte</returns>
    public static Quantity<double, GibiByte> ToGibiByte<T>(this BaseQuantity<T, CentiBit> val) where T:IConvertible {
        return new Quantity<double, GibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E2)) * (1d/1073741824))
        );
    }
	/// <summary>
    /// Extension method to convert CentiBit to MebiByte
    /// </summary>
    /// <param name="val">quantity measured in CentiBit</param>
    /// <returns>quantity measured in MebiByte</returns>
    public static Quantity<double, MebiByte> ToMebiByte<T>(this BaseQuantity<T, CentiBit> val) where T:IConvertible {
        return new Quantity<double, MebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E2)) * (1d/1048576))
        );
    }
	/// <summary>
    /// Extension method to convert CentiBit to KibiByte
    /// </summary>
    /// <param name="val">quantity measured in CentiBit</param>
    /// <returns>quantity measured in KibiByte</returns>
    public static Quantity<double, KibiByte> ToKibiByte<T>(this BaseQuantity<T, CentiBit> val) where T:IConvertible {
        return new Quantity<double, KibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E2)) * (1d/1024))
        );
    }
	/// <summary>
    /// Extension method to convert Byte to MilliBit
    /// </summary>
    /// <param name="val">quantity measured in Byte</param>
    /// <returns>quantity measured in MilliBit</returns>
    public static Quantity<double, MilliBit> ToMilliBit<T>(this BaseQuantity<T, Byte> val) where T:IConvertible {
        return new Quantity<double, MilliBit>(
            Convert.ToDouble(val.Value) * (8*1E3)
        );
    }
	/// <summary>
    /// Extension method to convert MilliBit to Byte
    /// </summary>
    /// <param name="val">quantity measured in MilliBit</param>
    /// <returns>quantity measured in Byte</returns>
    public static Quantity<double, Byte> ToByte<T>(this BaseQuantity<T, MilliBit> val) where T:IConvertible {
        return new Quantity<double, Byte>(
            Convert.ToDouble(val.Value) * (1d/(8*1E3))
        );
    }
	/// <summary>
    /// Extension method to convert MilliBit to Bit
    /// </summary>
    /// <param name="val">quantity measured in MilliBit</param>
    /// <returns>quantity measured in Bit</returns>
    public static Quantity<double, Bit> ToBit<T>(this BaseQuantity<T, MilliBit> val) where T:IConvertible {
        return new Quantity<double, Bit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E3)) * (8))
        );
    }
	/// <summary>
    /// Extension method to convert MilliBit to YottaBit
    /// </summary>
    /// <param name="val">quantity measured in MilliBit</param>
    /// <returns>quantity measured in YottaBit</returns>
    public static Quantity<double, YottaBit> ToYottaBit<T>(this BaseQuantity<T, MilliBit> val) where T:IConvertible {
        return new Quantity<double, YottaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E3)) * (8*1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert MilliBit to ZettaBit
    /// </summary>
    /// <param name="val">quantity measured in MilliBit</param>
    /// <returns>quantity measured in ZettaBit</returns>
    public static Quantity<double, ZettaBit> ToZettaBit<T>(this BaseQuantity<T, MilliBit> val) where T:IConvertible {
        return new Quantity<double, ZettaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E3)) * (8*1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert MilliBit to ExaBit
    /// </summary>
    /// <param name="val">quantity measured in MilliBit</param>
    /// <returns>quantity measured in ExaBit</returns>
    public static Quantity<double, ExaBit> ToExaBit<T>(this BaseQuantity<T, MilliBit> val) where T:IConvertible {
        return new Quantity<double, ExaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E3)) * (8*1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert MilliBit to PetaBit
    /// </summary>
    /// <param name="val">quantity measured in MilliBit</param>
    /// <returns>quantity measured in PetaBit</returns>
    public static Quantity<double, PetaBit> ToPetaBit<T>(this BaseQuantity<T, MilliBit> val) where T:IConvertible {
        return new Quantity<double, PetaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E3)) * (8*1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert MilliBit to TeraBit
    /// </summary>
    /// <param name="val">quantity measured in MilliBit</param>
    /// <returns>quantity measured in TeraBit</returns>
    public static Quantity<double, TeraBit> ToTeraBit<T>(this BaseQuantity<T, MilliBit> val) where T:IConvertible {
        return new Quantity<double, TeraBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E3)) * (8*1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert MilliBit to GigaBit
    /// </summary>
    /// <param name="val">quantity measured in MilliBit</param>
    /// <returns>quantity measured in GigaBit</returns>
    public static Quantity<double, GigaBit> ToGigaBit<T>(this BaseQuantity<T, MilliBit> val) where T:IConvertible {
        return new Quantity<double, GigaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E3)) * (8*1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert MilliBit to MegaBit
    /// </summary>
    /// <param name="val">quantity measured in MilliBit</param>
    /// <returns>quantity measured in MegaBit</returns>
    public static Quantity<double, MegaBit> ToMegaBit<T>(this BaseQuantity<T, MilliBit> val) where T:IConvertible {
        return new Quantity<double, MegaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E3)) * (8*1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert MilliBit to KiloBit
    /// </summary>
    /// <param name="val">quantity measured in MilliBit</param>
    /// <returns>quantity measured in KiloBit</returns>
    public static Quantity<double, KiloBit> ToKiloBit<T>(this BaseQuantity<T, MilliBit> val) where T:IConvertible {
        return new Quantity<double, KiloBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E3)) * (8*1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert MilliBit to HectoBit
    /// </summary>
    /// <param name="val">quantity measured in MilliBit</param>
    /// <returns>quantity measured in HectoBit</returns>
    public static Quantity<double, HectoBit> ToHectoBit<T>(this BaseQuantity<T, MilliBit> val) where T:IConvertible {
        return new Quantity<double, HectoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E3)) * (8*1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert MilliBit to DekaBit
    /// </summary>
    /// <param name="val">quantity measured in MilliBit</param>
    /// <returns>quantity measured in DekaBit</returns>
    public static Quantity<double, DekaBit> ToDekaBit<T>(this BaseQuantity<T, MilliBit> val) where T:IConvertible {
        return new Quantity<double, DekaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E3)) * (8*1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert MilliBit to DeciBit
    /// </summary>
    /// <param name="val">quantity measured in MilliBit</param>
    /// <returns>quantity measured in DeciBit</returns>
    public static Quantity<double, DeciBit> ToDeciBit<T>(this BaseQuantity<T, MilliBit> val) where T:IConvertible {
        return new Quantity<double, DeciBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E3)) * (8*1E1))
        );
    }
	/// <summary>
    /// Extension method to convert MilliBit to CentiBit
    /// </summary>
    /// <param name="val">quantity measured in MilliBit</param>
    /// <returns>quantity measured in CentiBit</returns>
    public static Quantity<double, CentiBit> ToCentiBit<T>(this BaseQuantity<T, MilliBit> val) where T:IConvertible {
        return new Quantity<double, CentiBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E3)) * (8*1E2))
        );
    }
	/// <summary>
    /// Extension method to convert MilliBit to MicroBit
    /// </summary>
    /// <param name="val">quantity measured in MilliBit</param>
    /// <returns>quantity measured in MicroBit</returns>
    public static Quantity<double, MicroBit> ToMicroBit<T>(this BaseQuantity<T, MilliBit> val) where T:IConvertible {
        return new Quantity<double, MicroBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E3)) * (8*1E6))
        );
    }
	/// <summary>
    /// Extension method to convert MilliBit to NanoBit
    /// </summary>
    /// <param name="val">quantity measured in MilliBit</param>
    /// <returns>quantity measured in NanoBit</returns>
    public static Quantity<double, NanoBit> ToNanoBit<T>(this BaseQuantity<T, MilliBit> val) where T:IConvertible {
        return new Quantity<double, NanoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E3)) * (8*1E9))
        );
    }
	/// <summary>
    /// Extension method to convert MilliBit to PicoBit
    /// </summary>
    /// <param name="val">quantity measured in MilliBit</param>
    /// <returns>quantity measured in PicoBit</returns>
    public static Quantity<double, PicoBit> ToPicoBit<T>(this BaseQuantity<T, MilliBit> val) where T:IConvertible {
        return new Quantity<double, PicoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E3)) * (8*1E12))
        );
    }
	/// <summary>
    /// Extension method to convert MilliBit to FemtoBit
    /// </summary>
    /// <param name="val">quantity measured in MilliBit</param>
    /// <returns>quantity measured in FemtoBit</returns>
    public static Quantity<double, FemtoBit> ToFemtoBit<T>(this BaseQuantity<T, MilliBit> val) where T:IConvertible {
        return new Quantity<double, FemtoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E3)) * (8*1E15))
        );
    }
	/// <summary>
    /// Extension method to convert MilliBit to AttoBit
    /// </summary>
    /// <param name="val">quantity measured in MilliBit</param>
    /// <returns>quantity measured in AttoBit</returns>
    public static Quantity<double, AttoBit> ToAttoBit<T>(this BaseQuantity<T, MilliBit> val) where T:IConvertible {
        return new Quantity<double, AttoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E3)) * (8*1E18))
        );
    }
	/// <summary>
    /// Extension method to convert MilliBit to ZeptoBit
    /// </summary>
    /// <param name="val">quantity measured in MilliBit</param>
    /// <returns>quantity measured in ZeptoBit</returns>
    public static Quantity<double, ZeptoBit> ToZeptoBit<T>(this BaseQuantity<T, MilliBit> val) where T:IConvertible {
        return new Quantity<double, ZeptoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E3)) * (8*1E21))
        );
    }
	/// <summary>
    /// Extension method to convert MilliBit to YoctoBit
    /// </summary>
    /// <param name="val">quantity measured in MilliBit</param>
    /// <returns>quantity measured in YoctoBit</returns>
    public static Quantity<double, YoctoBit> ToYoctoBit<T>(this BaseQuantity<T, MilliBit> val) where T:IConvertible {
        return new Quantity<double, YoctoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E3)) * (8*1E24))
        );
    }
	/// <summary>
    /// Extension method to convert MilliBit to YottaByte
    /// </summary>
    /// <param name="val">quantity measured in MilliBit</param>
    /// <returns>quantity measured in YottaByte</returns>
    public static Quantity<double, YottaByte> ToYottaByte<T>(this BaseQuantity<T, MilliBit> val) where T:IConvertible {
        return new Quantity<double, YottaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E3)) * (1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert MilliBit to ZettaByte
    /// </summary>
    /// <param name="val">quantity measured in MilliBit</param>
    /// <returns>quantity measured in ZettaByte</returns>
    public static Quantity<double, ZettaByte> ToZettaByte<T>(this BaseQuantity<T, MilliBit> val) where T:IConvertible {
        return new Quantity<double, ZettaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E3)) * (1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert MilliBit to ExaByte
    /// </summary>
    /// <param name="val">quantity measured in MilliBit</param>
    /// <returns>quantity measured in ExaByte</returns>
    public static Quantity<double, ExaByte> ToExaByte<T>(this BaseQuantity<T, MilliBit> val) where T:IConvertible {
        return new Quantity<double, ExaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E3)) * (1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert MilliBit to PetaByte
    /// </summary>
    /// <param name="val">quantity measured in MilliBit</param>
    /// <returns>quantity measured in PetaByte</returns>
    public static Quantity<double, PetaByte> ToPetaByte<T>(this BaseQuantity<T, MilliBit> val) where T:IConvertible {
        return new Quantity<double, PetaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E3)) * (1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert MilliBit to TeraByte
    /// </summary>
    /// <param name="val">quantity measured in MilliBit</param>
    /// <returns>quantity measured in TeraByte</returns>
    public static Quantity<double, TeraByte> ToTeraByte<T>(this BaseQuantity<T, MilliBit> val) where T:IConvertible {
        return new Quantity<double, TeraByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E3)) * (1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert MilliBit to GigaByte
    /// </summary>
    /// <param name="val">quantity measured in MilliBit</param>
    /// <returns>quantity measured in GigaByte</returns>
    public static Quantity<double, GigaByte> ToGigaByte<T>(this BaseQuantity<T, MilliBit> val) where T:IConvertible {
        return new Quantity<double, GigaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E3)) * (1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert MilliBit to MegaByte
    /// </summary>
    /// <param name="val">quantity measured in MilliBit</param>
    /// <returns>quantity measured in MegaByte</returns>
    public static Quantity<double, MegaByte> ToMegaByte<T>(this BaseQuantity<T, MilliBit> val) where T:IConvertible {
        return new Quantity<double, MegaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E3)) * (1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert MilliBit to KiloByte
    /// </summary>
    /// <param name="val">quantity measured in MilliBit</param>
    /// <returns>quantity measured in KiloByte</returns>
    public static Quantity<double, KiloByte> ToKiloByte<T>(this BaseQuantity<T, MilliBit> val) where T:IConvertible {
        return new Quantity<double, KiloByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E3)) * (1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert MilliBit to HectoByte
    /// </summary>
    /// <param name="val">quantity measured in MilliBit</param>
    /// <returns>quantity measured in HectoByte</returns>
    public static Quantity<double, HectoByte> ToHectoByte<T>(this BaseQuantity<T, MilliBit> val) where T:IConvertible {
        return new Quantity<double, HectoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E3)) * (1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert MilliBit to DekaByte
    /// </summary>
    /// <param name="val">quantity measured in MilliBit</param>
    /// <returns>quantity measured in DekaByte</returns>
    public static Quantity<double, DekaByte> ToDekaByte<T>(this BaseQuantity<T, MilliBit> val) where T:IConvertible {
        return new Quantity<double, DekaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E3)) * (1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert MilliBit to DeciByte
    /// </summary>
    /// <param name="val">quantity measured in MilliBit</param>
    /// <returns>quantity measured in DeciByte</returns>
    public static Quantity<double, DeciByte> ToDeciByte<T>(this BaseQuantity<T, MilliBit> val) where T:IConvertible {
        return new Quantity<double, DeciByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E3)) * (1E1))
        );
    }
	/// <summary>
    /// Extension method to convert MilliBit to CentiByte
    /// </summary>
    /// <param name="val">quantity measured in MilliBit</param>
    /// <returns>quantity measured in CentiByte</returns>
    public static Quantity<double, CentiByte> ToCentiByte<T>(this BaseQuantity<T, MilliBit> val) where T:IConvertible {
        return new Quantity<double, CentiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E3)) * (1E2))
        );
    }
	/// <summary>
    /// Extension method to convert MilliBit to MilliByte
    /// </summary>
    /// <param name="val">quantity measured in MilliBit</param>
    /// <returns>quantity measured in MilliByte</returns>
    public static Quantity<double, MilliByte> ToMilliByte<T>(this BaseQuantity<T, MilliBit> val) where T:IConvertible {
        return new Quantity<double, MilliByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E3)) * (1E3))
        );
    }
	/// <summary>
    /// Extension method to convert MilliBit to MicroByte
    /// </summary>
    /// <param name="val">quantity measured in MilliBit</param>
    /// <returns>quantity measured in MicroByte</returns>
    public static Quantity<double, MicroByte> ToMicroByte<T>(this BaseQuantity<T, MilliBit> val) where T:IConvertible {
        return new Quantity<double, MicroByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E3)) * (1E6))
        );
    }
	/// <summary>
    /// Extension method to convert MilliBit to NanoByte
    /// </summary>
    /// <param name="val">quantity measured in MilliBit</param>
    /// <returns>quantity measured in NanoByte</returns>
    public static Quantity<double, NanoByte> ToNanoByte<T>(this BaseQuantity<T, MilliBit> val) where T:IConvertible {
        return new Quantity<double, NanoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E3)) * (1E9))
        );
    }
	/// <summary>
    /// Extension method to convert MilliBit to PicoByte
    /// </summary>
    /// <param name="val">quantity measured in MilliBit</param>
    /// <returns>quantity measured in PicoByte</returns>
    public static Quantity<double, PicoByte> ToPicoByte<T>(this BaseQuantity<T, MilliBit> val) where T:IConvertible {
        return new Quantity<double, PicoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E3)) * (1E12))
        );
    }
	/// <summary>
    /// Extension method to convert MilliBit to FemtoByte
    /// </summary>
    /// <param name="val">quantity measured in MilliBit</param>
    /// <returns>quantity measured in FemtoByte</returns>
    public static Quantity<double, FemtoByte> ToFemtoByte<T>(this BaseQuantity<T, MilliBit> val) where T:IConvertible {
        return new Quantity<double, FemtoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E3)) * (1E15))
        );
    }
	/// <summary>
    /// Extension method to convert MilliBit to AttoByte
    /// </summary>
    /// <param name="val">quantity measured in MilliBit</param>
    /// <returns>quantity measured in AttoByte</returns>
    public static Quantity<double, AttoByte> ToAttoByte<T>(this BaseQuantity<T, MilliBit> val) where T:IConvertible {
        return new Quantity<double, AttoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E3)) * (1E18))
        );
    }
	/// <summary>
    /// Extension method to convert MilliBit to ZeptoByte
    /// </summary>
    /// <param name="val">quantity measured in MilliBit</param>
    /// <returns>quantity measured in ZeptoByte</returns>
    public static Quantity<double, ZeptoByte> ToZeptoByte<T>(this BaseQuantity<T, MilliBit> val) where T:IConvertible {
        return new Quantity<double, ZeptoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E3)) * (1E21))
        );
    }
	/// <summary>
    /// Extension method to convert MilliBit to YoctoByte
    /// </summary>
    /// <param name="val">quantity measured in MilliBit</param>
    /// <returns>quantity measured in YoctoByte</returns>
    public static Quantity<double, YoctoByte> ToYoctoByte<T>(this BaseQuantity<T, MilliBit> val) where T:IConvertible {
        return new Quantity<double, YoctoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E3)) * (1E24))
        );
    }
	/// <summary>
    /// Extension method to convert MilliBit to YobiByte
    /// </summary>
    /// <param name="val">quantity measured in MilliBit</param>
    /// <returns>quantity measured in YobiByte</returns>
    public static Quantity<double, YobiByte> ToYobiByte<T>(this BaseQuantity<T, MilliBit> val) where T:IConvertible {
        return new Quantity<double, YobiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E3)) * (1.2089258e-24))
        );
    }
	/// <summary>
    /// Extension method to convert MilliBit to ZebiByte
    /// </summary>
    /// <param name="val">quantity measured in MilliBit</param>
    /// <returns>quantity measured in ZebiByte</returns>
    public static Quantity<double, ZebiByte> ToZebiByte<T>(this BaseQuantity<T, MilliBit> val) where T:IConvertible {
        return new Quantity<double, ZebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E3)) * (1.1805916e-21))
        );
    }
	/// <summary>
    /// Extension method to convert MilliBit to ExbiByte
    /// </summary>
    /// <param name="val">quantity measured in MilliBit</param>
    /// <returns>quantity measured in ExbiByte</returns>
    public static Quantity<double, ExbiByte> ToExbiByte<T>(this BaseQuantity<T, MilliBit> val) where T:IConvertible {
        return new Quantity<double, ExbiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E3)) * (1.1529215e-18))
        );
    }
	/// <summary>
    /// Extension method to convert MilliBit to PebiByte
    /// </summary>
    /// <param name="val">quantity measured in MilliBit</param>
    /// <returns>quantity measured in PebiByte</returns>
    public static Quantity<double, PebiByte> ToPebiByte<T>(this BaseQuantity<T, MilliBit> val) where T:IConvertible {
        return new Quantity<double, PebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E3)) * (1.1258999e-15))
        );
    }
	/// <summary>
    /// Extension method to convert MilliBit to TebiByte
    /// </summary>
    /// <param name="val">quantity measured in MilliBit</param>
    /// <returns>quantity measured in TebiByte</returns>
    public static Quantity<double, TebiByte> ToTebiByte<T>(this BaseQuantity<T, MilliBit> val) where T:IConvertible {
        return new Quantity<double, TebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E3)) * (1.0995116e-12))
        );
    }
	/// <summary>
    /// Extension method to convert MilliBit to GibiByte
    /// </summary>
    /// <param name="val">quantity measured in MilliBit</param>
    /// <returns>quantity measured in GibiByte</returns>
    public static Quantity<double, GibiByte> ToGibiByte<T>(this BaseQuantity<T, MilliBit> val) where T:IConvertible {
        return new Quantity<double, GibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E3)) * (1d/1073741824))
        );
    }
	/// <summary>
    /// Extension method to convert MilliBit to MebiByte
    /// </summary>
    /// <param name="val">quantity measured in MilliBit</param>
    /// <returns>quantity measured in MebiByte</returns>
    public static Quantity<double, MebiByte> ToMebiByte<T>(this BaseQuantity<T, MilliBit> val) where T:IConvertible {
        return new Quantity<double, MebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E3)) * (1d/1048576))
        );
    }
	/// <summary>
    /// Extension method to convert MilliBit to KibiByte
    /// </summary>
    /// <param name="val">quantity measured in MilliBit</param>
    /// <returns>quantity measured in KibiByte</returns>
    public static Quantity<double, KibiByte> ToKibiByte<T>(this BaseQuantity<T, MilliBit> val) where T:IConvertible {
        return new Quantity<double, KibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E3)) * (1d/1024))
        );
    }
	/// <summary>
    /// Extension method to convert Byte to MicroBit
    /// </summary>
    /// <param name="val">quantity measured in Byte</param>
    /// <returns>quantity measured in MicroBit</returns>
    public static Quantity<double, MicroBit> ToMicroBit<T>(this BaseQuantity<T, Byte> val) where T:IConvertible {
        return new Quantity<double, MicroBit>(
            Convert.ToDouble(val.Value) * (8*1E6)
        );
    }
	/// <summary>
    /// Extension method to convert MicroBit to Byte
    /// </summary>
    /// <param name="val">quantity measured in MicroBit</param>
    /// <returns>quantity measured in Byte</returns>
    public static Quantity<double, Byte> ToByte<T>(this BaseQuantity<T, MicroBit> val) where T:IConvertible {
        return new Quantity<double, Byte>(
            Convert.ToDouble(val.Value) * (1d/(8*1E6))
        );
    }
	/// <summary>
    /// Extension method to convert MicroBit to Bit
    /// </summary>
    /// <param name="val">quantity measured in MicroBit</param>
    /// <returns>quantity measured in Bit</returns>
    public static Quantity<double, Bit> ToBit<T>(this BaseQuantity<T, MicroBit> val) where T:IConvertible {
        return new Quantity<double, Bit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E6)) * (8))
        );
    }
	/// <summary>
    /// Extension method to convert MicroBit to YottaBit
    /// </summary>
    /// <param name="val">quantity measured in MicroBit</param>
    /// <returns>quantity measured in YottaBit</returns>
    public static Quantity<double, YottaBit> ToYottaBit<T>(this BaseQuantity<T, MicroBit> val) where T:IConvertible {
        return new Quantity<double, YottaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E6)) * (8*1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert MicroBit to ZettaBit
    /// </summary>
    /// <param name="val">quantity measured in MicroBit</param>
    /// <returns>quantity measured in ZettaBit</returns>
    public static Quantity<double, ZettaBit> ToZettaBit<T>(this BaseQuantity<T, MicroBit> val) where T:IConvertible {
        return new Quantity<double, ZettaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E6)) * (8*1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert MicroBit to ExaBit
    /// </summary>
    /// <param name="val">quantity measured in MicroBit</param>
    /// <returns>quantity measured in ExaBit</returns>
    public static Quantity<double, ExaBit> ToExaBit<T>(this BaseQuantity<T, MicroBit> val) where T:IConvertible {
        return new Quantity<double, ExaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E6)) * (8*1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert MicroBit to PetaBit
    /// </summary>
    /// <param name="val">quantity measured in MicroBit</param>
    /// <returns>quantity measured in PetaBit</returns>
    public static Quantity<double, PetaBit> ToPetaBit<T>(this BaseQuantity<T, MicroBit> val) where T:IConvertible {
        return new Quantity<double, PetaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E6)) * (8*1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert MicroBit to TeraBit
    /// </summary>
    /// <param name="val">quantity measured in MicroBit</param>
    /// <returns>quantity measured in TeraBit</returns>
    public static Quantity<double, TeraBit> ToTeraBit<T>(this BaseQuantity<T, MicroBit> val) where T:IConvertible {
        return new Quantity<double, TeraBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E6)) * (8*1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert MicroBit to GigaBit
    /// </summary>
    /// <param name="val">quantity measured in MicroBit</param>
    /// <returns>quantity measured in GigaBit</returns>
    public static Quantity<double, GigaBit> ToGigaBit<T>(this BaseQuantity<T, MicroBit> val) where T:IConvertible {
        return new Quantity<double, GigaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E6)) * (8*1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert MicroBit to MegaBit
    /// </summary>
    /// <param name="val">quantity measured in MicroBit</param>
    /// <returns>quantity measured in MegaBit</returns>
    public static Quantity<double, MegaBit> ToMegaBit<T>(this BaseQuantity<T, MicroBit> val) where T:IConvertible {
        return new Quantity<double, MegaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E6)) * (8*1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert MicroBit to KiloBit
    /// </summary>
    /// <param name="val">quantity measured in MicroBit</param>
    /// <returns>quantity measured in KiloBit</returns>
    public static Quantity<double, KiloBit> ToKiloBit<T>(this BaseQuantity<T, MicroBit> val) where T:IConvertible {
        return new Quantity<double, KiloBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E6)) * (8*1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert MicroBit to HectoBit
    /// </summary>
    /// <param name="val">quantity measured in MicroBit</param>
    /// <returns>quantity measured in HectoBit</returns>
    public static Quantity<double, HectoBit> ToHectoBit<T>(this BaseQuantity<T, MicroBit> val) where T:IConvertible {
        return new Quantity<double, HectoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E6)) * (8*1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert MicroBit to DekaBit
    /// </summary>
    /// <param name="val">quantity measured in MicroBit</param>
    /// <returns>quantity measured in DekaBit</returns>
    public static Quantity<double, DekaBit> ToDekaBit<T>(this BaseQuantity<T, MicroBit> val) where T:IConvertible {
        return new Quantity<double, DekaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E6)) * (8*1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert MicroBit to DeciBit
    /// </summary>
    /// <param name="val">quantity measured in MicroBit</param>
    /// <returns>quantity measured in DeciBit</returns>
    public static Quantity<double, DeciBit> ToDeciBit<T>(this BaseQuantity<T, MicroBit> val) where T:IConvertible {
        return new Quantity<double, DeciBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E6)) * (8*1E1))
        );
    }
	/// <summary>
    /// Extension method to convert MicroBit to CentiBit
    /// </summary>
    /// <param name="val">quantity measured in MicroBit</param>
    /// <returns>quantity measured in CentiBit</returns>
    public static Quantity<double, CentiBit> ToCentiBit<T>(this BaseQuantity<T, MicroBit> val) where T:IConvertible {
        return new Quantity<double, CentiBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E6)) * (8*1E2))
        );
    }
	/// <summary>
    /// Extension method to convert MicroBit to MilliBit
    /// </summary>
    /// <param name="val">quantity measured in MicroBit</param>
    /// <returns>quantity measured in MilliBit</returns>
    public static Quantity<double, MilliBit> ToMilliBit<T>(this BaseQuantity<T, MicroBit> val) where T:IConvertible {
        return new Quantity<double, MilliBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E6)) * (8*1E3))
        );
    }
	/// <summary>
    /// Extension method to convert MicroBit to NanoBit
    /// </summary>
    /// <param name="val">quantity measured in MicroBit</param>
    /// <returns>quantity measured in NanoBit</returns>
    public static Quantity<double, NanoBit> ToNanoBit<T>(this BaseQuantity<T, MicroBit> val) where T:IConvertible {
        return new Quantity<double, NanoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E6)) * (8*1E9))
        );
    }
	/// <summary>
    /// Extension method to convert MicroBit to PicoBit
    /// </summary>
    /// <param name="val">quantity measured in MicroBit</param>
    /// <returns>quantity measured in PicoBit</returns>
    public static Quantity<double, PicoBit> ToPicoBit<T>(this BaseQuantity<T, MicroBit> val) where T:IConvertible {
        return new Quantity<double, PicoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E6)) * (8*1E12))
        );
    }
	/// <summary>
    /// Extension method to convert MicroBit to FemtoBit
    /// </summary>
    /// <param name="val">quantity measured in MicroBit</param>
    /// <returns>quantity measured in FemtoBit</returns>
    public static Quantity<double, FemtoBit> ToFemtoBit<T>(this BaseQuantity<T, MicroBit> val) where T:IConvertible {
        return new Quantity<double, FemtoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E6)) * (8*1E15))
        );
    }
	/// <summary>
    /// Extension method to convert MicroBit to AttoBit
    /// </summary>
    /// <param name="val">quantity measured in MicroBit</param>
    /// <returns>quantity measured in AttoBit</returns>
    public static Quantity<double, AttoBit> ToAttoBit<T>(this BaseQuantity<T, MicroBit> val) where T:IConvertible {
        return new Quantity<double, AttoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E6)) * (8*1E18))
        );
    }
	/// <summary>
    /// Extension method to convert MicroBit to ZeptoBit
    /// </summary>
    /// <param name="val">quantity measured in MicroBit</param>
    /// <returns>quantity measured in ZeptoBit</returns>
    public static Quantity<double, ZeptoBit> ToZeptoBit<T>(this BaseQuantity<T, MicroBit> val) where T:IConvertible {
        return new Quantity<double, ZeptoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E6)) * (8*1E21))
        );
    }
	/// <summary>
    /// Extension method to convert MicroBit to YoctoBit
    /// </summary>
    /// <param name="val">quantity measured in MicroBit</param>
    /// <returns>quantity measured in YoctoBit</returns>
    public static Quantity<double, YoctoBit> ToYoctoBit<T>(this BaseQuantity<T, MicroBit> val) where T:IConvertible {
        return new Quantity<double, YoctoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E6)) * (8*1E24))
        );
    }
	/// <summary>
    /// Extension method to convert MicroBit to YottaByte
    /// </summary>
    /// <param name="val">quantity measured in MicroBit</param>
    /// <returns>quantity measured in YottaByte</returns>
    public static Quantity<double, YottaByte> ToYottaByte<T>(this BaseQuantity<T, MicroBit> val) where T:IConvertible {
        return new Quantity<double, YottaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E6)) * (1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert MicroBit to ZettaByte
    /// </summary>
    /// <param name="val">quantity measured in MicroBit</param>
    /// <returns>quantity measured in ZettaByte</returns>
    public static Quantity<double, ZettaByte> ToZettaByte<T>(this BaseQuantity<T, MicroBit> val) where T:IConvertible {
        return new Quantity<double, ZettaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E6)) * (1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert MicroBit to ExaByte
    /// </summary>
    /// <param name="val">quantity measured in MicroBit</param>
    /// <returns>quantity measured in ExaByte</returns>
    public static Quantity<double, ExaByte> ToExaByte<T>(this BaseQuantity<T, MicroBit> val) where T:IConvertible {
        return new Quantity<double, ExaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E6)) * (1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert MicroBit to PetaByte
    /// </summary>
    /// <param name="val">quantity measured in MicroBit</param>
    /// <returns>quantity measured in PetaByte</returns>
    public static Quantity<double, PetaByte> ToPetaByte<T>(this BaseQuantity<T, MicroBit> val) where T:IConvertible {
        return new Quantity<double, PetaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E6)) * (1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert MicroBit to TeraByte
    /// </summary>
    /// <param name="val">quantity measured in MicroBit</param>
    /// <returns>quantity measured in TeraByte</returns>
    public static Quantity<double, TeraByte> ToTeraByte<T>(this BaseQuantity<T, MicroBit> val) where T:IConvertible {
        return new Quantity<double, TeraByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E6)) * (1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert MicroBit to GigaByte
    /// </summary>
    /// <param name="val">quantity measured in MicroBit</param>
    /// <returns>quantity measured in GigaByte</returns>
    public static Quantity<double, GigaByte> ToGigaByte<T>(this BaseQuantity<T, MicroBit> val) where T:IConvertible {
        return new Quantity<double, GigaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E6)) * (1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert MicroBit to MegaByte
    /// </summary>
    /// <param name="val">quantity measured in MicroBit</param>
    /// <returns>quantity measured in MegaByte</returns>
    public static Quantity<double, MegaByte> ToMegaByte<T>(this BaseQuantity<T, MicroBit> val) where T:IConvertible {
        return new Quantity<double, MegaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E6)) * (1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert MicroBit to KiloByte
    /// </summary>
    /// <param name="val">quantity measured in MicroBit</param>
    /// <returns>quantity measured in KiloByte</returns>
    public static Quantity<double, KiloByte> ToKiloByte<T>(this BaseQuantity<T, MicroBit> val) where T:IConvertible {
        return new Quantity<double, KiloByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E6)) * (1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert MicroBit to HectoByte
    /// </summary>
    /// <param name="val">quantity measured in MicroBit</param>
    /// <returns>quantity measured in HectoByte</returns>
    public static Quantity<double, HectoByte> ToHectoByte<T>(this BaseQuantity<T, MicroBit> val) where T:IConvertible {
        return new Quantity<double, HectoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E6)) * (1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert MicroBit to DekaByte
    /// </summary>
    /// <param name="val">quantity measured in MicroBit</param>
    /// <returns>quantity measured in DekaByte</returns>
    public static Quantity<double, DekaByte> ToDekaByte<T>(this BaseQuantity<T, MicroBit> val) where T:IConvertible {
        return new Quantity<double, DekaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E6)) * (1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert MicroBit to DeciByte
    /// </summary>
    /// <param name="val">quantity measured in MicroBit</param>
    /// <returns>quantity measured in DeciByte</returns>
    public static Quantity<double, DeciByte> ToDeciByte<T>(this BaseQuantity<T, MicroBit> val) where T:IConvertible {
        return new Quantity<double, DeciByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E6)) * (1E1))
        );
    }
	/// <summary>
    /// Extension method to convert MicroBit to CentiByte
    /// </summary>
    /// <param name="val">quantity measured in MicroBit</param>
    /// <returns>quantity measured in CentiByte</returns>
    public static Quantity<double, CentiByte> ToCentiByte<T>(this BaseQuantity<T, MicroBit> val) where T:IConvertible {
        return new Quantity<double, CentiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E6)) * (1E2))
        );
    }
	/// <summary>
    /// Extension method to convert MicroBit to MilliByte
    /// </summary>
    /// <param name="val">quantity measured in MicroBit</param>
    /// <returns>quantity measured in MilliByte</returns>
    public static Quantity<double, MilliByte> ToMilliByte<T>(this BaseQuantity<T, MicroBit> val) where T:IConvertible {
        return new Quantity<double, MilliByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E6)) * (1E3))
        );
    }
	/// <summary>
    /// Extension method to convert MicroBit to MicroByte
    /// </summary>
    /// <param name="val">quantity measured in MicroBit</param>
    /// <returns>quantity measured in MicroByte</returns>
    public static Quantity<double, MicroByte> ToMicroByte<T>(this BaseQuantity<T, MicroBit> val) where T:IConvertible {
        return new Quantity<double, MicroByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E6)) * (1E6))
        );
    }
	/// <summary>
    /// Extension method to convert MicroBit to NanoByte
    /// </summary>
    /// <param name="val">quantity measured in MicroBit</param>
    /// <returns>quantity measured in NanoByte</returns>
    public static Quantity<double, NanoByte> ToNanoByte<T>(this BaseQuantity<T, MicroBit> val) where T:IConvertible {
        return new Quantity<double, NanoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E6)) * (1E9))
        );
    }
	/// <summary>
    /// Extension method to convert MicroBit to PicoByte
    /// </summary>
    /// <param name="val">quantity measured in MicroBit</param>
    /// <returns>quantity measured in PicoByte</returns>
    public static Quantity<double, PicoByte> ToPicoByte<T>(this BaseQuantity<T, MicroBit> val) where T:IConvertible {
        return new Quantity<double, PicoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E6)) * (1E12))
        );
    }
	/// <summary>
    /// Extension method to convert MicroBit to FemtoByte
    /// </summary>
    /// <param name="val">quantity measured in MicroBit</param>
    /// <returns>quantity measured in FemtoByte</returns>
    public static Quantity<double, FemtoByte> ToFemtoByte<T>(this BaseQuantity<T, MicroBit> val) where T:IConvertible {
        return new Quantity<double, FemtoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E6)) * (1E15))
        );
    }
	/// <summary>
    /// Extension method to convert MicroBit to AttoByte
    /// </summary>
    /// <param name="val">quantity measured in MicroBit</param>
    /// <returns>quantity measured in AttoByte</returns>
    public static Quantity<double, AttoByte> ToAttoByte<T>(this BaseQuantity<T, MicroBit> val) where T:IConvertible {
        return new Quantity<double, AttoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E6)) * (1E18))
        );
    }
	/// <summary>
    /// Extension method to convert MicroBit to ZeptoByte
    /// </summary>
    /// <param name="val">quantity measured in MicroBit</param>
    /// <returns>quantity measured in ZeptoByte</returns>
    public static Quantity<double, ZeptoByte> ToZeptoByte<T>(this BaseQuantity<T, MicroBit> val) where T:IConvertible {
        return new Quantity<double, ZeptoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E6)) * (1E21))
        );
    }
	/// <summary>
    /// Extension method to convert MicroBit to YoctoByte
    /// </summary>
    /// <param name="val">quantity measured in MicroBit</param>
    /// <returns>quantity measured in YoctoByte</returns>
    public static Quantity<double, YoctoByte> ToYoctoByte<T>(this BaseQuantity<T, MicroBit> val) where T:IConvertible {
        return new Quantity<double, YoctoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E6)) * (1E24))
        );
    }
	/// <summary>
    /// Extension method to convert MicroBit to YobiByte
    /// </summary>
    /// <param name="val">quantity measured in MicroBit</param>
    /// <returns>quantity measured in YobiByte</returns>
    public static Quantity<double, YobiByte> ToYobiByte<T>(this BaseQuantity<T, MicroBit> val) where T:IConvertible {
        return new Quantity<double, YobiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E6)) * (1.2089258e-24))
        );
    }
	/// <summary>
    /// Extension method to convert MicroBit to ZebiByte
    /// </summary>
    /// <param name="val">quantity measured in MicroBit</param>
    /// <returns>quantity measured in ZebiByte</returns>
    public static Quantity<double, ZebiByte> ToZebiByte<T>(this BaseQuantity<T, MicroBit> val) where T:IConvertible {
        return new Quantity<double, ZebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E6)) * (1.1805916e-21))
        );
    }
	/// <summary>
    /// Extension method to convert MicroBit to ExbiByte
    /// </summary>
    /// <param name="val">quantity measured in MicroBit</param>
    /// <returns>quantity measured in ExbiByte</returns>
    public static Quantity<double, ExbiByte> ToExbiByte<T>(this BaseQuantity<T, MicroBit> val) where T:IConvertible {
        return new Quantity<double, ExbiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E6)) * (1.1529215e-18))
        );
    }
	/// <summary>
    /// Extension method to convert MicroBit to PebiByte
    /// </summary>
    /// <param name="val">quantity measured in MicroBit</param>
    /// <returns>quantity measured in PebiByte</returns>
    public static Quantity<double, PebiByte> ToPebiByte<T>(this BaseQuantity<T, MicroBit> val) where T:IConvertible {
        return new Quantity<double, PebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E6)) * (1.1258999e-15))
        );
    }
	/// <summary>
    /// Extension method to convert MicroBit to TebiByte
    /// </summary>
    /// <param name="val">quantity measured in MicroBit</param>
    /// <returns>quantity measured in TebiByte</returns>
    public static Quantity<double, TebiByte> ToTebiByte<T>(this BaseQuantity<T, MicroBit> val) where T:IConvertible {
        return new Quantity<double, TebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E6)) * (1.0995116e-12))
        );
    }
	/// <summary>
    /// Extension method to convert MicroBit to GibiByte
    /// </summary>
    /// <param name="val">quantity measured in MicroBit</param>
    /// <returns>quantity measured in GibiByte</returns>
    public static Quantity<double, GibiByte> ToGibiByte<T>(this BaseQuantity<T, MicroBit> val) where T:IConvertible {
        return new Quantity<double, GibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E6)) * (1d/1073741824))
        );
    }
	/// <summary>
    /// Extension method to convert MicroBit to MebiByte
    /// </summary>
    /// <param name="val">quantity measured in MicroBit</param>
    /// <returns>quantity measured in MebiByte</returns>
    public static Quantity<double, MebiByte> ToMebiByte<T>(this BaseQuantity<T, MicroBit> val) where T:IConvertible {
        return new Quantity<double, MebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E6)) * (1d/1048576))
        );
    }
	/// <summary>
    /// Extension method to convert MicroBit to KibiByte
    /// </summary>
    /// <param name="val">quantity measured in MicroBit</param>
    /// <returns>quantity measured in KibiByte</returns>
    public static Quantity<double, KibiByte> ToKibiByte<T>(this BaseQuantity<T, MicroBit> val) where T:IConvertible {
        return new Quantity<double, KibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E6)) * (1d/1024))
        );
    }
	/// <summary>
    /// Extension method to convert Byte to NanoBit
    /// </summary>
    /// <param name="val">quantity measured in Byte</param>
    /// <returns>quantity measured in NanoBit</returns>
    public static Quantity<double, NanoBit> ToNanoBit<T>(this BaseQuantity<T, Byte> val) where T:IConvertible {
        return new Quantity<double, NanoBit>(
            Convert.ToDouble(val.Value) * (8*1E9)
        );
    }
	/// <summary>
    /// Extension method to convert NanoBit to Byte
    /// </summary>
    /// <param name="val">quantity measured in NanoBit</param>
    /// <returns>quantity measured in Byte</returns>
    public static Quantity<double, Byte> ToByte<T>(this BaseQuantity<T, NanoBit> val) where T:IConvertible {
        return new Quantity<double, Byte>(
            Convert.ToDouble(val.Value) * (1d/(8*1E9))
        );
    }
	/// <summary>
    /// Extension method to convert NanoBit to Bit
    /// </summary>
    /// <param name="val">quantity measured in NanoBit</param>
    /// <returns>quantity measured in Bit</returns>
    public static Quantity<double, Bit> ToBit<T>(this BaseQuantity<T, NanoBit> val) where T:IConvertible {
        return new Quantity<double, Bit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E9)) * (8))
        );
    }
	/// <summary>
    /// Extension method to convert NanoBit to YottaBit
    /// </summary>
    /// <param name="val">quantity measured in NanoBit</param>
    /// <returns>quantity measured in YottaBit</returns>
    public static Quantity<double, YottaBit> ToYottaBit<T>(this BaseQuantity<T, NanoBit> val) where T:IConvertible {
        return new Quantity<double, YottaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E9)) * (8*1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert NanoBit to ZettaBit
    /// </summary>
    /// <param name="val">quantity measured in NanoBit</param>
    /// <returns>quantity measured in ZettaBit</returns>
    public static Quantity<double, ZettaBit> ToZettaBit<T>(this BaseQuantity<T, NanoBit> val) where T:IConvertible {
        return new Quantity<double, ZettaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E9)) * (8*1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert NanoBit to ExaBit
    /// </summary>
    /// <param name="val">quantity measured in NanoBit</param>
    /// <returns>quantity measured in ExaBit</returns>
    public static Quantity<double, ExaBit> ToExaBit<T>(this BaseQuantity<T, NanoBit> val) where T:IConvertible {
        return new Quantity<double, ExaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E9)) * (8*1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert NanoBit to PetaBit
    /// </summary>
    /// <param name="val">quantity measured in NanoBit</param>
    /// <returns>quantity measured in PetaBit</returns>
    public static Quantity<double, PetaBit> ToPetaBit<T>(this BaseQuantity<T, NanoBit> val) where T:IConvertible {
        return new Quantity<double, PetaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E9)) * (8*1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert NanoBit to TeraBit
    /// </summary>
    /// <param name="val">quantity measured in NanoBit</param>
    /// <returns>quantity measured in TeraBit</returns>
    public static Quantity<double, TeraBit> ToTeraBit<T>(this BaseQuantity<T, NanoBit> val) where T:IConvertible {
        return new Quantity<double, TeraBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E9)) * (8*1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert NanoBit to GigaBit
    /// </summary>
    /// <param name="val">quantity measured in NanoBit</param>
    /// <returns>quantity measured in GigaBit</returns>
    public static Quantity<double, GigaBit> ToGigaBit<T>(this BaseQuantity<T, NanoBit> val) where T:IConvertible {
        return new Quantity<double, GigaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E9)) * (8*1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert NanoBit to MegaBit
    /// </summary>
    /// <param name="val">quantity measured in NanoBit</param>
    /// <returns>quantity measured in MegaBit</returns>
    public static Quantity<double, MegaBit> ToMegaBit<T>(this BaseQuantity<T, NanoBit> val) where T:IConvertible {
        return new Quantity<double, MegaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E9)) * (8*1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert NanoBit to KiloBit
    /// </summary>
    /// <param name="val">quantity measured in NanoBit</param>
    /// <returns>quantity measured in KiloBit</returns>
    public static Quantity<double, KiloBit> ToKiloBit<T>(this BaseQuantity<T, NanoBit> val) where T:IConvertible {
        return new Quantity<double, KiloBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E9)) * (8*1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert NanoBit to HectoBit
    /// </summary>
    /// <param name="val">quantity measured in NanoBit</param>
    /// <returns>quantity measured in HectoBit</returns>
    public static Quantity<double, HectoBit> ToHectoBit<T>(this BaseQuantity<T, NanoBit> val) where T:IConvertible {
        return new Quantity<double, HectoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E9)) * (8*1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert NanoBit to DekaBit
    /// </summary>
    /// <param name="val">quantity measured in NanoBit</param>
    /// <returns>quantity measured in DekaBit</returns>
    public static Quantity<double, DekaBit> ToDekaBit<T>(this BaseQuantity<T, NanoBit> val) where T:IConvertible {
        return new Quantity<double, DekaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E9)) * (8*1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert NanoBit to DeciBit
    /// </summary>
    /// <param name="val">quantity measured in NanoBit</param>
    /// <returns>quantity measured in DeciBit</returns>
    public static Quantity<double, DeciBit> ToDeciBit<T>(this BaseQuantity<T, NanoBit> val) where T:IConvertible {
        return new Quantity<double, DeciBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E9)) * (8*1E1))
        );
    }
	/// <summary>
    /// Extension method to convert NanoBit to CentiBit
    /// </summary>
    /// <param name="val">quantity measured in NanoBit</param>
    /// <returns>quantity measured in CentiBit</returns>
    public static Quantity<double, CentiBit> ToCentiBit<T>(this BaseQuantity<T, NanoBit> val) where T:IConvertible {
        return new Quantity<double, CentiBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E9)) * (8*1E2))
        );
    }
	/// <summary>
    /// Extension method to convert NanoBit to MilliBit
    /// </summary>
    /// <param name="val">quantity measured in NanoBit</param>
    /// <returns>quantity measured in MilliBit</returns>
    public static Quantity<double, MilliBit> ToMilliBit<T>(this BaseQuantity<T, NanoBit> val) where T:IConvertible {
        return new Quantity<double, MilliBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E9)) * (8*1E3))
        );
    }
	/// <summary>
    /// Extension method to convert NanoBit to MicroBit
    /// </summary>
    /// <param name="val">quantity measured in NanoBit</param>
    /// <returns>quantity measured in MicroBit</returns>
    public static Quantity<double, MicroBit> ToMicroBit<T>(this BaseQuantity<T, NanoBit> val) where T:IConvertible {
        return new Quantity<double, MicroBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E9)) * (8*1E6))
        );
    }
	/// <summary>
    /// Extension method to convert NanoBit to PicoBit
    /// </summary>
    /// <param name="val">quantity measured in NanoBit</param>
    /// <returns>quantity measured in PicoBit</returns>
    public static Quantity<double, PicoBit> ToPicoBit<T>(this BaseQuantity<T, NanoBit> val) where T:IConvertible {
        return new Quantity<double, PicoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E9)) * (8*1E12))
        );
    }
	/// <summary>
    /// Extension method to convert NanoBit to FemtoBit
    /// </summary>
    /// <param name="val">quantity measured in NanoBit</param>
    /// <returns>quantity measured in FemtoBit</returns>
    public static Quantity<double, FemtoBit> ToFemtoBit<T>(this BaseQuantity<T, NanoBit> val) where T:IConvertible {
        return new Quantity<double, FemtoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E9)) * (8*1E15))
        );
    }
	/// <summary>
    /// Extension method to convert NanoBit to AttoBit
    /// </summary>
    /// <param name="val">quantity measured in NanoBit</param>
    /// <returns>quantity measured in AttoBit</returns>
    public static Quantity<double, AttoBit> ToAttoBit<T>(this BaseQuantity<T, NanoBit> val) where T:IConvertible {
        return new Quantity<double, AttoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E9)) * (8*1E18))
        );
    }
	/// <summary>
    /// Extension method to convert NanoBit to ZeptoBit
    /// </summary>
    /// <param name="val">quantity measured in NanoBit</param>
    /// <returns>quantity measured in ZeptoBit</returns>
    public static Quantity<double, ZeptoBit> ToZeptoBit<T>(this BaseQuantity<T, NanoBit> val) where T:IConvertible {
        return new Quantity<double, ZeptoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E9)) * (8*1E21))
        );
    }
	/// <summary>
    /// Extension method to convert NanoBit to YoctoBit
    /// </summary>
    /// <param name="val">quantity measured in NanoBit</param>
    /// <returns>quantity measured in YoctoBit</returns>
    public static Quantity<double, YoctoBit> ToYoctoBit<T>(this BaseQuantity<T, NanoBit> val) where T:IConvertible {
        return new Quantity<double, YoctoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E9)) * (8*1E24))
        );
    }
	/// <summary>
    /// Extension method to convert NanoBit to YottaByte
    /// </summary>
    /// <param name="val">quantity measured in NanoBit</param>
    /// <returns>quantity measured in YottaByte</returns>
    public static Quantity<double, YottaByte> ToYottaByte<T>(this BaseQuantity<T, NanoBit> val) where T:IConvertible {
        return new Quantity<double, YottaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E9)) * (1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert NanoBit to ZettaByte
    /// </summary>
    /// <param name="val">quantity measured in NanoBit</param>
    /// <returns>quantity measured in ZettaByte</returns>
    public static Quantity<double, ZettaByte> ToZettaByte<T>(this BaseQuantity<T, NanoBit> val) where T:IConvertible {
        return new Quantity<double, ZettaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E9)) * (1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert NanoBit to ExaByte
    /// </summary>
    /// <param name="val">quantity measured in NanoBit</param>
    /// <returns>quantity measured in ExaByte</returns>
    public static Quantity<double, ExaByte> ToExaByte<T>(this BaseQuantity<T, NanoBit> val) where T:IConvertible {
        return new Quantity<double, ExaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E9)) * (1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert NanoBit to PetaByte
    /// </summary>
    /// <param name="val">quantity measured in NanoBit</param>
    /// <returns>quantity measured in PetaByte</returns>
    public static Quantity<double, PetaByte> ToPetaByte<T>(this BaseQuantity<T, NanoBit> val) where T:IConvertible {
        return new Quantity<double, PetaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E9)) * (1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert NanoBit to TeraByte
    /// </summary>
    /// <param name="val">quantity measured in NanoBit</param>
    /// <returns>quantity measured in TeraByte</returns>
    public static Quantity<double, TeraByte> ToTeraByte<T>(this BaseQuantity<T, NanoBit> val) where T:IConvertible {
        return new Quantity<double, TeraByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E9)) * (1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert NanoBit to GigaByte
    /// </summary>
    /// <param name="val">quantity measured in NanoBit</param>
    /// <returns>quantity measured in GigaByte</returns>
    public static Quantity<double, GigaByte> ToGigaByte<T>(this BaseQuantity<T, NanoBit> val) where T:IConvertible {
        return new Quantity<double, GigaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E9)) * (1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert NanoBit to MegaByte
    /// </summary>
    /// <param name="val">quantity measured in NanoBit</param>
    /// <returns>quantity measured in MegaByte</returns>
    public static Quantity<double, MegaByte> ToMegaByte<T>(this BaseQuantity<T, NanoBit> val) where T:IConvertible {
        return new Quantity<double, MegaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E9)) * (1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert NanoBit to KiloByte
    /// </summary>
    /// <param name="val">quantity measured in NanoBit</param>
    /// <returns>quantity measured in KiloByte</returns>
    public static Quantity<double, KiloByte> ToKiloByte<T>(this BaseQuantity<T, NanoBit> val) where T:IConvertible {
        return new Quantity<double, KiloByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E9)) * (1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert NanoBit to HectoByte
    /// </summary>
    /// <param name="val">quantity measured in NanoBit</param>
    /// <returns>quantity measured in HectoByte</returns>
    public static Quantity<double, HectoByte> ToHectoByte<T>(this BaseQuantity<T, NanoBit> val) where T:IConvertible {
        return new Quantity<double, HectoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E9)) * (1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert NanoBit to DekaByte
    /// </summary>
    /// <param name="val">quantity measured in NanoBit</param>
    /// <returns>quantity measured in DekaByte</returns>
    public static Quantity<double, DekaByte> ToDekaByte<T>(this BaseQuantity<T, NanoBit> val) where T:IConvertible {
        return new Quantity<double, DekaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E9)) * (1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert NanoBit to DeciByte
    /// </summary>
    /// <param name="val">quantity measured in NanoBit</param>
    /// <returns>quantity measured in DeciByte</returns>
    public static Quantity<double, DeciByte> ToDeciByte<T>(this BaseQuantity<T, NanoBit> val) where T:IConvertible {
        return new Quantity<double, DeciByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E9)) * (1E1))
        );
    }
	/// <summary>
    /// Extension method to convert NanoBit to CentiByte
    /// </summary>
    /// <param name="val">quantity measured in NanoBit</param>
    /// <returns>quantity measured in CentiByte</returns>
    public static Quantity<double, CentiByte> ToCentiByte<T>(this BaseQuantity<T, NanoBit> val) where T:IConvertible {
        return new Quantity<double, CentiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E9)) * (1E2))
        );
    }
	/// <summary>
    /// Extension method to convert NanoBit to MilliByte
    /// </summary>
    /// <param name="val">quantity measured in NanoBit</param>
    /// <returns>quantity measured in MilliByte</returns>
    public static Quantity<double, MilliByte> ToMilliByte<T>(this BaseQuantity<T, NanoBit> val) where T:IConvertible {
        return new Quantity<double, MilliByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E9)) * (1E3))
        );
    }
	/// <summary>
    /// Extension method to convert NanoBit to MicroByte
    /// </summary>
    /// <param name="val">quantity measured in NanoBit</param>
    /// <returns>quantity measured in MicroByte</returns>
    public static Quantity<double, MicroByte> ToMicroByte<T>(this BaseQuantity<T, NanoBit> val) where T:IConvertible {
        return new Quantity<double, MicroByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E9)) * (1E6))
        );
    }
	/// <summary>
    /// Extension method to convert NanoBit to NanoByte
    /// </summary>
    /// <param name="val">quantity measured in NanoBit</param>
    /// <returns>quantity measured in NanoByte</returns>
    public static Quantity<double, NanoByte> ToNanoByte<T>(this BaseQuantity<T, NanoBit> val) where T:IConvertible {
        return new Quantity<double, NanoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E9)) * (1E9))
        );
    }
	/// <summary>
    /// Extension method to convert NanoBit to PicoByte
    /// </summary>
    /// <param name="val">quantity measured in NanoBit</param>
    /// <returns>quantity measured in PicoByte</returns>
    public static Quantity<double, PicoByte> ToPicoByte<T>(this BaseQuantity<T, NanoBit> val) where T:IConvertible {
        return new Quantity<double, PicoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E9)) * (1E12))
        );
    }
	/// <summary>
    /// Extension method to convert NanoBit to FemtoByte
    /// </summary>
    /// <param name="val">quantity measured in NanoBit</param>
    /// <returns>quantity measured in FemtoByte</returns>
    public static Quantity<double, FemtoByte> ToFemtoByte<T>(this BaseQuantity<T, NanoBit> val) where T:IConvertible {
        return new Quantity<double, FemtoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E9)) * (1E15))
        );
    }
	/// <summary>
    /// Extension method to convert NanoBit to AttoByte
    /// </summary>
    /// <param name="val">quantity measured in NanoBit</param>
    /// <returns>quantity measured in AttoByte</returns>
    public static Quantity<double, AttoByte> ToAttoByte<T>(this BaseQuantity<T, NanoBit> val) where T:IConvertible {
        return new Quantity<double, AttoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E9)) * (1E18))
        );
    }
	/// <summary>
    /// Extension method to convert NanoBit to ZeptoByte
    /// </summary>
    /// <param name="val">quantity measured in NanoBit</param>
    /// <returns>quantity measured in ZeptoByte</returns>
    public static Quantity<double, ZeptoByte> ToZeptoByte<T>(this BaseQuantity<T, NanoBit> val) where T:IConvertible {
        return new Quantity<double, ZeptoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E9)) * (1E21))
        );
    }
	/// <summary>
    /// Extension method to convert NanoBit to YoctoByte
    /// </summary>
    /// <param name="val">quantity measured in NanoBit</param>
    /// <returns>quantity measured in YoctoByte</returns>
    public static Quantity<double, YoctoByte> ToYoctoByte<T>(this BaseQuantity<T, NanoBit> val) where T:IConvertible {
        return new Quantity<double, YoctoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E9)) * (1E24))
        );
    }
	/// <summary>
    /// Extension method to convert NanoBit to YobiByte
    /// </summary>
    /// <param name="val">quantity measured in NanoBit</param>
    /// <returns>quantity measured in YobiByte</returns>
    public static Quantity<double, YobiByte> ToYobiByte<T>(this BaseQuantity<T, NanoBit> val) where T:IConvertible {
        return new Quantity<double, YobiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E9)) * (1.2089258e-24))
        );
    }
	/// <summary>
    /// Extension method to convert NanoBit to ZebiByte
    /// </summary>
    /// <param name="val">quantity measured in NanoBit</param>
    /// <returns>quantity measured in ZebiByte</returns>
    public static Quantity<double, ZebiByte> ToZebiByte<T>(this BaseQuantity<T, NanoBit> val) where T:IConvertible {
        return new Quantity<double, ZebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E9)) * (1.1805916e-21))
        );
    }
	/// <summary>
    /// Extension method to convert NanoBit to ExbiByte
    /// </summary>
    /// <param name="val">quantity measured in NanoBit</param>
    /// <returns>quantity measured in ExbiByte</returns>
    public static Quantity<double, ExbiByte> ToExbiByte<T>(this BaseQuantity<T, NanoBit> val) where T:IConvertible {
        return new Quantity<double, ExbiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E9)) * (1.1529215e-18))
        );
    }
	/// <summary>
    /// Extension method to convert NanoBit to PebiByte
    /// </summary>
    /// <param name="val">quantity measured in NanoBit</param>
    /// <returns>quantity measured in PebiByte</returns>
    public static Quantity<double, PebiByte> ToPebiByte<T>(this BaseQuantity<T, NanoBit> val) where T:IConvertible {
        return new Quantity<double, PebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E9)) * (1.1258999e-15))
        );
    }
	/// <summary>
    /// Extension method to convert NanoBit to TebiByte
    /// </summary>
    /// <param name="val">quantity measured in NanoBit</param>
    /// <returns>quantity measured in TebiByte</returns>
    public static Quantity<double, TebiByte> ToTebiByte<T>(this BaseQuantity<T, NanoBit> val) where T:IConvertible {
        return new Quantity<double, TebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E9)) * (1.0995116e-12))
        );
    }
	/// <summary>
    /// Extension method to convert NanoBit to GibiByte
    /// </summary>
    /// <param name="val">quantity measured in NanoBit</param>
    /// <returns>quantity measured in GibiByte</returns>
    public static Quantity<double, GibiByte> ToGibiByte<T>(this BaseQuantity<T, NanoBit> val) where T:IConvertible {
        return new Quantity<double, GibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E9)) * (1d/1073741824))
        );
    }
	/// <summary>
    /// Extension method to convert NanoBit to MebiByte
    /// </summary>
    /// <param name="val">quantity measured in NanoBit</param>
    /// <returns>quantity measured in MebiByte</returns>
    public static Quantity<double, MebiByte> ToMebiByte<T>(this BaseQuantity<T, NanoBit> val) where T:IConvertible {
        return new Quantity<double, MebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E9)) * (1d/1048576))
        );
    }
	/// <summary>
    /// Extension method to convert NanoBit to KibiByte
    /// </summary>
    /// <param name="val">quantity measured in NanoBit</param>
    /// <returns>quantity measured in KibiByte</returns>
    public static Quantity<double, KibiByte> ToKibiByte<T>(this BaseQuantity<T, NanoBit> val) where T:IConvertible {
        return new Quantity<double, KibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E9)) * (1d/1024))
        );
    }
	/// <summary>
    /// Extension method to convert Byte to PicoBit
    /// </summary>
    /// <param name="val">quantity measured in Byte</param>
    /// <returns>quantity measured in PicoBit</returns>
    public static Quantity<double, PicoBit> ToPicoBit<T>(this BaseQuantity<T, Byte> val) where T:IConvertible {
        return new Quantity<double, PicoBit>(
            Convert.ToDouble(val.Value) * (8*1E12)
        );
    }
	/// <summary>
    /// Extension method to convert PicoBit to Byte
    /// </summary>
    /// <param name="val">quantity measured in PicoBit</param>
    /// <returns>quantity measured in Byte</returns>
    public static Quantity<double, Byte> ToByte<T>(this BaseQuantity<T, PicoBit> val) where T:IConvertible {
        return new Quantity<double, Byte>(
            Convert.ToDouble(val.Value) * (1d/(8*1E12))
        );
    }
	/// <summary>
    /// Extension method to convert PicoBit to Bit
    /// </summary>
    /// <param name="val">quantity measured in PicoBit</param>
    /// <returns>quantity measured in Bit</returns>
    public static Quantity<double, Bit> ToBit<T>(this BaseQuantity<T, PicoBit> val) where T:IConvertible {
        return new Quantity<double, Bit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E12)) * (8))
        );
    }
	/// <summary>
    /// Extension method to convert PicoBit to YottaBit
    /// </summary>
    /// <param name="val">quantity measured in PicoBit</param>
    /// <returns>quantity measured in YottaBit</returns>
    public static Quantity<double, YottaBit> ToYottaBit<T>(this BaseQuantity<T, PicoBit> val) where T:IConvertible {
        return new Quantity<double, YottaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E12)) * (8*1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert PicoBit to ZettaBit
    /// </summary>
    /// <param name="val">quantity measured in PicoBit</param>
    /// <returns>quantity measured in ZettaBit</returns>
    public static Quantity<double, ZettaBit> ToZettaBit<T>(this BaseQuantity<T, PicoBit> val) where T:IConvertible {
        return new Quantity<double, ZettaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E12)) * (8*1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert PicoBit to ExaBit
    /// </summary>
    /// <param name="val">quantity measured in PicoBit</param>
    /// <returns>quantity measured in ExaBit</returns>
    public static Quantity<double, ExaBit> ToExaBit<T>(this BaseQuantity<T, PicoBit> val) where T:IConvertible {
        return new Quantity<double, ExaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E12)) * (8*1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert PicoBit to PetaBit
    /// </summary>
    /// <param name="val">quantity measured in PicoBit</param>
    /// <returns>quantity measured in PetaBit</returns>
    public static Quantity<double, PetaBit> ToPetaBit<T>(this BaseQuantity<T, PicoBit> val) where T:IConvertible {
        return new Quantity<double, PetaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E12)) * (8*1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert PicoBit to TeraBit
    /// </summary>
    /// <param name="val">quantity measured in PicoBit</param>
    /// <returns>quantity measured in TeraBit</returns>
    public static Quantity<double, TeraBit> ToTeraBit<T>(this BaseQuantity<T, PicoBit> val) where T:IConvertible {
        return new Quantity<double, TeraBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E12)) * (8*1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert PicoBit to GigaBit
    /// </summary>
    /// <param name="val">quantity measured in PicoBit</param>
    /// <returns>quantity measured in GigaBit</returns>
    public static Quantity<double, GigaBit> ToGigaBit<T>(this BaseQuantity<T, PicoBit> val) where T:IConvertible {
        return new Quantity<double, GigaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E12)) * (8*1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert PicoBit to MegaBit
    /// </summary>
    /// <param name="val">quantity measured in PicoBit</param>
    /// <returns>quantity measured in MegaBit</returns>
    public static Quantity<double, MegaBit> ToMegaBit<T>(this BaseQuantity<T, PicoBit> val) where T:IConvertible {
        return new Quantity<double, MegaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E12)) * (8*1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert PicoBit to KiloBit
    /// </summary>
    /// <param name="val">quantity measured in PicoBit</param>
    /// <returns>quantity measured in KiloBit</returns>
    public static Quantity<double, KiloBit> ToKiloBit<T>(this BaseQuantity<T, PicoBit> val) where T:IConvertible {
        return new Quantity<double, KiloBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E12)) * (8*1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert PicoBit to HectoBit
    /// </summary>
    /// <param name="val">quantity measured in PicoBit</param>
    /// <returns>quantity measured in HectoBit</returns>
    public static Quantity<double, HectoBit> ToHectoBit<T>(this BaseQuantity<T, PicoBit> val) where T:IConvertible {
        return new Quantity<double, HectoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E12)) * (8*1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert PicoBit to DekaBit
    /// </summary>
    /// <param name="val">quantity measured in PicoBit</param>
    /// <returns>quantity measured in DekaBit</returns>
    public static Quantity<double, DekaBit> ToDekaBit<T>(this BaseQuantity<T, PicoBit> val) where T:IConvertible {
        return new Quantity<double, DekaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E12)) * (8*1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert PicoBit to DeciBit
    /// </summary>
    /// <param name="val">quantity measured in PicoBit</param>
    /// <returns>quantity measured in DeciBit</returns>
    public static Quantity<double, DeciBit> ToDeciBit<T>(this BaseQuantity<T, PicoBit> val) where T:IConvertible {
        return new Quantity<double, DeciBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E12)) * (8*1E1))
        );
    }
	/// <summary>
    /// Extension method to convert PicoBit to CentiBit
    /// </summary>
    /// <param name="val">quantity measured in PicoBit</param>
    /// <returns>quantity measured in CentiBit</returns>
    public static Quantity<double, CentiBit> ToCentiBit<T>(this BaseQuantity<T, PicoBit> val) where T:IConvertible {
        return new Quantity<double, CentiBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E12)) * (8*1E2))
        );
    }
	/// <summary>
    /// Extension method to convert PicoBit to MilliBit
    /// </summary>
    /// <param name="val">quantity measured in PicoBit</param>
    /// <returns>quantity measured in MilliBit</returns>
    public static Quantity<double, MilliBit> ToMilliBit<T>(this BaseQuantity<T, PicoBit> val) where T:IConvertible {
        return new Quantity<double, MilliBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E12)) * (8*1E3))
        );
    }
	/// <summary>
    /// Extension method to convert PicoBit to MicroBit
    /// </summary>
    /// <param name="val">quantity measured in PicoBit</param>
    /// <returns>quantity measured in MicroBit</returns>
    public static Quantity<double, MicroBit> ToMicroBit<T>(this BaseQuantity<T, PicoBit> val) where T:IConvertible {
        return new Quantity<double, MicroBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E12)) * (8*1E6))
        );
    }
	/// <summary>
    /// Extension method to convert PicoBit to NanoBit
    /// </summary>
    /// <param name="val">quantity measured in PicoBit</param>
    /// <returns>quantity measured in NanoBit</returns>
    public static Quantity<double, NanoBit> ToNanoBit<T>(this BaseQuantity<T, PicoBit> val) where T:IConvertible {
        return new Quantity<double, NanoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E12)) * (8*1E9))
        );
    }
	/// <summary>
    /// Extension method to convert PicoBit to FemtoBit
    /// </summary>
    /// <param name="val">quantity measured in PicoBit</param>
    /// <returns>quantity measured in FemtoBit</returns>
    public static Quantity<double, FemtoBit> ToFemtoBit<T>(this BaseQuantity<T, PicoBit> val) where T:IConvertible {
        return new Quantity<double, FemtoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E12)) * (8*1E15))
        );
    }
	/// <summary>
    /// Extension method to convert PicoBit to AttoBit
    /// </summary>
    /// <param name="val">quantity measured in PicoBit</param>
    /// <returns>quantity measured in AttoBit</returns>
    public static Quantity<double, AttoBit> ToAttoBit<T>(this BaseQuantity<T, PicoBit> val) where T:IConvertible {
        return new Quantity<double, AttoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E12)) * (8*1E18))
        );
    }
	/// <summary>
    /// Extension method to convert PicoBit to ZeptoBit
    /// </summary>
    /// <param name="val">quantity measured in PicoBit</param>
    /// <returns>quantity measured in ZeptoBit</returns>
    public static Quantity<double, ZeptoBit> ToZeptoBit<T>(this BaseQuantity<T, PicoBit> val) where T:IConvertible {
        return new Quantity<double, ZeptoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E12)) * (8*1E21))
        );
    }
	/// <summary>
    /// Extension method to convert PicoBit to YoctoBit
    /// </summary>
    /// <param name="val">quantity measured in PicoBit</param>
    /// <returns>quantity measured in YoctoBit</returns>
    public static Quantity<double, YoctoBit> ToYoctoBit<T>(this BaseQuantity<T, PicoBit> val) where T:IConvertible {
        return new Quantity<double, YoctoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E12)) * (8*1E24))
        );
    }
	/// <summary>
    /// Extension method to convert PicoBit to YottaByte
    /// </summary>
    /// <param name="val">quantity measured in PicoBit</param>
    /// <returns>quantity measured in YottaByte</returns>
    public static Quantity<double, YottaByte> ToYottaByte<T>(this BaseQuantity<T, PicoBit> val) where T:IConvertible {
        return new Quantity<double, YottaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E12)) * (1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert PicoBit to ZettaByte
    /// </summary>
    /// <param name="val">quantity measured in PicoBit</param>
    /// <returns>quantity measured in ZettaByte</returns>
    public static Quantity<double, ZettaByte> ToZettaByte<T>(this BaseQuantity<T, PicoBit> val) where T:IConvertible {
        return new Quantity<double, ZettaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E12)) * (1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert PicoBit to ExaByte
    /// </summary>
    /// <param name="val">quantity measured in PicoBit</param>
    /// <returns>quantity measured in ExaByte</returns>
    public static Quantity<double, ExaByte> ToExaByte<T>(this BaseQuantity<T, PicoBit> val) where T:IConvertible {
        return new Quantity<double, ExaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E12)) * (1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert PicoBit to PetaByte
    /// </summary>
    /// <param name="val">quantity measured in PicoBit</param>
    /// <returns>quantity measured in PetaByte</returns>
    public static Quantity<double, PetaByte> ToPetaByte<T>(this BaseQuantity<T, PicoBit> val) where T:IConvertible {
        return new Quantity<double, PetaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E12)) * (1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert PicoBit to TeraByte
    /// </summary>
    /// <param name="val">quantity measured in PicoBit</param>
    /// <returns>quantity measured in TeraByte</returns>
    public static Quantity<double, TeraByte> ToTeraByte<T>(this BaseQuantity<T, PicoBit> val) where T:IConvertible {
        return new Quantity<double, TeraByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E12)) * (1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert PicoBit to GigaByte
    /// </summary>
    /// <param name="val">quantity measured in PicoBit</param>
    /// <returns>quantity measured in GigaByte</returns>
    public static Quantity<double, GigaByte> ToGigaByte<T>(this BaseQuantity<T, PicoBit> val) where T:IConvertible {
        return new Quantity<double, GigaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E12)) * (1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert PicoBit to MegaByte
    /// </summary>
    /// <param name="val">quantity measured in PicoBit</param>
    /// <returns>quantity measured in MegaByte</returns>
    public static Quantity<double, MegaByte> ToMegaByte<T>(this BaseQuantity<T, PicoBit> val) where T:IConvertible {
        return new Quantity<double, MegaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E12)) * (1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert PicoBit to KiloByte
    /// </summary>
    /// <param name="val">quantity measured in PicoBit</param>
    /// <returns>quantity measured in KiloByte</returns>
    public static Quantity<double, KiloByte> ToKiloByte<T>(this BaseQuantity<T, PicoBit> val) where T:IConvertible {
        return new Quantity<double, KiloByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E12)) * (1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert PicoBit to HectoByte
    /// </summary>
    /// <param name="val">quantity measured in PicoBit</param>
    /// <returns>quantity measured in HectoByte</returns>
    public static Quantity<double, HectoByte> ToHectoByte<T>(this BaseQuantity<T, PicoBit> val) where T:IConvertible {
        return new Quantity<double, HectoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E12)) * (1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert PicoBit to DekaByte
    /// </summary>
    /// <param name="val">quantity measured in PicoBit</param>
    /// <returns>quantity measured in DekaByte</returns>
    public static Quantity<double, DekaByte> ToDekaByte<T>(this BaseQuantity<T, PicoBit> val) where T:IConvertible {
        return new Quantity<double, DekaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E12)) * (1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert PicoBit to DeciByte
    /// </summary>
    /// <param name="val">quantity measured in PicoBit</param>
    /// <returns>quantity measured in DeciByte</returns>
    public static Quantity<double, DeciByte> ToDeciByte<T>(this BaseQuantity<T, PicoBit> val) where T:IConvertible {
        return new Quantity<double, DeciByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E12)) * (1E1))
        );
    }
	/// <summary>
    /// Extension method to convert PicoBit to CentiByte
    /// </summary>
    /// <param name="val">quantity measured in PicoBit</param>
    /// <returns>quantity measured in CentiByte</returns>
    public static Quantity<double, CentiByte> ToCentiByte<T>(this BaseQuantity<T, PicoBit> val) where T:IConvertible {
        return new Quantity<double, CentiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E12)) * (1E2))
        );
    }
	/// <summary>
    /// Extension method to convert PicoBit to MilliByte
    /// </summary>
    /// <param name="val">quantity measured in PicoBit</param>
    /// <returns>quantity measured in MilliByte</returns>
    public static Quantity<double, MilliByte> ToMilliByte<T>(this BaseQuantity<T, PicoBit> val) where T:IConvertible {
        return new Quantity<double, MilliByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E12)) * (1E3))
        );
    }
	/// <summary>
    /// Extension method to convert PicoBit to MicroByte
    /// </summary>
    /// <param name="val">quantity measured in PicoBit</param>
    /// <returns>quantity measured in MicroByte</returns>
    public static Quantity<double, MicroByte> ToMicroByte<T>(this BaseQuantity<T, PicoBit> val) where T:IConvertible {
        return new Quantity<double, MicroByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E12)) * (1E6))
        );
    }
	/// <summary>
    /// Extension method to convert PicoBit to NanoByte
    /// </summary>
    /// <param name="val">quantity measured in PicoBit</param>
    /// <returns>quantity measured in NanoByte</returns>
    public static Quantity<double, NanoByte> ToNanoByte<T>(this BaseQuantity<T, PicoBit> val) where T:IConvertible {
        return new Quantity<double, NanoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E12)) * (1E9))
        );
    }
	/// <summary>
    /// Extension method to convert PicoBit to PicoByte
    /// </summary>
    /// <param name="val">quantity measured in PicoBit</param>
    /// <returns>quantity measured in PicoByte</returns>
    public static Quantity<double, PicoByte> ToPicoByte<T>(this BaseQuantity<T, PicoBit> val) where T:IConvertible {
        return new Quantity<double, PicoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E12)) * (1E12))
        );
    }
	/// <summary>
    /// Extension method to convert PicoBit to FemtoByte
    /// </summary>
    /// <param name="val">quantity measured in PicoBit</param>
    /// <returns>quantity measured in FemtoByte</returns>
    public static Quantity<double, FemtoByte> ToFemtoByte<T>(this BaseQuantity<T, PicoBit> val) where T:IConvertible {
        return new Quantity<double, FemtoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E12)) * (1E15))
        );
    }
	/// <summary>
    /// Extension method to convert PicoBit to AttoByte
    /// </summary>
    /// <param name="val">quantity measured in PicoBit</param>
    /// <returns>quantity measured in AttoByte</returns>
    public static Quantity<double, AttoByte> ToAttoByte<T>(this BaseQuantity<T, PicoBit> val) where T:IConvertible {
        return new Quantity<double, AttoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E12)) * (1E18))
        );
    }
	/// <summary>
    /// Extension method to convert PicoBit to ZeptoByte
    /// </summary>
    /// <param name="val">quantity measured in PicoBit</param>
    /// <returns>quantity measured in ZeptoByte</returns>
    public static Quantity<double, ZeptoByte> ToZeptoByte<T>(this BaseQuantity<T, PicoBit> val) where T:IConvertible {
        return new Quantity<double, ZeptoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E12)) * (1E21))
        );
    }
	/// <summary>
    /// Extension method to convert PicoBit to YoctoByte
    /// </summary>
    /// <param name="val">quantity measured in PicoBit</param>
    /// <returns>quantity measured in YoctoByte</returns>
    public static Quantity<double, YoctoByte> ToYoctoByte<T>(this BaseQuantity<T, PicoBit> val) where T:IConvertible {
        return new Quantity<double, YoctoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E12)) * (1E24))
        );
    }
	/// <summary>
    /// Extension method to convert PicoBit to YobiByte
    /// </summary>
    /// <param name="val">quantity measured in PicoBit</param>
    /// <returns>quantity measured in YobiByte</returns>
    public static Quantity<double, YobiByte> ToYobiByte<T>(this BaseQuantity<T, PicoBit> val) where T:IConvertible {
        return new Quantity<double, YobiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E12)) * (1.2089258e-24))
        );
    }
	/// <summary>
    /// Extension method to convert PicoBit to ZebiByte
    /// </summary>
    /// <param name="val">quantity measured in PicoBit</param>
    /// <returns>quantity measured in ZebiByte</returns>
    public static Quantity<double, ZebiByte> ToZebiByte<T>(this BaseQuantity<T, PicoBit> val) where T:IConvertible {
        return new Quantity<double, ZebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E12)) * (1.1805916e-21))
        );
    }
	/// <summary>
    /// Extension method to convert PicoBit to ExbiByte
    /// </summary>
    /// <param name="val">quantity measured in PicoBit</param>
    /// <returns>quantity measured in ExbiByte</returns>
    public static Quantity<double, ExbiByte> ToExbiByte<T>(this BaseQuantity<T, PicoBit> val) where T:IConvertible {
        return new Quantity<double, ExbiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E12)) * (1.1529215e-18))
        );
    }
	/// <summary>
    /// Extension method to convert PicoBit to PebiByte
    /// </summary>
    /// <param name="val">quantity measured in PicoBit</param>
    /// <returns>quantity measured in PebiByte</returns>
    public static Quantity<double, PebiByte> ToPebiByte<T>(this BaseQuantity<T, PicoBit> val) where T:IConvertible {
        return new Quantity<double, PebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E12)) * (1.1258999e-15))
        );
    }
	/// <summary>
    /// Extension method to convert PicoBit to TebiByte
    /// </summary>
    /// <param name="val">quantity measured in PicoBit</param>
    /// <returns>quantity measured in TebiByte</returns>
    public static Quantity<double, TebiByte> ToTebiByte<T>(this BaseQuantity<T, PicoBit> val) where T:IConvertible {
        return new Quantity<double, TebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E12)) * (1.0995116e-12))
        );
    }
	/// <summary>
    /// Extension method to convert PicoBit to GibiByte
    /// </summary>
    /// <param name="val">quantity measured in PicoBit</param>
    /// <returns>quantity measured in GibiByte</returns>
    public static Quantity<double, GibiByte> ToGibiByte<T>(this BaseQuantity<T, PicoBit> val) where T:IConvertible {
        return new Quantity<double, GibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E12)) * (1d/1073741824))
        );
    }
	/// <summary>
    /// Extension method to convert PicoBit to MebiByte
    /// </summary>
    /// <param name="val">quantity measured in PicoBit</param>
    /// <returns>quantity measured in MebiByte</returns>
    public static Quantity<double, MebiByte> ToMebiByte<T>(this BaseQuantity<T, PicoBit> val) where T:IConvertible {
        return new Quantity<double, MebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E12)) * (1d/1048576))
        );
    }
	/// <summary>
    /// Extension method to convert PicoBit to KibiByte
    /// </summary>
    /// <param name="val">quantity measured in PicoBit</param>
    /// <returns>quantity measured in KibiByte</returns>
    public static Quantity<double, KibiByte> ToKibiByte<T>(this BaseQuantity<T, PicoBit> val) where T:IConvertible {
        return new Quantity<double, KibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E12)) * (1d/1024))
        );
    }
	/// <summary>
    /// Extension method to convert Byte to FemtoBit
    /// </summary>
    /// <param name="val">quantity measured in Byte</param>
    /// <returns>quantity measured in FemtoBit</returns>
    public static Quantity<double, FemtoBit> ToFemtoBit<T>(this BaseQuantity<T, Byte> val) where T:IConvertible {
        return new Quantity<double, FemtoBit>(
            Convert.ToDouble(val.Value) * (8*1E15)
        );
    }
	/// <summary>
    /// Extension method to convert FemtoBit to Byte
    /// </summary>
    /// <param name="val">quantity measured in FemtoBit</param>
    /// <returns>quantity measured in Byte</returns>
    public static Quantity<double, Byte> ToByte<T>(this BaseQuantity<T, FemtoBit> val) where T:IConvertible {
        return new Quantity<double, Byte>(
            Convert.ToDouble(val.Value) * (1d/(8*1E15))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoBit to Bit
    /// </summary>
    /// <param name="val">quantity measured in FemtoBit</param>
    /// <returns>quantity measured in Bit</returns>
    public static Quantity<double, Bit> ToBit<T>(this BaseQuantity<T, FemtoBit> val) where T:IConvertible {
        return new Quantity<double, Bit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E15)) * (8))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoBit to YottaBit
    /// </summary>
    /// <param name="val">quantity measured in FemtoBit</param>
    /// <returns>quantity measured in YottaBit</returns>
    public static Quantity<double, YottaBit> ToYottaBit<T>(this BaseQuantity<T, FemtoBit> val) where T:IConvertible {
        return new Quantity<double, YottaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E15)) * (8*1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoBit to ZettaBit
    /// </summary>
    /// <param name="val">quantity measured in FemtoBit</param>
    /// <returns>quantity measured in ZettaBit</returns>
    public static Quantity<double, ZettaBit> ToZettaBit<T>(this BaseQuantity<T, FemtoBit> val) where T:IConvertible {
        return new Quantity<double, ZettaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E15)) * (8*1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoBit to ExaBit
    /// </summary>
    /// <param name="val">quantity measured in FemtoBit</param>
    /// <returns>quantity measured in ExaBit</returns>
    public static Quantity<double, ExaBit> ToExaBit<T>(this BaseQuantity<T, FemtoBit> val) where T:IConvertible {
        return new Quantity<double, ExaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E15)) * (8*1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoBit to PetaBit
    /// </summary>
    /// <param name="val">quantity measured in FemtoBit</param>
    /// <returns>quantity measured in PetaBit</returns>
    public static Quantity<double, PetaBit> ToPetaBit<T>(this BaseQuantity<T, FemtoBit> val) where T:IConvertible {
        return new Quantity<double, PetaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E15)) * (8*1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoBit to TeraBit
    /// </summary>
    /// <param name="val">quantity measured in FemtoBit</param>
    /// <returns>quantity measured in TeraBit</returns>
    public static Quantity<double, TeraBit> ToTeraBit<T>(this BaseQuantity<T, FemtoBit> val) where T:IConvertible {
        return new Quantity<double, TeraBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E15)) * (8*1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoBit to GigaBit
    /// </summary>
    /// <param name="val">quantity measured in FemtoBit</param>
    /// <returns>quantity measured in GigaBit</returns>
    public static Quantity<double, GigaBit> ToGigaBit<T>(this BaseQuantity<T, FemtoBit> val) where T:IConvertible {
        return new Quantity<double, GigaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E15)) * (8*1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoBit to MegaBit
    /// </summary>
    /// <param name="val">quantity measured in FemtoBit</param>
    /// <returns>quantity measured in MegaBit</returns>
    public static Quantity<double, MegaBit> ToMegaBit<T>(this BaseQuantity<T, FemtoBit> val) where T:IConvertible {
        return new Quantity<double, MegaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E15)) * (8*1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoBit to KiloBit
    /// </summary>
    /// <param name="val">quantity measured in FemtoBit</param>
    /// <returns>quantity measured in KiloBit</returns>
    public static Quantity<double, KiloBit> ToKiloBit<T>(this BaseQuantity<T, FemtoBit> val) where T:IConvertible {
        return new Quantity<double, KiloBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E15)) * (8*1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoBit to HectoBit
    /// </summary>
    /// <param name="val">quantity measured in FemtoBit</param>
    /// <returns>quantity measured in HectoBit</returns>
    public static Quantity<double, HectoBit> ToHectoBit<T>(this BaseQuantity<T, FemtoBit> val) where T:IConvertible {
        return new Quantity<double, HectoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E15)) * (8*1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoBit to DekaBit
    /// </summary>
    /// <param name="val">quantity measured in FemtoBit</param>
    /// <returns>quantity measured in DekaBit</returns>
    public static Quantity<double, DekaBit> ToDekaBit<T>(this BaseQuantity<T, FemtoBit> val) where T:IConvertible {
        return new Quantity<double, DekaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E15)) * (8*1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoBit to DeciBit
    /// </summary>
    /// <param name="val">quantity measured in FemtoBit</param>
    /// <returns>quantity measured in DeciBit</returns>
    public static Quantity<double, DeciBit> ToDeciBit<T>(this BaseQuantity<T, FemtoBit> val) where T:IConvertible {
        return new Quantity<double, DeciBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E15)) * (8*1E1))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoBit to CentiBit
    /// </summary>
    /// <param name="val">quantity measured in FemtoBit</param>
    /// <returns>quantity measured in CentiBit</returns>
    public static Quantity<double, CentiBit> ToCentiBit<T>(this BaseQuantity<T, FemtoBit> val) where T:IConvertible {
        return new Quantity<double, CentiBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E15)) * (8*1E2))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoBit to MilliBit
    /// </summary>
    /// <param name="val">quantity measured in FemtoBit</param>
    /// <returns>quantity measured in MilliBit</returns>
    public static Quantity<double, MilliBit> ToMilliBit<T>(this BaseQuantity<T, FemtoBit> val) where T:IConvertible {
        return new Quantity<double, MilliBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E15)) * (8*1E3))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoBit to MicroBit
    /// </summary>
    /// <param name="val">quantity measured in FemtoBit</param>
    /// <returns>quantity measured in MicroBit</returns>
    public static Quantity<double, MicroBit> ToMicroBit<T>(this BaseQuantity<T, FemtoBit> val) where T:IConvertible {
        return new Quantity<double, MicroBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E15)) * (8*1E6))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoBit to NanoBit
    /// </summary>
    /// <param name="val">quantity measured in FemtoBit</param>
    /// <returns>quantity measured in NanoBit</returns>
    public static Quantity<double, NanoBit> ToNanoBit<T>(this BaseQuantity<T, FemtoBit> val) where T:IConvertible {
        return new Quantity<double, NanoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E15)) * (8*1E9))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoBit to PicoBit
    /// </summary>
    /// <param name="val">quantity measured in FemtoBit</param>
    /// <returns>quantity measured in PicoBit</returns>
    public static Quantity<double, PicoBit> ToPicoBit<T>(this BaseQuantity<T, FemtoBit> val) where T:IConvertible {
        return new Quantity<double, PicoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E15)) * (8*1E12))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoBit to AttoBit
    /// </summary>
    /// <param name="val">quantity measured in FemtoBit</param>
    /// <returns>quantity measured in AttoBit</returns>
    public static Quantity<double, AttoBit> ToAttoBit<T>(this BaseQuantity<T, FemtoBit> val) where T:IConvertible {
        return new Quantity<double, AttoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E15)) * (8*1E18))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoBit to ZeptoBit
    /// </summary>
    /// <param name="val">quantity measured in FemtoBit</param>
    /// <returns>quantity measured in ZeptoBit</returns>
    public static Quantity<double, ZeptoBit> ToZeptoBit<T>(this BaseQuantity<T, FemtoBit> val) where T:IConvertible {
        return new Quantity<double, ZeptoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E15)) * (8*1E21))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoBit to YoctoBit
    /// </summary>
    /// <param name="val">quantity measured in FemtoBit</param>
    /// <returns>quantity measured in YoctoBit</returns>
    public static Quantity<double, YoctoBit> ToYoctoBit<T>(this BaseQuantity<T, FemtoBit> val) where T:IConvertible {
        return new Quantity<double, YoctoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E15)) * (8*1E24))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoBit to YottaByte
    /// </summary>
    /// <param name="val">quantity measured in FemtoBit</param>
    /// <returns>quantity measured in YottaByte</returns>
    public static Quantity<double, YottaByte> ToYottaByte<T>(this BaseQuantity<T, FemtoBit> val) where T:IConvertible {
        return new Quantity<double, YottaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E15)) * (1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoBit to ZettaByte
    /// </summary>
    /// <param name="val">quantity measured in FemtoBit</param>
    /// <returns>quantity measured in ZettaByte</returns>
    public static Quantity<double, ZettaByte> ToZettaByte<T>(this BaseQuantity<T, FemtoBit> val) where T:IConvertible {
        return new Quantity<double, ZettaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E15)) * (1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoBit to ExaByte
    /// </summary>
    /// <param name="val">quantity measured in FemtoBit</param>
    /// <returns>quantity measured in ExaByte</returns>
    public static Quantity<double, ExaByte> ToExaByte<T>(this BaseQuantity<T, FemtoBit> val) where T:IConvertible {
        return new Quantity<double, ExaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E15)) * (1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoBit to PetaByte
    /// </summary>
    /// <param name="val">quantity measured in FemtoBit</param>
    /// <returns>quantity measured in PetaByte</returns>
    public static Quantity<double, PetaByte> ToPetaByte<T>(this BaseQuantity<T, FemtoBit> val) where T:IConvertible {
        return new Quantity<double, PetaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E15)) * (1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoBit to TeraByte
    /// </summary>
    /// <param name="val">quantity measured in FemtoBit</param>
    /// <returns>quantity measured in TeraByte</returns>
    public static Quantity<double, TeraByte> ToTeraByte<T>(this BaseQuantity<T, FemtoBit> val) where T:IConvertible {
        return new Quantity<double, TeraByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E15)) * (1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoBit to GigaByte
    /// </summary>
    /// <param name="val">quantity measured in FemtoBit</param>
    /// <returns>quantity measured in GigaByte</returns>
    public static Quantity<double, GigaByte> ToGigaByte<T>(this BaseQuantity<T, FemtoBit> val) where T:IConvertible {
        return new Quantity<double, GigaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E15)) * (1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoBit to MegaByte
    /// </summary>
    /// <param name="val">quantity measured in FemtoBit</param>
    /// <returns>quantity measured in MegaByte</returns>
    public static Quantity<double, MegaByte> ToMegaByte<T>(this BaseQuantity<T, FemtoBit> val) where T:IConvertible {
        return new Quantity<double, MegaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E15)) * (1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoBit to KiloByte
    /// </summary>
    /// <param name="val">quantity measured in FemtoBit</param>
    /// <returns>quantity measured in KiloByte</returns>
    public static Quantity<double, KiloByte> ToKiloByte<T>(this BaseQuantity<T, FemtoBit> val) where T:IConvertible {
        return new Quantity<double, KiloByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E15)) * (1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoBit to HectoByte
    /// </summary>
    /// <param name="val">quantity measured in FemtoBit</param>
    /// <returns>quantity measured in HectoByte</returns>
    public static Quantity<double, HectoByte> ToHectoByte<T>(this BaseQuantity<T, FemtoBit> val) where T:IConvertible {
        return new Quantity<double, HectoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E15)) * (1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoBit to DekaByte
    /// </summary>
    /// <param name="val">quantity measured in FemtoBit</param>
    /// <returns>quantity measured in DekaByte</returns>
    public static Quantity<double, DekaByte> ToDekaByte<T>(this BaseQuantity<T, FemtoBit> val) where T:IConvertible {
        return new Quantity<double, DekaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E15)) * (1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoBit to DeciByte
    /// </summary>
    /// <param name="val">quantity measured in FemtoBit</param>
    /// <returns>quantity measured in DeciByte</returns>
    public static Quantity<double, DeciByte> ToDeciByte<T>(this BaseQuantity<T, FemtoBit> val) where T:IConvertible {
        return new Quantity<double, DeciByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E15)) * (1E1))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoBit to CentiByte
    /// </summary>
    /// <param name="val">quantity measured in FemtoBit</param>
    /// <returns>quantity measured in CentiByte</returns>
    public static Quantity<double, CentiByte> ToCentiByte<T>(this BaseQuantity<T, FemtoBit> val) where T:IConvertible {
        return new Quantity<double, CentiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E15)) * (1E2))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoBit to MilliByte
    /// </summary>
    /// <param name="val">quantity measured in FemtoBit</param>
    /// <returns>quantity measured in MilliByte</returns>
    public static Quantity<double, MilliByte> ToMilliByte<T>(this BaseQuantity<T, FemtoBit> val) where T:IConvertible {
        return new Quantity<double, MilliByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E15)) * (1E3))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoBit to MicroByte
    /// </summary>
    /// <param name="val">quantity measured in FemtoBit</param>
    /// <returns>quantity measured in MicroByte</returns>
    public static Quantity<double, MicroByte> ToMicroByte<T>(this BaseQuantity<T, FemtoBit> val) where T:IConvertible {
        return new Quantity<double, MicroByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E15)) * (1E6))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoBit to NanoByte
    /// </summary>
    /// <param name="val">quantity measured in FemtoBit</param>
    /// <returns>quantity measured in NanoByte</returns>
    public static Quantity<double, NanoByte> ToNanoByte<T>(this BaseQuantity<T, FemtoBit> val) where T:IConvertible {
        return new Quantity<double, NanoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E15)) * (1E9))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoBit to PicoByte
    /// </summary>
    /// <param name="val">quantity measured in FemtoBit</param>
    /// <returns>quantity measured in PicoByte</returns>
    public static Quantity<double, PicoByte> ToPicoByte<T>(this BaseQuantity<T, FemtoBit> val) where T:IConvertible {
        return new Quantity<double, PicoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E15)) * (1E12))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoBit to FemtoByte
    /// </summary>
    /// <param name="val">quantity measured in FemtoBit</param>
    /// <returns>quantity measured in FemtoByte</returns>
    public static Quantity<double, FemtoByte> ToFemtoByte<T>(this BaseQuantity<T, FemtoBit> val) where T:IConvertible {
        return new Quantity<double, FemtoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E15)) * (1E15))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoBit to AttoByte
    /// </summary>
    /// <param name="val">quantity measured in FemtoBit</param>
    /// <returns>quantity measured in AttoByte</returns>
    public static Quantity<double, AttoByte> ToAttoByte<T>(this BaseQuantity<T, FemtoBit> val) where T:IConvertible {
        return new Quantity<double, AttoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E15)) * (1E18))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoBit to ZeptoByte
    /// </summary>
    /// <param name="val">quantity measured in FemtoBit</param>
    /// <returns>quantity measured in ZeptoByte</returns>
    public static Quantity<double, ZeptoByte> ToZeptoByte<T>(this BaseQuantity<T, FemtoBit> val) where T:IConvertible {
        return new Quantity<double, ZeptoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E15)) * (1E21))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoBit to YoctoByte
    /// </summary>
    /// <param name="val">quantity measured in FemtoBit</param>
    /// <returns>quantity measured in YoctoByte</returns>
    public static Quantity<double, YoctoByte> ToYoctoByte<T>(this BaseQuantity<T, FemtoBit> val) where T:IConvertible {
        return new Quantity<double, YoctoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E15)) * (1E24))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoBit to YobiByte
    /// </summary>
    /// <param name="val">quantity measured in FemtoBit</param>
    /// <returns>quantity measured in YobiByte</returns>
    public static Quantity<double, YobiByte> ToYobiByte<T>(this BaseQuantity<T, FemtoBit> val) where T:IConvertible {
        return new Quantity<double, YobiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E15)) * (1.2089258e-24))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoBit to ZebiByte
    /// </summary>
    /// <param name="val">quantity measured in FemtoBit</param>
    /// <returns>quantity measured in ZebiByte</returns>
    public static Quantity<double, ZebiByte> ToZebiByte<T>(this BaseQuantity<T, FemtoBit> val) where T:IConvertible {
        return new Quantity<double, ZebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E15)) * (1.1805916e-21))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoBit to ExbiByte
    /// </summary>
    /// <param name="val">quantity measured in FemtoBit</param>
    /// <returns>quantity measured in ExbiByte</returns>
    public static Quantity<double, ExbiByte> ToExbiByte<T>(this BaseQuantity<T, FemtoBit> val) where T:IConvertible {
        return new Quantity<double, ExbiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E15)) * (1.1529215e-18))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoBit to PebiByte
    /// </summary>
    /// <param name="val">quantity measured in FemtoBit</param>
    /// <returns>quantity measured in PebiByte</returns>
    public static Quantity<double, PebiByte> ToPebiByte<T>(this BaseQuantity<T, FemtoBit> val) where T:IConvertible {
        return new Quantity<double, PebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E15)) * (1.1258999e-15))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoBit to TebiByte
    /// </summary>
    /// <param name="val">quantity measured in FemtoBit</param>
    /// <returns>quantity measured in TebiByte</returns>
    public static Quantity<double, TebiByte> ToTebiByte<T>(this BaseQuantity<T, FemtoBit> val) where T:IConvertible {
        return new Quantity<double, TebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E15)) * (1.0995116e-12))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoBit to GibiByte
    /// </summary>
    /// <param name="val">quantity measured in FemtoBit</param>
    /// <returns>quantity measured in GibiByte</returns>
    public static Quantity<double, GibiByte> ToGibiByte<T>(this BaseQuantity<T, FemtoBit> val) where T:IConvertible {
        return new Quantity<double, GibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E15)) * (1d/1073741824))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoBit to MebiByte
    /// </summary>
    /// <param name="val">quantity measured in FemtoBit</param>
    /// <returns>quantity measured in MebiByte</returns>
    public static Quantity<double, MebiByte> ToMebiByte<T>(this BaseQuantity<T, FemtoBit> val) where T:IConvertible {
        return new Quantity<double, MebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E15)) * (1d/1048576))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoBit to KibiByte
    /// </summary>
    /// <param name="val">quantity measured in FemtoBit</param>
    /// <returns>quantity measured in KibiByte</returns>
    public static Quantity<double, KibiByte> ToKibiByte<T>(this BaseQuantity<T, FemtoBit> val) where T:IConvertible {
        return new Quantity<double, KibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E15)) * (1d/1024))
        );
    }
	/// <summary>
    /// Extension method to convert Byte to AttoBit
    /// </summary>
    /// <param name="val">quantity measured in Byte</param>
    /// <returns>quantity measured in AttoBit</returns>
    public static Quantity<double, AttoBit> ToAttoBit<T>(this BaseQuantity<T, Byte> val) where T:IConvertible {
        return new Quantity<double, AttoBit>(
            Convert.ToDouble(val.Value) * (8*1E18)
        );
    }
	/// <summary>
    /// Extension method to convert AttoBit to Byte
    /// </summary>
    /// <param name="val">quantity measured in AttoBit</param>
    /// <returns>quantity measured in Byte</returns>
    public static Quantity<double, Byte> ToByte<T>(this BaseQuantity<T, AttoBit> val) where T:IConvertible {
        return new Quantity<double, Byte>(
            Convert.ToDouble(val.Value) * (1d/(8*1E18))
        );
    }
	/// <summary>
    /// Extension method to convert AttoBit to Bit
    /// </summary>
    /// <param name="val">quantity measured in AttoBit</param>
    /// <returns>quantity measured in Bit</returns>
    public static Quantity<double, Bit> ToBit<T>(this BaseQuantity<T, AttoBit> val) where T:IConvertible {
        return new Quantity<double, Bit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E18)) * (8))
        );
    }
	/// <summary>
    /// Extension method to convert AttoBit to YottaBit
    /// </summary>
    /// <param name="val">quantity measured in AttoBit</param>
    /// <returns>quantity measured in YottaBit</returns>
    public static Quantity<double, YottaBit> ToYottaBit<T>(this BaseQuantity<T, AttoBit> val) where T:IConvertible {
        return new Quantity<double, YottaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E18)) * (8*1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert AttoBit to ZettaBit
    /// </summary>
    /// <param name="val">quantity measured in AttoBit</param>
    /// <returns>quantity measured in ZettaBit</returns>
    public static Quantity<double, ZettaBit> ToZettaBit<T>(this BaseQuantity<T, AttoBit> val) where T:IConvertible {
        return new Quantity<double, ZettaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E18)) * (8*1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert AttoBit to ExaBit
    /// </summary>
    /// <param name="val">quantity measured in AttoBit</param>
    /// <returns>quantity measured in ExaBit</returns>
    public static Quantity<double, ExaBit> ToExaBit<T>(this BaseQuantity<T, AttoBit> val) where T:IConvertible {
        return new Quantity<double, ExaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E18)) * (8*1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert AttoBit to PetaBit
    /// </summary>
    /// <param name="val">quantity measured in AttoBit</param>
    /// <returns>quantity measured in PetaBit</returns>
    public static Quantity<double, PetaBit> ToPetaBit<T>(this BaseQuantity<T, AttoBit> val) where T:IConvertible {
        return new Quantity<double, PetaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E18)) * (8*1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert AttoBit to TeraBit
    /// </summary>
    /// <param name="val">quantity measured in AttoBit</param>
    /// <returns>quantity measured in TeraBit</returns>
    public static Quantity<double, TeraBit> ToTeraBit<T>(this BaseQuantity<T, AttoBit> val) where T:IConvertible {
        return new Quantity<double, TeraBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E18)) * (8*1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert AttoBit to GigaBit
    /// </summary>
    /// <param name="val">quantity measured in AttoBit</param>
    /// <returns>quantity measured in GigaBit</returns>
    public static Quantity<double, GigaBit> ToGigaBit<T>(this BaseQuantity<T, AttoBit> val) where T:IConvertible {
        return new Quantity<double, GigaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E18)) * (8*1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert AttoBit to MegaBit
    /// </summary>
    /// <param name="val">quantity measured in AttoBit</param>
    /// <returns>quantity measured in MegaBit</returns>
    public static Quantity<double, MegaBit> ToMegaBit<T>(this BaseQuantity<T, AttoBit> val) where T:IConvertible {
        return new Quantity<double, MegaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E18)) * (8*1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert AttoBit to KiloBit
    /// </summary>
    /// <param name="val">quantity measured in AttoBit</param>
    /// <returns>quantity measured in KiloBit</returns>
    public static Quantity<double, KiloBit> ToKiloBit<T>(this BaseQuantity<T, AttoBit> val) where T:IConvertible {
        return new Quantity<double, KiloBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E18)) * (8*1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert AttoBit to HectoBit
    /// </summary>
    /// <param name="val">quantity measured in AttoBit</param>
    /// <returns>quantity measured in HectoBit</returns>
    public static Quantity<double, HectoBit> ToHectoBit<T>(this BaseQuantity<T, AttoBit> val) where T:IConvertible {
        return new Quantity<double, HectoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E18)) * (8*1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert AttoBit to DekaBit
    /// </summary>
    /// <param name="val">quantity measured in AttoBit</param>
    /// <returns>quantity measured in DekaBit</returns>
    public static Quantity<double, DekaBit> ToDekaBit<T>(this BaseQuantity<T, AttoBit> val) where T:IConvertible {
        return new Quantity<double, DekaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E18)) * (8*1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert AttoBit to DeciBit
    /// </summary>
    /// <param name="val">quantity measured in AttoBit</param>
    /// <returns>quantity measured in DeciBit</returns>
    public static Quantity<double, DeciBit> ToDeciBit<T>(this BaseQuantity<T, AttoBit> val) where T:IConvertible {
        return new Quantity<double, DeciBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E18)) * (8*1E1))
        );
    }
	/// <summary>
    /// Extension method to convert AttoBit to CentiBit
    /// </summary>
    /// <param name="val">quantity measured in AttoBit</param>
    /// <returns>quantity measured in CentiBit</returns>
    public static Quantity<double, CentiBit> ToCentiBit<T>(this BaseQuantity<T, AttoBit> val) where T:IConvertible {
        return new Quantity<double, CentiBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E18)) * (8*1E2))
        );
    }
	/// <summary>
    /// Extension method to convert AttoBit to MilliBit
    /// </summary>
    /// <param name="val">quantity measured in AttoBit</param>
    /// <returns>quantity measured in MilliBit</returns>
    public static Quantity<double, MilliBit> ToMilliBit<T>(this BaseQuantity<T, AttoBit> val) where T:IConvertible {
        return new Quantity<double, MilliBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E18)) * (8*1E3))
        );
    }
	/// <summary>
    /// Extension method to convert AttoBit to MicroBit
    /// </summary>
    /// <param name="val">quantity measured in AttoBit</param>
    /// <returns>quantity measured in MicroBit</returns>
    public static Quantity<double, MicroBit> ToMicroBit<T>(this BaseQuantity<T, AttoBit> val) where T:IConvertible {
        return new Quantity<double, MicroBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E18)) * (8*1E6))
        );
    }
	/// <summary>
    /// Extension method to convert AttoBit to NanoBit
    /// </summary>
    /// <param name="val">quantity measured in AttoBit</param>
    /// <returns>quantity measured in NanoBit</returns>
    public static Quantity<double, NanoBit> ToNanoBit<T>(this BaseQuantity<T, AttoBit> val) where T:IConvertible {
        return new Quantity<double, NanoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E18)) * (8*1E9))
        );
    }
	/// <summary>
    /// Extension method to convert AttoBit to PicoBit
    /// </summary>
    /// <param name="val">quantity measured in AttoBit</param>
    /// <returns>quantity measured in PicoBit</returns>
    public static Quantity<double, PicoBit> ToPicoBit<T>(this BaseQuantity<T, AttoBit> val) where T:IConvertible {
        return new Quantity<double, PicoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E18)) * (8*1E12))
        );
    }
	/// <summary>
    /// Extension method to convert AttoBit to FemtoBit
    /// </summary>
    /// <param name="val">quantity measured in AttoBit</param>
    /// <returns>quantity measured in FemtoBit</returns>
    public static Quantity<double, FemtoBit> ToFemtoBit<T>(this BaseQuantity<T, AttoBit> val) where T:IConvertible {
        return new Quantity<double, FemtoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E18)) * (8*1E15))
        );
    }
	/// <summary>
    /// Extension method to convert AttoBit to ZeptoBit
    /// </summary>
    /// <param name="val">quantity measured in AttoBit</param>
    /// <returns>quantity measured in ZeptoBit</returns>
    public static Quantity<double, ZeptoBit> ToZeptoBit<T>(this BaseQuantity<T, AttoBit> val) where T:IConvertible {
        return new Quantity<double, ZeptoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E18)) * (8*1E21))
        );
    }
	/// <summary>
    /// Extension method to convert AttoBit to YoctoBit
    /// </summary>
    /// <param name="val">quantity measured in AttoBit</param>
    /// <returns>quantity measured in YoctoBit</returns>
    public static Quantity<double, YoctoBit> ToYoctoBit<T>(this BaseQuantity<T, AttoBit> val) where T:IConvertible {
        return new Quantity<double, YoctoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E18)) * (8*1E24))
        );
    }
	/// <summary>
    /// Extension method to convert AttoBit to YottaByte
    /// </summary>
    /// <param name="val">quantity measured in AttoBit</param>
    /// <returns>quantity measured in YottaByte</returns>
    public static Quantity<double, YottaByte> ToYottaByte<T>(this BaseQuantity<T, AttoBit> val) where T:IConvertible {
        return new Quantity<double, YottaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E18)) * (1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert AttoBit to ZettaByte
    /// </summary>
    /// <param name="val">quantity measured in AttoBit</param>
    /// <returns>quantity measured in ZettaByte</returns>
    public static Quantity<double, ZettaByte> ToZettaByte<T>(this BaseQuantity<T, AttoBit> val) where T:IConvertible {
        return new Quantity<double, ZettaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E18)) * (1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert AttoBit to ExaByte
    /// </summary>
    /// <param name="val">quantity measured in AttoBit</param>
    /// <returns>quantity measured in ExaByte</returns>
    public static Quantity<double, ExaByte> ToExaByte<T>(this BaseQuantity<T, AttoBit> val) where T:IConvertible {
        return new Quantity<double, ExaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E18)) * (1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert AttoBit to PetaByte
    /// </summary>
    /// <param name="val">quantity measured in AttoBit</param>
    /// <returns>quantity measured in PetaByte</returns>
    public static Quantity<double, PetaByte> ToPetaByte<T>(this BaseQuantity<T, AttoBit> val) where T:IConvertible {
        return new Quantity<double, PetaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E18)) * (1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert AttoBit to TeraByte
    /// </summary>
    /// <param name="val">quantity measured in AttoBit</param>
    /// <returns>quantity measured in TeraByte</returns>
    public static Quantity<double, TeraByte> ToTeraByte<T>(this BaseQuantity<T, AttoBit> val) where T:IConvertible {
        return new Quantity<double, TeraByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E18)) * (1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert AttoBit to GigaByte
    /// </summary>
    /// <param name="val">quantity measured in AttoBit</param>
    /// <returns>quantity measured in GigaByte</returns>
    public static Quantity<double, GigaByte> ToGigaByte<T>(this BaseQuantity<T, AttoBit> val) where T:IConvertible {
        return new Quantity<double, GigaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E18)) * (1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert AttoBit to MegaByte
    /// </summary>
    /// <param name="val">quantity measured in AttoBit</param>
    /// <returns>quantity measured in MegaByte</returns>
    public static Quantity<double, MegaByte> ToMegaByte<T>(this BaseQuantity<T, AttoBit> val) where T:IConvertible {
        return new Quantity<double, MegaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E18)) * (1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert AttoBit to KiloByte
    /// </summary>
    /// <param name="val">quantity measured in AttoBit</param>
    /// <returns>quantity measured in KiloByte</returns>
    public static Quantity<double, KiloByte> ToKiloByte<T>(this BaseQuantity<T, AttoBit> val) where T:IConvertible {
        return new Quantity<double, KiloByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E18)) * (1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert AttoBit to HectoByte
    /// </summary>
    /// <param name="val">quantity measured in AttoBit</param>
    /// <returns>quantity measured in HectoByte</returns>
    public static Quantity<double, HectoByte> ToHectoByte<T>(this BaseQuantity<T, AttoBit> val) where T:IConvertible {
        return new Quantity<double, HectoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E18)) * (1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert AttoBit to DekaByte
    /// </summary>
    /// <param name="val">quantity measured in AttoBit</param>
    /// <returns>quantity measured in DekaByte</returns>
    public static Quantity<double, DekaByte> ToDekaByte<T>(this BaseQuantity<T, AttoBit> val) where T:IConvertible {
        return new Quantity<double, DekaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E18)) * (1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert AttoBit to DeciByte
    /// </summary>
    /// <param name="val">quantity measured in AttoBit</param>
    /// <returns>quantity measured in DeciByte</returns>
    public static Quantity<double, DeciByte> ToDeciByte<T>(this BaseQuantity<T, AttoBit> val) where T:IConvertible {
        return new Quantity<double, DeciByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E18)) * (1E1))
        );
    }
	/// <summary>
    /// Extension method to convert AttoBit to CentiByte
    /// </summary>
    /// <param name="val">quantity measured in AttoBit</param>
    /// <returns>quantity measured in CentiByte</returns>
    public static Quantity<double, CentiByte> ToCentiByte<T>(this BaseQuantity<T, AttoBit> val) where T:IConvertible {
        return new Quantity<double, CentiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E18)) * (1E2))
        );
    }
	/// <summary>
    /// Extension method to convert AttoBit to MilliByte
    /// </summary>
    /// <param name="val">quantity measured in AttoBit</param>
    /// <returns>quantity measured in MilliByte</returns>
    public static Quantity<double, MilliByte> ToMilliByte<T>(this BaseQuantity<T, AttoBit> val) where T:IConvertible {
        return new Quantity<double, MilliByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E18)) * (1E3))
        );
    }
	/// <summary>
    /// Extension method to convert AttoBit to MicroByte
    /// </summary>
    /// <param name="val">quantity measured in AttoBit</param>
    /// <returns>quantity measured in MicroByte</returns>
    public static Quantity<double, MicroByte> ToMicroByte<T>(this BaseQuantity<T, AttoBit> val) where T:IConvertible {
        return new Quantity<double, MicroByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E18)) * (1E6))
        );
    }
	/// <summary>
    /// Extension method to convert AttoBit to NanoByte
    /// </summary>
    /// <param name="val">quantity measured in AttoBit</param>
    /// <returns>quantity measured in NanoByte</returns>
    public static Quantity<double, NanoByte> ToNanoByte<T>(this BaseQuantity<T, AttoBit> val) where T:IConvertible {
        return new Quantity<double, NanoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E18)) * (1E9))
        );
    }
	/// <summary>
    /// Extension method to convert AttoBit to PicoByte
    /// </summary>
    /// <param name="val">quantity measured in AttoBit</param>
    /// <returns>quantity measured in PicoByte</returns>
    public static Quantity<double, PicoByte> ToPicoByte<T>(this BaseQuantity<T, AttoBit> val) where T:IConvertible {
        return new Quantity<double, PicoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E18)) * (1E12))
        );
    }
	/// <summary>
    /// Extension method to convert AttoBit to FemtoByte
    /// </summary>
    /// <param name="val">quantity measured in AttoBit</param>
    /// <returns>quantity measured in FemtoByte</returns>
    public static Quantity<double, FemtoByte> ToFemtoByte<T>(this BaseQuantity<T, AttoBit> val) where T:IConvertible {
        return new Quantity<double, FemtoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E18)) * (1E15))
        );
    }
	/// <summary>
    /// Extension method to convert AttoBit to AttoByte
    /// </summary>
    /// <param name="val">quantity measured in AttoBit</param>
    /// <returns>quantity measured in AttoByte</returns>
    public static Quantity<double, AttoByte> ToAttoByte<T>(this BaseQuantity<T, AttoBit> val) where T:IConvertible {
        return new Quantity<double, AttoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E18)) * (1E18))
        );
    }
	/// <summary>
    /// Extension method to convert AttoBit to ZeptoByte
    /// </summary>
    /// <param name="val">quantity measured in AttoBit</param>
    /// <returns>quantity measured in ZeptoByte</returns>
    public static Quantity<double, ZeptoByte> ToZeptoByte<T>(this BaseQuantity<T, AttoBit> val) where T:IConvertible {
        return new Quantity<double, ZeptoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E18)) * (1E21))
        );
    }
	/// <summary>
    /// Extension method to convert AttoBit to YoctoByte
    /// </summary>
    /// <param name="val">quantity measured in AttoBit</param>
    /// <returns>quantity measured in YoctoByte</returns>
    public static Quantity<double, YoctoByte> ToYoctoByte<T>(this BaseQuantity<T, AttoBit> val) where T:IConvertible {
        return new Quantity<double, YoctoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E18)) * (1E24))
        );
    }
	/// <summary>
    /// Extension method to convert AttoBit to YobiByte
    /// </summary>
    /// <param name="val">quantity measured in AttoBit</param>
    /// <returns>quantity measured in YobiByte</returns>
    public static Quantity<double, YobiByte> ToYobiByte<T>(this BaseQuantity<T, AttoBit> val) where T:IConvertible {
        return new Quantity<double, YobiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E18)) * (1.2089258e-24))
        );
    }
	/// <summary>
    /// Extension method to convert AttoBit to ZebiByte
    /// </summary>
    /// <param name="val">quantity measured in AttoBit</param>
    /// <returns>quantity measured in ZebiByte</returns>
    public static Quantity<double, ZebiByte> ToZebiByte<T>(this BaseQuantity<T, AttoBit> val) where T:IConvertible {
        return new Quantity<double, ZebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E18)) * (1.1805916e-21))
        );
    }
	/// <summary>
    /// Extension method to convert AttoBit to ExbiByte
    /// </summary>
    /// <param name="val">quantity measured in AttoBit</param>
    /// <returns>quantity measured in ExbiByte</returns>
    public static Quantity<double, ExbiByte> ToExbiByte<T>(this BaseQuantity<T, AttoBit> val) where T:IConvertible {
        return new Quantity<double, ExbiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E18)) * (1.1529215e-18))
        );
    }
	/// <summary>
    /// Extension method to convert AttoBit to PebiByte
    /// </summary>
    /// <param name="val">quantity measured in AttoBit</param>
    /// <returns>quantity measured in PebiByte</returns>
    public static Quantity<double, PebiByte> ToPebiByte<T>(this BaseQuantity<T, AttoBit> val) where T:IConvertible {
        return new Quantity<double, PebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E18)) * (1.1258999e-15))
        );
    }
	/// <summary>
    /// Extension method to convert AttoBit to TebiByte
    /// </summary>
    /// <param name="val">quantity measured in AttoBit</param>
    /// <returns>quantity measured in TebiByte</returns>
    public static Quantity<double, TebiByte> ToTebiByte<T>(this BaseQuantity<T, AttoBit> val) where T:IConvertible {
        return new Quantity<double, TebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E18)) * (1.0995116e-12))
        );
    }
	/// <summary>
    /// Extension method to convert AttoBit to GibiByte
    /// </summary>
    /// <param name="val">quantity measured in AttoBit</param>
    /// <returns>quantity measured in GibiByte</returns>
    public static Quantity<double, GibiByte> ToGibiByte<T>(this BaseQuantity<T, AttoBit> val) where T:IConvertible {
        return new Quantity<double, GibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E18)) * (1d/1073741824))
        );
    }
	/// <summary>
    /// Extension method to convert AttoBit to MebiByte
    /// </summary>
    /// <param name="val">quantity measured in AttoBit</param>
    /// <returns>quantity measured in MebiByte</returns>
    public static Quantity<double, MebiByte> ToMebiByte<T>(this BaseQuantity<T, AttoBit> val) where T:IConvertible {
        return new Quantity<double, MebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E18)) * (1d/1048576))
        );
    }
	/// <summary>
    /// Extension method to convert AttoBit to KibiByte
    /// </summary>
    /// <param name="val">quantity measured in AttoBit</param>
    /// <returns>quantity measured in KibiByte</returns>
    public static Quantity<double, KibiByte> ToKibiByte<T>(this BaseQuantity<T, AttoBit> val) where T:IConvertible {
        return new Quantity<double, KibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E18)) * (1d/1024))
        );
    }
	/// <summary>
    /// Extension method to convert Byte to ZeptoBit
    /// </summary>
    /// <param name="val">quantity measured in Byte</param>
    /// <returns>quantity measured in ZeptoBit</returns>
    public static Quantity<double, ZeptoBit> ToZeptoBit<T>(this BaseQuantity<T, Byte> val) where T:IConvertible {
        return new Quantity<double, ZeptoBit>(
            Convert.ToDouble(val.Value) * (8*1E21)
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoBit to Byte
    /// </summary>
    /// <param name="val">quantity measured in ZeptoBit</param>
    /// <returns>quantity measured in Byte</returns>
    public static Quantity<double, Byte> ToByte<T>(this BaseQuantity<T, ZeptoBit> val) where T:IConvertible {
        return new Quantity<double, Byte>(
            Convert.ToDouble(val.Value) * (1d/(8*1E21))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoBit to Bit
    /// </summary>
    /// <param name="val">quantity measured in ZeptoBit</param>
    /// <returns>quantity measured in Bit</returns>
    public static Quantity<double, Bit> ToBit<T>(this BaseQuantity<T, ZeptoBit> val) where T:IConvertible {
        return new Quantity<double, Bit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E21)) * (8))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoBit to YottaBit
    /// </summary>
    /// <param name="val">quantity measured in ZeptoBit</param>
    /// <returns>quantity measured in YottaBit</returns>
    public static Quantity<double, YottaBit> ToYottaBit<T>(this BaseQuantity<T, ZeptoBit> val) where T:IConvertible {
        return new Quantity<double, YottaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E21)) * (8*1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoBit to ZettaBit
    /// </summary>
    /// <param name="val">quantity measured in ZeptoBit</param>
    /// <returns>quantity measured in ZettaBit</returns>
    public static Quantity<double, ZettaBit> ToZettaBit<T>(this BaseQuantity<T, ZeptoBit> val) where T:IConvertible {
        return new Quantity<double, ZettaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E21)) * (8*1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoBit to ExaBit
    /// </summary>
    /// <param name="val">quantity measured in ZeptoBit</param>
    /// <returns>quantity measured in ExaBit</returns>
    public static Quantity<double, ExaBit> ToExaBit<T>(this BaseQuantity<T, ZeptoBit> val) where T:IConvertible {
        return new Quantity<double, ExaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E21)) * (8*1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoBit to PetaBit
    /// </summary>
    /// <param name="val">quantity measured in ZeptoBit</param>
    /// <returns>quantity measured in PetaBit</returns>
    public static Quantity<double, PetaBit> ToPetaBit<T>(this BaseQuantity<T, ZeptoBit> val) where T:IConvertible {
        return new Quantity<double, PetaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E21)) * (8*1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoBit to TeraBit
    /// </summary>
    /// <param name="val">quantity measured in ZeptoBit</param>
    /// <returns>quantity measured in TeraBit</returns>
    public static Quantity<double, TeraBit> ToTeraBit<T>(this BaseQuantity<T, ZeptoBit> val) where T:IConvertible {
        return new Quantity<double, TeraBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E21)) * (8*1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoBit to GigaBit
    /// </summary>
    /// <param name="val">quantity measured in ZeptoBit</param>
    /// <returns>quantity measured in GigaBit</returns>
    public static Quantity<double, GigaBit> ToGigaBit<T>(this BaseQuantity<T, ZeptoBit> val) where T:IConvertible {
        return new Quantity<double, GigaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E21)) * (8*1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoBit to MegaBit
    /// </summary>
    /// <param name="val">quantity measured in ZeptoBit</param>
    /// <returns>quantity measured in MegaBit</returns>
    public static Quantity<double, MegaBit> ToMegaBit<T>(this BaseQuantity<T, ZeptoBit> val) where T:IConvertible {
        return new Quantity<double, MegaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E21)) * (8*1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoBit to KiloBit
    /// </summary>
    /// <param name="val">quantity measured in ZeptoBit</param>
    /// <returns>quantity measured in KiloBit</returns>
    public static Quantity<double, KiloBit> ToKiloBit<T>(this BaseQuantity<T, ZeptoBit> val) where T:IConvertible {
        return new Quantity<double, KiloBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E21)) * (8*1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoBit to HectoBit
    /// </summary>
    /// <param name="val">quantity measured in ZeptoBit</param>
    /// <returns>quantity measured in HectoBit</returns>
    public static Quantity<double, HectoBit> ToHectoBit<T>(this BaseQuantity<T, ZeptoBit> val) where T:IConvertible {
        return new Quantity<double, HectoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E21)) * (8*1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoBit to DekaBit
    /// </summary>
    /// <param name="val">quantity measured in ZeptoBit</param>
    /// <returns>quantity measured in DekaBit</returns>
    public static Quantity<double, DekaBit> ToDekaBit<T>(this BaseQuantity<T, ZeptoBit> val) where T:IConvertible {
        return new Quantity<double, DekaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E21)) * (8*1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoBit to DeciBit
    /// </summary>
    /// <param name="val">quantity measured in ZeptoBit</param>
    /// <returns>quantity measured in DeciBit</returns>
    public static Quantity<double, DeciBit> ToDeciBit<T>(this BaseQuantity<T, ZeptoBit> val) where T:IConvertible {
        return new Quantity<double, DeciBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E21)) * (8*1E1))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoBit to CentiBit
    /// </summary>
    /// <param name="val">quantity measured in ZeptoBit</param>
    /// <returns>quantity measured in CentiBit</returns>
    public static Quantity<double, CentiBit> ToCentiBit<T>(this BaseQuantity<T, ZeptoBit> val) where T:IConvertible {
        return new Quantity<double, CentiBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E21)) * (8*1E2))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoBit to MilliBit
    /// </summary>
    /// <param name="val">quantity measured in ZeptoBit</param>
    /// <returns>quantity measured in MilliBit</returns>
    public static Quantity<double, MilliBit> ToMilliBit<T>(this BaseQuantity<T, ZeptoBit> val) where T:IConvertible {
        return new Quantity<double, MilliBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E21)) * (8*1E3))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoBit to MicroBit
    /// </summary>
    /// <param name="val">quantity measured in ZeptoBit</param>
    /// <returns>quantity measured in MicroBit</returns>
    public static Quantity<double, MicroBit> ToMicroBit<T>(this BaseQuantity<T, ZeptoBit> val) where T:IConvertible {
        return new Quantity<double, MicroBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E21)) * (8*1E6))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoBit to NanoBit
    /// </summary>
    /// <param name="val">quantity measured in ZeptoBit</param>
    /// <returns>quantity measured in NanoBit</returns>
    public static Quantity<double, NanoBit> ToNanoBit<T>(this BaseQuantity<T, ZeptoBit> val) where T:IConvertible {
        return new Quantity<double, NanoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E21)) * (8*1E9))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoBit to PicoBit
    /// </summary>
    /// <param name="val">quantity measured in ZeptoBit</param>
    /// <returns>quantity measured in PicoBit</returns>
    public static Quantity<double, PicoBit> ToPicoBit<T>(this BaseQuantity<T, ZeptoBit> val) where T:IConvertible {
        return new Quantity<double, PicoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E21)) * (8*1E12))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoBit to FemtoBit
    /// </summary>
    /// <param name="val">quantity measured in ZeptoBit</param>
    /// <returns>quantity measured in FemtoBit</returns>
    public static Quantity<double, FemtoBit> ToFemtoBit<T>(this BaseQuantity<T, ZeptoBit> val) where T:IConvertible {
        return new Quantity<double, FemtoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E21)) * (8*1E15))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoBit to AttoBit
    /// </summary>
    /// <param name="val">quantity measured in ZeptoBit</param>
    /// <returns>quantity measured in AttoBit</returns>
    public static Quantity<double, AttoBit> ToAttoBit<T>(this BaseQuantity<T, ZeptoBit> val) where T:IConvertible {
        return new Quantity<double, AttoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E21)) * (8*1E18))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoBit to YoctoBit
    /// </summary>
    /// <param name="val">quantity measured in ZeptoBit</param>
    /// <returns>quantity measured in YoctoBit</returns>
    public static Quantity<double, YoctoBit> ToYoctoBit<T>(this BaseQuantity<T, ZeptoBit> val) where T:IConvertible {
        return new Quantity<double, YoctoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E21)) * (8*1E24))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoBit to YottaByte
    /// </summary>
    /// <param name="val">quantity measured in ZeptoBit</param>
    /// <returns>quantity measured in YottaByte</returns>
    public static Quantity<double, YottaByte> ToYottaByte<T>(this BaseQuantity<T, ZeptoBit> val) where T:IConvertible {
        return new Quantity<double, YottaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E21)) * (1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoBit to ZettaByte
    /// </summary>
    /// <param name="val">quantity measured in ZeptoBit</param>
    /// <returns>quantity measured in ZettaByte</returns>
    public static Quantity<double, ZettaByte> ToZettaByte<T>(this BaseQuantity<T, ZeptoBit> val) where T:IConvertible {
        return new Quantity<double, ZettaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E21)) * (1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoBit to ExaByte
    /// </summary>
    /// <param name="val">quantity measured in ZeptoBit</param>
    /// <returns>quantity measured in ExaByte</returns>
    public static Quantity<double, ExaByte> ToExaByte<T>(this BaseQuantity<T, ZeptoBit> val) where T:IConvertible {
        return new Quantity<double, ExaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E21)) * (1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoBit to PetaByte
    /// </summary>
    /// <param name="val">quantity measured in ZeptoBit</param>
    /// <returns>quantity measured in PetaByte</returns>
    public static Quantity<double, PetaByte> ToPetaByte<T>(this BaseQuantity<T, ZeptoBit> val) where T:IConvertible {
        return new Quantity<double, PetaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E21)) * (1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoBit to TeraByte
    /// </summary>
    /// <param name="val">quantity measured in ZeptoBit</param>
    /// <returns>quantity measured in TeraByte</returns>
    public static Quantity<double, TeraByte> ToTeraByte<T>(this BaseQuantity<T, ZeptoBit> val) where T:IConvertible {
        return new Quantity<double, TeraByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E21)) * (1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoBit to GigaByte
    /// </summary>
    /// <param name="val">quantity measured in ZeptoBit</param>
    /// <returns>quantity measured in GigaByte</returns>
    public static Quantity<double, GigaByte> ToGigaByte<T>(this BaseQuantity<T, ZeptoBit> val) where T:IConvertible {
        return new Quantity<double, GigaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E21)) * (1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoBit to MegaByte
    /// </summary>
    /// <param name="val">quantity measured in ZeptoBit</param>
    /// <returns>quantity measured in MegaByte</returns>
    public static Quantity<double, MegaByte> ToMegaByte<T>(this BaseQuantity<T, ZeptoBit> val) where T:IConvertible {
        return new Quantity<double, MegaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E21)) * (1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoBit to KiloByte
    /// </summary>
    /// <param name="val">quantity measured in ZeptoBit</param>
    /// <returns>quantity measured in KiloByte</returns>
    public static Quantity<double, KiloByte> ToKiloByte<T>(this BaseQuantity<T, ZeptoBit> val) where T:IConvertible {
        return new Quantity<double, KiloByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E21)) * (1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoBit to HectoByte
    /// </summary>
    /// <param name="val">quantity measured in ZeptoBit</param>
    /// <returns>quantity measured in HectoByte</returns>
    public static Quantity<double, HectoByte> ToHectoByte<T>(this BaseQuantity<T, ZeptoBit> val) where T:IConvertible {
        return new Quantity<double, HectoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E21)) * (1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoBit to DekaByte
    /// </summary>
    /// <param name="val">quantity measured in ZeptoBit</param>
    /// <returns>quantity measured in DekaByte</returns>
    public static Quantity<double, DekaByte> ToDekaByte<T>(this BaseQuantity<T, ZeptoBit> val) where T:IConvertible {
        return new Quantity<double, DekaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E21)) * (1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoBit to DeciByte
    /// </summary>
    /// <param name="val">quantity measured in ZeptoBit</param>
    /// <returns>quantity measured in DeciByte</returns>
    public static Quantity<double, DeciByte> ToDeciByte<T>(this BaseQuantity<T, ZeptoBit> val) where T:IConvertible {
        return new Quantity<double, DeciByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E21)) * (1E1))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoBit to CentiByte
    /// </summary>
    /// <param name="val">quantity measured in ZeptoBit</param>
    /// <returns>quantity measured in CentiByte</returns>
    public static Quantity<double, CentiByte> ToCentiByte<T>(this BaseQuantity<T, ZeptoBit> val) where T:IConvertible {
        return new Quantity<double, CentiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E21)) * (1E2))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoBit to MilliByte
    /// </summary>
    /// <param name="val">quantity measured in ZeptoBit</param>
    /// <returns>quantity measured in MilliByte</returns>
    public static Quantity<double, MilliByte> ToMilliByte<T>(this BaseQuantity<T, ZeptoBit> val) where T:IConvertible {
        return new Quantity<double, MilliByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E21)) * (1E3))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoBit to MicroByte
    /// </summary>
    /// <param name="val">quantity measured in ZeptoBit</param>
    /// <returns>quantity measured in MicroByte</returns>
    public static Quantity<double, MicroByte> ToMicroByte<T>(this BaseQuantity<T, ZeptoBit> val) where T:IConvertible {
        return new Quantity<double, MicroByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E21)) * (1E6))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoBit to NanoByte
    /// </summary>
    /// <param name="val">quantity measured in ZeptoBit</param>
    /// <returns>quantity measured in NanoByte</returns>
    public static Quantity<double, NanoByte> ToNanoByte<T>(this BaseQuantity<T, ZeptoBit> val) where T:IConvertible {
        return new Quantity<double, NanoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E21)) * (1E9))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoBit to PicoByte
    /// </summary>
    /// <param name="val">quantity measured in ZeptoBit</param>
    /// <returns>quantity measured in PicoByte</returns>
    public static Quantity<double, PicoByte> ToPicoByte<T>(this BaseQuantity<T, ZeptoBit> val) where T:IConvertible {
        return new Quantity<double, PicoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E21)) * (1E12))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoBit to FemtoByte
    /// </summary>
    /// <param name="val">quantity measured in ZeptoBit</param>
    /// <returns>quantity measured in FemtoByte</returns>
    public static Quantity<double, FemtoByte> ToFemtoByte<T>(this BaseQuantity<T, ZeptoBit> val) where T:IConvertible {
        return new Quantity<double, FemtoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E21)) * (1E15))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoBit to AttoByte
    /// </summary>
    /// <param name="val">quantity measured in ZeptoBit</param>
    /// <returns>quantity measured in AttoByte</returns>
    public static Quantity<double, AttoByte> ToAttoByte<T>(this BaseQuantity<T, ZeptoBit> val) where T:IConvertible {
        return new Quantity<double, AttoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E21)) * (1E18))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoBit to ZeptoByte
    /// </summary>
    /// <param name="val">quantity measured in ZeptoBit</param>
    /// <returns>quantity measured in ZeptoByte</returns>
    public static Quantity<double, ZeptoByte> ToZeptoByte<T>(this BaseQuantity<T, ZeptoBit> val) where T:IConvertible {
        return new Quantity<double, ZeptoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E21)) * (1E21))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoBit to YoctoByte
    /// </summary>
    /// <param name="val">quantity measured in ZeptoBit</param>
    /// <returns>quantity measured in YoctoByte</returns>
    public static Quantity<double, YoctoByte> ToYoctoByte<T>(this BaseQuantity<T, ZeptoBit> val) where T:IConvertible {
        return new Quantity<double, YoctoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E21)) * (1E24))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoBit to YobiByte
    /// </summary>
    /// <param name="val">quantity measured in ZeptoBit</param>
    /// <returns>quantity measured in YobiByte</returns>
    public static Quantity<double, YobiByte> ToYobiByte<T>(this BaseQuantity<T, ZeptoBit> val) where T:IConvertible {
        return new Quantity<double, YobiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E21)) * (1.2089258e-24))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoBit to ZebiByte
    /// </summary>
    /// <param name="val">quantity measured in ZeptoBit</param>
    /// <returns>quantity measured in ZebiByte</returns>
    public static Quantity<double, ZebiByte> ToZebiByte<T>(this BaseQuantity<T, ZeptoBit> val) where T:IConvertible {
        return new Quantity<double, ZebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E21)) * (1.1805916e-21))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoBit to ExbiByte
    /// </summary>
    /// <param name="val">quantity measured in ZeptoBit</param>
    /// <returns>quantity measured in ExbiByte</returns>
    public static Quantity<double, ExbiByte> ToExbiByte<T>(this BaseQuantity<T, ZeptoBit> val) where T:IConvertible {
        return new Quantity<double, ExbiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E21)) * (1.1529215e-18))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoBit to PebiByte
    /// </summary>
    /// <param name="val">quantity measured in ZeptoBit</param>
    /// <returns>quantity measured in PebiByte</returns>
    public static Quantity<double, PebiByte> ToPebiByte<T>(this BaseQuantity<T, ZeptoBit> val) where T:IConvertible {
        return new Quantity<double, PebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E21)) * (1.1258999e-15))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoBit to TebiByte
    /// </summary>
    /// <param name="val">quantity measured in ZeptoBit</param>
    /// <returns>quantity measured in TebiByte</returns>
    public static Quantity<double, TebiByte> ToTebiByte<T>(this BaseQuantity<T, ZeptoBit> val) where T:IConvertible {
        return new Quantity<double, TebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E21)) * (1.0995116e-12))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoBit to GibiByte
    /// </summary>
    /// <param name="val">quantity measured in ZeptoBit</param>
    /// <returns>quantity measured in GibiByte</returns>
    public static Quantity<double, GibiByte> ToGibiByte<T>(this BaseQuantity<T, ZeptoBit> val) where T:IConvertible {
        return new Quantity<double, GibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E21)) * (1d/1073741824))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoBit to MebiByte
    /// </summary>
    /// <param name="val">quantity measured in ZeptoBit</param>
    /// <returns>quantity measured in MebiByte</returns>
    public static Quantity<double, MebiByte> ToMebiByte<T>(this BaseQuantity<T, ZeptoBit> val) where T:IConvertible {
        return new Quantity<double, MebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E21)) * (1d/1048576))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoBit to KibiByte
    /// </summary>
    /// <param name="val">quantity measured in ZeptoBit</param>
    /// <returns>quantity measured in KibiByte</returns>
    public static Quantity<double, KibiByte> ToKibiByte<T>(this BaseQuantity<T, ZeptoBit> val) where T:IConvertible {
        return new Quantity<double, KibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E21)) * (1d/1024))
        );
    }
	/// <summary>
    /// Extension method to convert Byte to YoctoBit
    /// </summary>
    /// <param name="val">quantity measured in Byte</param>
    /// <returns>quantity measured in YoctoBit</returns>
    public static Quantity<double, YoctoBit> ToYoctoBit<T>(this BaseQuantity<T, Byte> val) where T:IConvertible {
        return new Quantity<double, YoctoBit>(
            Convert.ToDouble(val.Value) * (8*1E24)
        );
    }
	/// <summary>
    /// Extension method to convert YoctoBit to Byte
    /// </summary>
    /// <param name="val">quantity measured in YoctoBit</param>
    /// <returns>quantity measured in Byte</returns>
    public static Quantity<double, Byte> ToByte<T>(this BaseQuantity<T, YoctoBit> val) where T:IConvertible {
        return new Quantity<double, Byte>(
            Convert.ToDouble(val.Value) * (1d/(8*1E24))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoBit to Bit
    /// </summary>
    /// <param name="val">quantity measured in YoctoBit</param>
    /// <returns>quantity measured in Bit</returns>
    public static Quantity<double, Bit> ToBit<T>(this BaseQuantity<T, YoctoBit> val) where T:IConvertible {
        return new Quantity<double, Bit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E24)) * (8))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoBit to YottaBit
    /// </summary>
    /// <param name="val">quantity measured in YoctoBit</param>
    /// <returns>quantity measured in YottaBit</returns>
    public static Quantity<double, YottaBit> ToYottaBit<T>(this BaseQuantity<T, YoctoBit> val) where T:IConvertible {
        return new Quantity<double, YottaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E24)) * (8*1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoBit to ZettaBit
    /// </summary>
    /// <param name="val">quantity measured in YoctoBit</param>
    /// <returns>quantity measured in ZettaBit</returns>
    public static Quantity<double, ZettaBit> ToZettaBit<T>(this BaseQuantity<T, YoctoBit> val) where T:IConvertible {
        return new Quantity<double, ZettaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E24)) * (8*1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoBit to ExaBit
    /// </summary>
    /// <param name="val">quantity measured in YoctoBit</param>
    /// <returns>quantity measured in ExaBit</returns>
    public static Quantity<double, ExaBit> ToExaBit<T>(this BaseQuantity<T, YoctoBit> val) where T:IConvertible {
        return new Quantity<double, ExaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E24)) * (8*1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoBit to PetaBit
    /// </summary>
    /// <param name="val">quantity measured in YoctoBit</param>
    /// <returns>quantity measured in PetaBit</returns>
    public static Quantity<double, PetaBit> ToPetaBit<T>(this BaseQuantity<T, YoctoBit> val) where T:IConvertible {
        return new Quantity<double, PetaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E24)) * (8*1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoBit to TeraBit
    /// </summary>
    /// <param name="val">quantity measured in YoctoBit</param>
    /// <returns>quantity measured in TeraBit</returns>
    public static Quantity<double, TeraBit> ToTeraBit<T>(this BaseQuantity<T, YoctoBit> val) where T:IConvertible {
        return new Quantity<double, TeraBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E24)) * (8*1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoBit to GigaBit
    /// </summary>
    /// <param name="val">quantity measured in YoctoBit</param>
    /// <returns>quantity measured in GigaBit</returns>
    public static Quantity<double, GigaBit> ToGigaBit<T>(this BaseQuantity<T, YoctoBit> val) where T:IConvertible {
        return new Quantity<double, GigaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E24)) * (8*1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoBit to MegaBit
    /// </summary>
    /// <param name="val">quantity measured in YoctoBit</param>
    /// <returns>quantity measured in MegaBit</returns>
    public static Quantity<double, MegaBit> ToMegaBit<T>(this BaseQuantity<T, YoctoBit> val) where T:IConvertible {
        return new Quantity<double, MegaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E24)) * (8*1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoBit to KiloBit
    /// </summary>
    /// <param name="val">quantity measured in YoctoBit</param>
    /// <returns>quantity measured in KiloBit</returns>
    public static Quantity<double, KiloBit> ToKiloBit<T>(this BaseQuantity<T, YoctoBit> val) where T:IConvertible {
        return new Quantity<double, KiloBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E24)) * (8*1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoBit to HectoBit
    /// </summary>
    /// <param name="val">quantity measured in YoctoBit</param>
    /// <returns>quantity measured in HectoBit</returns>
    public static Quantity<double, HectoBit> ToHectoBit<T>(this BaseQuantity<T, YoctoBit> val) where T:IConvertible {
        return new Quantity<double, HectoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E24)) * (8*1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoBit to DekaBit
    /// </summary>
    /// <param name="val">quantity measured in YoctoBit</param>
    /// <returns>quantity measured in DekaBit</returns>
    public static Quantity<double, DekaBit> ToDekaBit<T>(this BaseQuantity<T, YoctoBit> val) where T:IConvertible {
        return new Quantity<double, DekaBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E24)) * (8*1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoBit to DeciBit
    /// </summary>
    /// <param name="val">quantity measured in YoctoBit</param>
    /// <returns>quantity measured in DeciBit</returns>
    public static Quantity<double, DeciBit> ToDeciBit<T>(this BaseQuantity<T, YoctoBit> val) where T:IConvertible {
        return new Quantity<double, DeciBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E24)) * (8*1E1))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoBit to CentiBit
    /// </summary>
    /// <param name="val">quantity measured in YoctoBit</param>
    /// <returns>quantity measured in CentiBit</returns>
    public static Quantity<double, CentiBit> ToCentiBit<T>(this BaseQuantity<T, YoctoBit> val) where T:IConvertible {
        return new Quantity<double, CentiBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E24)) * (8*1E2))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoBit to MilliBit
    /// </summary>
    /// <param name="val">quantity measured in YoctoBit</param>
    /// <returns>quantity measured in MilliBit</returns>
    public static Quantity<double, MilliBit> ToMilliBit<T>(this BaseQuantity<T, YoctoBit> val) where T:IConvertible {
        return new Quantity<double, MilliBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E24)) * (8*1E3))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoBit to MicroBit
    /// </summary>
    /// <param name="val">quantity measured in YoctoBit</param>
    /// <returns>quantity measured in MicroBit</returns>
    public static Quantity<double, MicroBit> ToMicroBit<T>(this BaseQuantity<T, YoctoBit> val) where T:IConvertible {
        return new Quantity<double, MicroBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E24)) * (8*1E6))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoBit to NanoBit
    /// </summary>
    /// <param name="val">quantity measured in YoctoBit</param>
    /// <returns>quantity measured in NanoBit</returns>
    public static Quantity<double, NanoBit> ToNanoBit<T>(this BaseQuantity<T, YoctoBit> val) where T:IConvertible {
        return new Quantity<double, NanoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E24)) * (8*1E9))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoBit to PicoBit
    /// </summary>
    /// <param name="val">quantity measured in YoctoBit</param>
    /// <returns>quantity measured in PicoBit</returns>
    public static Quantity<double, PicoBit> ToPicoBit<T>(this BaseQuantity<T, YoctoBit> val) where T:IConvertible {
        return new Quantity<double, PicoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E24)) * (8*1E12))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoBit to FemtoBit
    /// </summary>
    /// <param name="val">quantity measured in YoctoBit</param>
    /// <returns>quantity measured in FemtoBit</returns>
    public static Quantity<double, FemtoBit> ToFemtoBit<T>(this BaseQuantity<T, YoctoBit> val) where T:IConvertible {
        return new Quantity<double, FemtoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E24)) * (8*1E15))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoBit to AttoBit
    /// </summary>
    /// <param name="val">quantity measured in YoctoBit</param>
    /// <returns>quantity measured in AttoBit</returns>
    public static Quantity<double, AttoBit> ToAttoBit<T>(this BaseQuantity<T, YoctoBit> val) where T:IConvertible {
        return new Quantity<double, AttoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E24)) * (8*1E18))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoBit to ZeptoBit
    /// </summary>
    /// <param name="val">quantity measured in YoctoBit</param>
    /// <returns>quantity measured in ZeptoBit</returns>
    public static Quantity<double, ZeptoBit> ToZeptoBit<T>(this BaseQuantity<T, YoctoBit> val) where T:IConvertible {
        return new Quantity<double, ZeptoBit>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E24)) * (8*1E21))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoBit to YottaByte
    /// </summary>
    /// <param name="val">quantity measured in YoctoBit</param>
    /// <returns>quantity measured in YottaByte</returns>
    public static Quantity<double, YottaByte> ToYottaByte<T>(this BaseQuantity<T, YoctoBit> val) where T:IConvertible {
        return new Quantity<double, YottaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E24)) * (1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoBit to ZettaByte
    /// </summary>
    /// <param name="val">quantity measured in YoctoBit</param>
    /// <returns>quantity measured in ZettaByte</returns>
    public static Quantity<double, ZettaByte> ToZettaByte<T>(this BaseQuantity<T, YoctoBit> val) where T:IConvertible {
        return new Quantity<double, ZettaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E24)) * (1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoBit to ExaByte
    /// </summary>
    /// <param name="val">quantity measured in YoctoBit</param>
    /// <returns>quantity measured in ExaByte</returns>
    public static Quantity<double, ExaByte> ToExaByte<T>(this BaseQuantity<T, YoctoBit> val) where T:IConvertible {
        return new Quantity<double, ExaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E24)) * (1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoBit to PetaByte
    /// </summary>
    /// <param name="val">quantity measured in YoctoBit</param>
    /// <returns>quantity measured in PetaByte</returns>
    public static Quantity<double, PetaByte> ToPetaByte<T>(this BaseQuantity<T, YoctoBit> val) where T:IConvertible {
        return new Quantity<double, PetaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E24)) * (1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoBit to TeraByte
    /// </summary>
    /// <param name="val">quantity measured in YoctoBit</param>
    /// <returns>quantity measured in TeraByte</returns>
    public static Quantity<double, TeraByte> ToTeraByte<T>(this BaseQuantity<T, YoctoBit> val) where T:IConvertible {
        return new Quantity<double, TeraByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E24)) * (1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoBit to GigaByte
    /// </summary>
    /// <param name="val">quantity measured in YoctoBit</param>
    /// <returns>quantity measured in GigaByte</returns>
    public static Quantity<double, GigaByte> ToGigaByte<T>(this BaseQuantity<T, YoctoBit> val) where T:IConvertible {
        return new Quantity<double, GigaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E24)) * (1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoBit to MegaByte
    /// </summary>
    /// <param name="val">quantity measured in YoctoBit</param>
    /// <returns>quantity measured in MegaByte</returns>
    public static Quantity<double, MegaByte> ToMegaByte<T>(this BaseQuantity<T, YoctoBit> val) where T:IConvertible {
        return new Quantity<double, MegaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E24)) * (1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoBit to KiloByte
    /// </summary>
    /// <param name="val">quantity measured in YoctoBit</param>
    /// <returns>quantity measured in KiloByte</returns>
    public static Quantity<double, KiloByte> ToKiloByte<T>(this BaseQuantity<T, YoctoBit> val) where T:IConvertible {
        return new Quantity<double, KiloByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E24)) * (1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoBit to HectoByte
    /// </summary>
    /// <param name="val">quantity measured in YoctoBit</param>
    /// <returns>quantity measured in HectoByte</returns>
    public static Quantity<double, HectoByte> ToHectoByte<T>(this BaseQuantity<T, YoctoBit> val) where T:IConvertible {
        return new Quantity<double, HectoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E24)) * (1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoBit to DekaByte
    /// </summary>
    /// <param name="val">quantity measured in YoctoBit</param>
    /// <returns>quantity measured in DekaByte</returns>
    public static Quantity<double, DekaByte> ToDekaByte<T>(this BaseQuantity<T, YoctoBit> val) where T:IConvertible {
        return new Quantity<double, DekaByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E24)) * (1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoBit to DeciByte
    /// </summary>
    /// <param name="val">quantity measured in YoctoBit</param>
    /// <returns>quantity measured in DeciByte</returns>
    public static Quantity<double, DeciByte> ToDeciByte<T>(this BaseQuantity<T, YoctoBit> val) where T:IConvertible {
        return new Quantity<double, DeciByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E24)) * (1E1))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoBit to CentiByte
    /// </summary>
    /// <param name="val">quantity measured in YoctoBit</param>
    /// <returns>quantity measured in CentiByte</returns>
    public static Quantity<double, CentiByte> ToCentiByte<T>(this BaseQuantity<T, YoctoBit> val) where T:IConvertible {
        return new Quantity<double, CentiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E24)) * (1E2))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoBit to MilliByte
    /// </summary>
    /// <param name="val">quantity measured in YoctoBit</param>
    /// <returns>quantity measured in MilliByte</returns>
    public static Quantity<double, MilliByte> ToMilliByte<T>(this BaseQuantity<T, YoctoBit> val) where T:IConvertible {
        return new Quantity<double, MilliByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E24)) * (1E3))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoBit to MicroByte
    /// </summary>
    /// <param name="val">quantity measured in YoctoBit</param>
    /// <returns>quantity measured in MicroByte</returns>
    public static Quantity<double, MicroByte> ToMicroByte<T>(this BaseQuantity<T, YoctoBit> val) where T:IConvertible {
        return new Quantity<double, MicroByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E24)) * (1E6))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoBit to NanoByte
    /// </summary>
    /// <param name="val">quantity measured in YoctoBit</param>
    /// <returns>quantity measured in NanoByte</returns>
    public static Quantity<double, NanoByte> ToNanoByte<T>(this BaseQuantity<T, YoctoBit> val) where T:IConvertible {
        return new Quantity<double, NanoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E24)) * (1E9))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoBit to PicoByte
    /// </summary>
    /// <param name="val">quantity measured in YoctoBit</param>
    /// <returns>quantity measured in PicoByte</returns>
    public static Quantity<double, PicoByte> ToPicoByte<T>(this BaseQuantity<T, YoctoBit> val) where T:IConvertible {
        return new Quantity<double, PicoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E24)) * (1E12))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoBit to FemtoByte
    /// </summary>
    /// <param name="val">quantity measured in YoctoBit</param>
    /// <returns>quantity measured in FemtoByte</returns>
    public static Quantity<double, FemtoByte> ToFemtoByte<T>(this BaseQuantity<T, YoctoBit> val) where T:IConvertible {
        return new Quantity<double, FemtoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E24)) * (1E15))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoBit to AttoByte
    /// </summary>
    /// <param name="val">quantity measured in YoctoBit</param>
    /// <returns>quantity measured in AttoByte</returns>
    public static Quantity<double, AttoByte> ToAttoByte<T>(this BaseQuantity<T, YoctoBit> val) where T:IConvertible {
        return new Quantity<double, AttoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E24)) * (1E18))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoBit to ZeptoByte
    /// </summary>
    /// <param name="val">quantity measured in YoctoBit</param>
    /// <returns>quantity measured in ZeptoByte</returns>
    public static Quantity<double, ZeptoByte> ToZeptoByte<T>(this BaseQuantity<T, YoctoBit> val) where T:IConvertible {
        return new Quantity<double, ZeptoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E24)) * (1E21))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoBit to YoctoByte
    /// </summary>
    /// <param name="val">quantity measured in YoctoBit</param>
    /// <returns>quantity measured in YoctoByte</returns>
    public static Quantity<double, YoctoByte> ToYoctoByte<T>(this BaseQuantity<T, YoctoBit> val) where T:IConvertible {
        return new Quantity<double, YoctoByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E24)) * (1E24))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoBit to YobiByte
    /// </summary>
    /// <param name="val">quantity measured in YoctoBit</param>
    /// <returns>quantity measured in YobiByte</returns>
    public static Quantity<double, YobiByte> ToYobiByte<T>(this BaseQuantity<T, YoctoBit> val) where T:IConvertible {
        return new Quantity<double, YobiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E24)) * (1.2089258e-24))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoBit to ZebiByte
    /// </summary>
    /// <param name="val">quantity measured in YoctoBit</param>
    /// <returns>quantity measured in ZebiByte</returns>
    public static Quantity<double, ZebiByte> ToZebiByte<T>(this BaseQuantity<T, YoctoBit> val) where T:IConvertible {
        return new Quantity<double, ZebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E24)) * (1.1805916e-21))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoBit to ExbiByte
    /// </summary>
    /// <param name="val">quantity measured in YoctoBit</param>
    /// <returns>quantity measured in ExbiByte</returns>
    public static Quantity<double, ExbiByte> ToExbiByte<T>(this BaseQuantity<T, YoctoBit> val) where T:IConvertible {
        return new Quantity<double, ExbiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E24)) * (1.1529215e-18))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoBit to PebiByte
    /// </summary>
    /// <param name="val">quantity measured in YoctoBit</param>
    /// <returns>quantity measured in PebiByte</returns>
    public static Quantity<double, PebiByte> ToPebiByte<T>(this BaseQuantity<T, YoctoBit> val) where T:IConvertible {
        return new Quantity<double, PebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E24)) * (1.1258999e-15))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoBit to TebiByte
    /// </summary>
    /// <param name="val">quantity measured in YoctoBit</param>
    /// <returns>quantity measured in TebiByte</returns>
    public static Quantity<double, TebiByte> ToTebiByte<T>(this BaseQuantity<T, YoctoBit> val) where T:IConvertible {
        return new Quantity<double, TebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E24)) * (1.0995116e-12))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoBit to GibiByte
    /// </summary>
    /// <param name="val">quantity measured in YoctoBit</param>
    /// <returns>quantity measured in GibiByte</returns>
    public static Quantity<double, GibiByte> ToGibiByte<T>(this BaseQuantity<T, YoctoBit> val) where T:IConvertible {
        return new Quantity<double, GibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E24)) * (1d/1073741824))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoBit to MebiByte
    /// </summary>
    /// <param name="val">quantity measured in YoctoBit</param>
    /// <returns>quantity measured in MebiByte</returns>
    public static Quantity<double, MebiByte> ToMebiByte<T>(this BaseQuantity<T, YoctoBit> val) where T:IConvertible {
        return new Quantity<double, MebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E24)) * (1d/1048576))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoBit to KibiByte
    /// </summary>
    /// <param name="val">quantity measured in YoctoBit</param>
    /// <returns>quantity measured in KibiByte</returns>
    public static Quantity<double, KibiByte> ToKibiByte<T>(this BaseQuantity<T, YoctoBit> val) where T:IConvertible {
        return new Quantity<double, KibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(8*1E24)) * (1d/1024))
        );
    }
	/// <summary>
    /// Extension method to convert Byte to YottaByte
    /// </summary>
    /// <param name="val">quantity measured in Byte</param>
    /// <returns>quantity measured in YottaByte</returns>
    public static Quantity<double, YottaByte> ToYottaByte<T>(this BaseQuantity<T, Byte> val) where T:IConvertible {
        return new Quantity<double, YottaByte>(
            Convert.ToDouble(val.Value) * (1E-24)
        );
    }
	/// <summary>
    /// Extension method to convert YottaByte to Byte
    /// </summary>
    /// <param name="val">quantity measured in YottaByte</param>
    /// <returns>quantity measured in Byte</returns>
    public static Quantity<double, Byte> ToByte<T>(this BaseQuantity<T, YottaByte> val) where T:IConvertible {
        return new Quantity<double, Byte>(
            Convert.ToDouble(val.Value) * (1d/(1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert YottaByte to Bit
    /// </summary>
    /// <param name="val">quantity measured in YottaByte</param>
    /// <returns>quantity measured in Bit</returns>
    public static Quantity<double, Bit> ToBit<T>(this BaseQuantity<T, YottaByte> val) where T:IConvertible {
        return new Quantity<double, Bit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-24)) * (8))
        );
    }
	/// <summary>
    /// Extension method to convert YottaByte to YottaBit
    /// </summary>
    /// <param name="val">quantity measured in YottaByte</param>
    /// <returns>quantity measured in YottaBit</returns>
    public static Quantity<double, YottaBit> ToYottaBit<T>(this BaseQuantity<T, YottaByte> val) where T:IConvertible {
        return new Quantity<double, YottaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-24)) * (8*1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert YottaByte to ZettaBit
    /// </summary>
    /// <param name="val">quantity measured in YottaByte</param>
    /// <returns>quantity measured in ZettaBit</returns>
    public static Quantity<double, ZettaBit> ToZettaBit<T>(this BaseQuantity<T, YottaByte> val) where T:IConvertible {
        return new Quantity<double, ZettaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-24)) * (8*1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert YottaByte to ExaBit
    /// </summary>
    /// <param name="val">quantity measured in YottaByte</param>
    /// <returns>quantity measured in ExaBit</returns>
    public static Quantity<double, ExaBit> ToExaBit<T>(this BaseQuantity<T, YottaByte> val) where T:IConvertible {
        return new Quantity<double, ExaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-24)) * (8*1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert YottaByte to PetaBit
    /// </summary>
    /// <param name="val">quantity measured in YottaByte</param>
    /// <returns>quantity measured in PetaBit</returns>
    public static Quantity<double, PetaBit> ToPetaBit<T>(this BaseQuantity<T, YottaByte> val) where T:IConvertible {
        return new Quantity<double, PetaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-24)) * (8*1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert YottaByte to TeraBit
    /// </summary>
    /// <param name="val">quantity measured in YottaByte</param>
    /// <returns>quantity measured in TeraBit</returns>
    public static Quantity<double, TeraBit> ToTeraBit<T>(this BaseQuantity<T, YottaByte> val) where T:IConvertible {
        return new Quantity<double, TeraBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-24)) * (8*1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert YottaByte to GigaBit
    /// </summary>
    /// <param name="val">quantity measured in YottaByte</param>
    /// <returns>quantity measured in GigaBit</returns>
    public static Quantity<double, GigaBit> ToGigaBit<T>(this BaseQuantity<T, YottaByte> val) where T:IConvertible {
        return new Quantity<double, GigaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-24)) * (8*1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert YottaByte to MegaBit
    /// </summary>
    /// <param name="val">quantity measured in YottaByte</param>
    /// <returns>quantity measured in MegaBit</returns>
    public static Quantity<double, MegaBit> ToMegaBit<T>(this BaseQuantity<T, YottaByte> val) where T:IConvertible {
        return new Quantity<double, MegaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-24)) * (8*1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert YottaByte to KiloBit
    /// </summary>
    /// <param name="val">quantity measured in YottaByte</param>
    /// <returns>quantity measured in KiloBit</returns>
    public static Quantity<double, KiloBit> ToKiloBit<T>(this BaseQuantity<T, YottaByte> val) where T:IConvertible {
        return new Quantity<double, KiloBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-24)) * (8*1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert YottaByte to HectoBit
    /// </summary>
    /// <param name="val">quantity measured in YottaByte</param>
    /// <returns>quantity measured in HectoBit</returns>
    public static Quantity<double, HectoBit> ToHectoBit<T>(this BaseQuantity<T, YottaByte> val) where T:IConvertible {
        return new Quantity<double, HectoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-24)) * (8*1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert YottaByte to DekaBit
    /// </summary>
    /// <param name="val">quantity measured in YottaByte</param>
    /// <returns>quantity measured in DekaBit</returns>
    public static Quantity<double, DekaBit> ToDekaBit<T>(this BaseQuantity<T, YottaByte> val) where T:IConvertible {
        return new Quantity<double, DekaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-24)) * (8*1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert YottaByte to DeciBit
    /// </summary>
    /// <param name="val">quantity measured in YottaByte</param>
    /// <returns>quantity measured in DeciBit</returns>
    public static Quantity<double, DeciBit> ToDeciBit<T>(this BaseQuantity<T, YottaByte> val) where T:IConvertible {
        return new Quantity<double, DeciBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-24)) * (8*1E1))
        );
    }
	/// <summary>
    /// Extension method to convert YottaByte to CentiBit
    /// </summary>
    /// <param name="val">quantity measured in YottaByte</param>
    /// <returns>quantity measured in CentiBit</returns>
    public static Quantity<double, CentiBit> ToCentiBit<T>(this BaseQuantity<T, YottaByte> val) where T:IConvertible {
        return new Quantity<double, CentiBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-24)) * (8*1E2))
        );
    }
	/// <summary>
    /// Extension method to convert YottaByte to MilliBit
    /// </summary>
    /// <param name="val">quantity measured in YottaByte</param>
    /// <returns>quantity measured in MilliBit</returns>
    public static Quantity<double, MilliBit> ToMilliBit<T>(this BaseQuantity<T, YottaByte> val) where T:IConvertible {
        return new Quantity<double, MilliBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-24)) * (8*1E3))
        );
    }
	/// <summary>
    /// Extension method to convert YottaByte to MicroBit
    /// </summary>
    /// <param name="val">quantity measured in YottaByte</param>
    /// <returns>quantity measured in MicroBit</returns>
    public static Quantity<double, MicroBit> ToMicroBit<T>(this BaseQuantity<T, YottaByte> val) where T:IConvertible {
        return new Quantity<double, MicroBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-24)) * (8*1E6))
        );
    }
	/// <summary>
    /// Extension method to convert YottaByte to NanoBit
    /// </summary>
    /// <param name="val">quantity measured in YottaByte</param>
    /// <returns>quantity measured in NanoBit</returns>
    public static Quantity<double, NanoBit> ToNanoBit<T>(this BaseQuantity<T, YottaByte> val) where T:IConvertible {
        return new Quantity<double, NanoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-24)) * (8*1E9))
        );
    }
	/// <summary>
    /// Extension method to convert YottaByte to PicoBit
    /// </summary>
    /// <param name="val">quantity measured in YottaByte</param>
    /// <returns>quantity measured in PicoBit</returns>
    public static Quantity<double, PicoBit> ToPicoBit<T>(this BaseQuantity<T, YottaByte> val) where T:IConvertible {
        return new Quantity<double, PicoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-24)) * (8*1E12))
        );
    }
	/// <summary>
    /// Extension method to convert YottaByte to FemtoBit
    /// </summary>
    /// <param name="val">quantity measured in YottaByte</param>
    /// <returns>quantity measured in FemtoBit</returns>
    public static Quantity<double, FemtoBit> ToFemtoBit<T>(this BaseQuantity<T, YottaByte> val) where T:IConvertible {
        return new Quantity<double, FemtoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-24)) * (8*1E15))
        );
    }
	/// <summary>
    /// Extension method to convert YottaByte to AttoBit
    /// </summary>
    /// <param name="val">quantity measured in YottaByte</param>
    /// <returns>quantity measured in AttoBit</returns>
    public static Quantity<double, AttoBit> ToAttoBit<T>(this BaseQuantity<T, YottaByte> val) where T:IConvertible {
        return new Quantity<double, AttoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-24)) * (8*1E18))
        );
    }
	/// <summary>
    /// Extension method to convert YottaByte to ZeptoBit
    /// </summary>
    /// <param name="val">quantity measured in YottaByte</param>
    /// <returns>quantity measured in ZeptoBit</returns>
    public static Quantity<double, ZeptoBit> ToZeptoBit<T>(this BaseQuantity<T, YottaByte> val) where T:IConvertible {
        return new Quantity<double, ZeptoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-24)) * (8*1E21))
        );
    }
	/// <summary>
    /// Extension method to convert YottaByte to YoctoBit
    /// </summary>
    /// <param name="val">quantity measured in YottaByte</param>
    /// <returns>quantity measured in YoctoBit</returns>
    public static Quantity<double, YoctoBit> ToYoctoBit<T>(this BaseQuantity<T, YottaByte> val) where T:IConvertible {
        return new Quantity<double, YoctoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-24)) * (8*1E24))
        );
    }
	/// <summary>
    /// Extension method to convert YottaByte to ZettaByte
    /// </summary>
    /// <param name="val">quantity measured in YottaByte</param>
    /// <returns>quantity measured in ZettaByte</returns>
    public static Quantity<double, ZettaByte> ToZettaByte<T>(this BaseQuantity<T, YottaByte> val) where T:IConvertible {
        return new Quantity<double, ZettaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-24)) * (1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert YottaByte to ExaByte
    /// </summary>
    /// <param name="val">quantity measured in YottaByte</param>
    /// <returns>quantity measured in ExaByte</returns>
    public static Quantity<double, ExaByte> ToExaByte<T>(this BaseQuantity<T, YottaByte> val) where T:IConvertible {
        return new Quantity<double, ExaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-24)) * (1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert YottaByte to PetaByte
    /// </summary>
    /// <param name="val">quantity measured in YottaByte</param>
    /// <returns>quantity measured in PetaByte</returns>
    public static Quantity<double, PetaByte> ToPetaByte<T>(this BaseQuantity<T, YottaByte> val) where T:IConvertible {
        return new Quantity<double, PetaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-24)) * (1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert YottaByte to TeraByte
    /// </summary>
    /// <param name="val">quantity measured in YottaByte</param>
    /// <returns>quantity measured in TeraByte</returns>
    public static Quantity<double, TeraByte> ToTeraByte<T>(this BaseQuantity<T, YottaByte> val) where T:IConvertible {
        return new Quantity<double, TeraByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-24)) * (1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert YottaByte to GigaByte
    /// </summary>
    /// <param name="val">quantity measured in YottaByte</param>
    /// <returns>quantity measured in GigaByte</returns>
    public static Quantity<double, GigaByte> ToGigaByte<T>(this BaseQuantity<T, YottaByte> val) where T:IConvertible {
        return new Quantity<double, GigaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-24)) * (1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert YottaByte to MegaByte
    /// </summary>
    /// <param name="val">quantity measured in YottaByte</param>
    /// <returns>quantity measured in MegaByte</returns>
    public static Quantity<double, MegaByte> ToMegaByte<T>(this BaseQuantity<T, YottaByte> val) where T:IConvertible {
        return new Quantity<double, MegaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-24)) * (1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert YottaByte to KiloByte
    /// </summary>
    /// <param name="val">quantity measured in YottaByte</param>
    /// <returns>quantity measured in KiloByte</returns>
    public static Quantity<double, KiloByte> ToKiloByte<T>(this BaseQuantity<T, YottaByte> val) where T:IConvertible {
        return new Quantity<double, KiloByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-24)) * (1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert YottaByte to HectoByte
    /// </summary>
    /// <param name="val">quantity measured in YottaByte</param>
    /// <returns>quantity measured in HectoByte</returns>
    public static Quantity<double, HectoByte> ToHectoByte<T>(this BaseQuantity<T, YottaByte> val) where T:IConvertible {
        return new Quantity<double, HectoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-24)) * (1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert YottaByte to DekaByte
    /// </summary>
    /// <param name="val">quantity measured in YottaByte</param>
    /// <returns>quantity measured in DekaByte</returns>
    public static Quantity<double, DekaByte> ToDekaByte<T>(this BaseQuantity<T, YottaByte> val) where T:IConvertible {
        return new Quantity<double, DekaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-24)) * (1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert YottaByte to DeciByte
    /// </summary>
    /// <param name="val">quantity measured in YottaByte</param>
    /// <returns>quantity measured in DeciByte</returns>
    public static Quantity<double, DeciByte> ToDeciByte<T>(this BaseQuantity<T, YottaByte> val) where T:IConvertible {
        return new Quantity<double, DeciByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-24)) * (1E1))
        );
    }
	/// <summary>
    /// Extension method to convert YottaByte to CentiByte
    /// </summary>
    /// <param name="val">quantity measured in YottaByte</param>
    /// <returns>quantity measured in CentiByte</returns>
    public static Quantity<double, CentiByte> ToCentiByte<T>(this BaseQuantity<T, YottaByte> val) where T:IConvertible {
        return new Quantity<double, CentiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-24)) * (1E2))
        );
    }
	/// <summary>
    /// Extension method to convert YottaByte to MilliByte
    /// </summary>
    /// <param name="val">quantity measured in YottaByte</param>
    /// <returns>quantity measured in MilliByte</returns>
    public static Quantity<double, MilliByte> ToMilliByte<T>(this BaseQuantity<T, YottaByte> val) where T:IConvertible {
        return new Quantity<double, MilliByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-24)) * (1E3))
        );
    }
	/// <summary>
    /// Extension method to convert YottaByte to MicroByte
    /// </summary>
    /// <param name="val">quantity measured in YottaByte</param>
    /// <returns>quantity measured in MicroByte</returns>
    public static Quantity<double, MicroByte> ToMicroByte<T>(this BaseQuantity<T, YottaByte> val) where T:IConvertible {
        return new Quantity<double, MicroByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-24)) * (1E6))
        );
    }
	/// <summary>
    /// Extension method to convert YottaByte to NanoByte
    /// </summary>
    /// <param name="val">quantity measured in YottaByte</param>
    /// <returns>quantity measured in NanoByte</returns>
    public static Quantity<double, NanoByte> ToNanoByte<T>(this BaseQuantity<T, YottaByte> val) where T:IConvertible {
        return new Quantity<double, NanoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-24)) * (1E9))
        );
    }
	/// <summary>
    /// Extension method to convert YottaByte to PicoByte
    /// </summary>
    /// <param name="val">quantity measured in YottaByte</param>
    /// <returns>quantity measured in PicoByte</returns>
    public static Quantity<double, PicoByte> ToPicoByte<T>(this BaseQuantity<T, YottaByte> val) where T:IConvertible {
        return new Quantity<double, PicoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-24)) * (1E12))
        );
    }
	/// <summary>
    /// Extension method to convert YottaByte to FemtoByte
    /// </summary>
    /// <param name="val">quantity measured in YottaByte</param>
    /// <returns>quantity measured in FemtoByte</returns>
    public static Quantity<double, FemtoByte> ToFemtoByte<T>(this BaseQuantity<T, YottaByte> val) where T:IConvertible {
        return new Quantity<double, FemtoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-24)) * (1E15))
        );
    }
	/// <summary>
    /// Extension method to convert YottaByte to AttoByte
    /// </summary>
    /// <param name="val">quantity measured in YottaByte</param>
    /// <returns>quantity measured in AttoByte</returns>
    public static Quantity<double, AttoByte> ToAttoByte<T>(this BaseQuantity<T, YottaByte> val) where T:IConvertible {
        return new Quantity<double, AttoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-24)) * (1E18))
        );
    }
	/// <summary>
    /// Extension method to convert YottaByte to ZeptoByte
    /// </summary>
    /// <param name="val">quantity measured in YottaByte</param>
    /// <returns>quantity measured in ZeptoByte</returns>
    public static Quantity<double, ZeptoByte> ToZeptoByte<T>(this BaseQuantity<T, YottaByte> val) where T:IConvertible {
        return new Quantity<double, ZeptoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-24)) * (1E21))
        );
    }
	/// <summary>
    /// Extension method to convert YottaByte to YoctoByte
    /// </summary>
    /// <param name="val">quantity measured in YottaByte</param>
    /// <returns>quantity measured in YoctoByte</returns>
    public static Quantity<double, YoctoByte> ToYoctoByte<T>(this BaseQuantity<T, YottaByte> val) where T:IConvertible {
        return new Quantity<double, YoctoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-24)) * (1E24))
        );
    }
	/// <summary>
    /// Extension method to convert YottaByte to YobiByte
    /// </summary>
    /// <param name="val">quantity measured in YottaByte</param>
    /// <returns>quantity measured in YobiByte</returns>
    public static Quantity<double, YobiByte> ToYobiByte<T>(this BaseQuantity<T, YottaByte> val) where T:IConvertible {
        return new Quantity<double, YobiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-24)) * (1.2089258e-24))
        );
    }
	/// <summary>
    /// Extension method to convert YottaByte to ZebiByte
    /// </summary>
    /// <param name="val">quantity measured in YottaByte</param>
    /// <returns>quantity measured in ZebiByte</returns>
    public static Quantity<double, ZebiByte> ToZebiByte<T>(this BaseQuantity<T, YottaByte> val) where T:IConvertible {
        return new Quantity<double, ZebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-24)) * (1.1805916e-21))
        );
    }
	/// <summary>
    /// Extension method to convert YottaByte to ExbiByte
    /// </summary>
    /// <param name="val">quantity measured in YottaByte</param>
    /// <returns>quantity measured in ExbiByte</returns>
    public static Quantity<double, ExbiByte> ToExbiByte<T>(this BaseQuantity<T, YottaByte> val) where T:IConvertible {
        return new Quantity<double, ExbiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-24)) * (1.1529215e-18))
        );
    }
	/// <summary>
    /// Extension method to convert YottaByte to PebiByte
    /// </summary>
    /// <param name="val">quantity measured in YottaByte</param>
    /// <returns>quantity measured in PebiByte</returns>
    public static Quantity<double, PebiByte> ToPebiByte<T>(this BaseQuantity<T, YottaByte> val) where T:IConvertible {
        return new Quantity<double, PebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-24)) * (1.1258999e-15))
        );
    }
	/// <summary>
    /// Extension method to convert YottaByte to TebiByte
    /// </summary>
    /// <param name="val">quantity measured in YottaByte</param>
    /// <returns>quantity measured in TebiByte</returns>
    public static Quantity<double, TebiByte> ToTebiByte<T>(this BaseQuantity<T, YottaByte> val) where T:IConvertible {
        return new Quantity<double, TebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-24)) * (1.0995116e-12))
        );
    }
	/// <summary>
    /// Extension method to convert YottaByte to GibiByte
    /// </summary>
    /// <param name="val">quantity measured in YottaByte</param>
    /// <returns>quantity measured in GibiByte</returns>
    public static Quantity<double, GibiByte> ToGibiByte<T>(this BaseQuantity<T, YottaByte> val) where T:IConvertible {
        return new Quantity<double, GibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-24)) * (1d/1073741824))
        );
    }
	/// <summary>
    /// Extension method to convert YottaByte to MebiByte
    /// </summary>
    /// <param name="val">quantity measured in YottaByte</param>
    /// <returns>quantity measured in MebiByte</returns>
    public static Quantity<double, MebiByte> ToMebiByte<T>(this BaseQuantity<T, YottaByte> val) where T:IConvertible {
        return new Quantity<double, MebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-24)) * (1d/1048576))
        );
    }
	/// <summary>
    /// Extension method to convert YottaByte to KibiByte
    /// </summary>
    /// <param name="val">quantity measured in YottaByte</param>
    /// <returns>quantity measured in KibiByte</returns>
    public static Quantity<double, KibiByte> ToKibiByte<T>(this BaseQuantity<T, YottaByte> val) where T:IConvertible {
        return new Quantity<double, KibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-24)) * (1d/1024))
        );
    }
	/// <summary>
    /// Extension method to convert Byte to ZettaByte
    /// </summary>
    /// <param name="val">quantity measured in Byte</param>
    /// <returns>quantity measured in ZettaByte</returns>
    public static Quantity<double, ZettaByte> ToZettaByte<T>(this BaseQuantity<T, Byte> val) where T:IConvertible {
        return new Quantity<double, ZettaByte>(
            Convert.ToDouble(val.Value) * (1E-21)
        );
    }
	/// <summary>
    /// Extension method to convert ZettaByte to Byte
    /// </summary>
    /// <param name="val">quantity measured in ZettaByte</param>
    /// <returns>quantity measured in Byte</returns>
    public static Quantity<double, Byte> ToByte<T>(this BaseQuantity<T, ZettaByte> val) where T:IConvertible {
        return new Quantity<double, Byte>(
            Convert.ToDouble(val.Value) * (1d/(1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaByte to Bit
    /// </summary>
    /// <param name="val">quantity measured in ZettaByte</param>
    /// <returns>quantity measured in Bit</returns>
    public static Quantity<double, Bit> ToBit<T>(this BaseQuantity<T, ZettaByte> val) where T:IConvertible {
        return new Quantity<double, Bit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-21)) * (8))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaByte to YottaBit
    /// </summary>
    /// <param name="val">quantity measured in ZettaByte</param>
    /// <returns>quantity measured in YottaBit</returns>
    public static Quantity<double, YottaBit> ToYottaBit<T>(this BaseQuantity<T, ZettaByte> val) where T:IConvertible {
        return new Quantity<double, YottaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-21)) * (8*1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaByte to ZettaBit
    /// </summary>
    /// <param name="val">quantity measured in ZettaByte</param>
    /// <returns>quantity measured in ZettaBit</returns>
    public static Quantity<double, ZettaBit> ToZettaBit<T>(this BaseQuantity<T, ZettaByte> val) where T:IConvertible {
        return new Quantity<double, ZettaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-21)) * (8*1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaByte to ExaBit
    /// </summary>
    /// <param name="val">quantity measured in ZettaByte</param>
    /// <returns>quantity measured in ExaBit</returns>
    public static Quantity<double, ExaBit> ToExaBit<T>(this BaseQuantity<T, ZettaByte> val) where T:IConvertible {
        return new Quantity<double, ExaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-21)) * (8*1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaByte to PetaBit
    /// </summary>
    /// <param name="val">quantity measured in ZettaByte</param>
    /// <returns>quantity measured in PetaBit</returns>
    public static Quantity<double, PetaBit> ToPetaBit<T>(this BaseQuantity<T, ZettaByte> val) where T:IConvertible {
        return new Quantity<double, PetaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-21)) * (8*1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaByte to TeraBit
    /// </summary>
    /// <param name="val">quantity measured in ZettaByte</param>
    /// <returns>quantity measured in TeraBit</returns>
    public static Quantity<double, TeraBit> ToTeraBit<T>(this BaseQuantity<T, ZettaByte> val) where T:IConvertible {
        return new Quantity<double, TeraBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-21)) * (8*1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaByte to GigaBit
    /// </summary>
    /// <param name="val">quantity measured in ZettaByte</param>
    /// <returns>quantity measured in GigaBit</returns>
    public static Quantity<double, GigaBit> ToGigaBit<T>(this BaseQuantity<T, ZettaByte> val) where T:IConvertible {
        return new Quantity<double, GigaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-21)) * (8*1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaByte to MegaBit
    /// </summary>
    /// <param name="val">quantity measured in ZettaByte</param>
    /// <returns>quantity measured in MegaBit</returns>
    public static Quantity<double, MegaBit> ToMegaBit<T>(this BaseQuantity<T, ZettaByte> val) where T:IConvertible {
        return new Quantity<double, MegaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-21)) * (8*1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaByte to KiloBit
    /// </summary>
    /// <param name="val">quantity measured in ZettaByte</param>
    /// <returns>quantity measured in KiloBit</returns>
    public static Quantity<double, KiloBit> ToKiloBit<T>(this BaseQuantity<T, ZettaByte> val) where T:IConvertible {
        return new Quantity<double, KiloBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-21)) * (8*1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaByte to HectoBit
    /// </summary>
    /// <param name="val">quantity measured in ZettaByte</param>
    /// <returns>quantity measured in HectoBit</returns>
    public static Quantity<double, HectoBit> ToHectoBit<T>(this BaseQuantity<T, ZettaByte> val) where T:IConvertible {
        return new Quantity<double, HectoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-21)) * (8*1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaByte to DekaBit
    /// </summary>
    /// <param name="val">quantity measured in ZettaByte</param>
    /// <returns>quantity measured in DekaBit</returns>
    public static Quantity<double, DekaBit> ToDekaBit<T>(this BaseQuantity<T, ZettaByte> val) where T:IConvertible {
        return new Quantity<double, DekaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-21)) * (8*1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaByte to DeciBit
    /// </summary>
    /// <param name="val">quantity measured in ZettaByte</param>
    /// <returns>quantity measured in DeciBit</returns>
    public static Quantity<double, DeciBit> ToDeciBit<T>(this BaseQuantity<T, ZettaByte> val) where T:IConvertible {
        return new Quantity<double, DeciBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-21)) * (8*1E1))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaByte to CentiBit
    /// </summary>
    /// <param name="val">quantity measured in ZettaByte</param>
    /// <returns>quantity measured in CentiBit</returns>
    public static Quantity<double, CentiBit> ToCentiBit<T>(this BaseQuantity<T, ZettaByte> val) where T:IConvertible {
        return new Quantity<double, CentiBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-21)) * (8*1E2))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaByte to MilliBit
    /// </summary>
    /// <param name="val">quantity measured in ZettaByte</param>
    /// <returns>quantity measured in MilliBit</returns>
    public static Quantity<double, MilliBit> ToMilliBit<T>(this BaseQuantity<T, ZettaByte> val) where T:IConvertible {
        return new Quantity<double, MilliBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-21)) * (8*1E3))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaByte to MicroBit
    /// </summary>
    /// <param name="val">quantity measured in ZettaByte</param>
    /// <returns>quantity measured in MicroBit</returns>
    public static Quantity<double, MicroBit> ToMicroBit<T>(this BaseQuantity<T, ZettaByte> val) where T:IConvertible {
        return new Quantity<double, MicroBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-21)) * (8*1E6))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaByte to NanoBit
    /// </summary>
    /// <param name="val">quantity measured in ZettaByte</param>
    /// <returns>quantity measured in NanoBit</returns>
    public static Quantity<double, NanoBit> ToNanoBit<T>(this BaseQuantity<T, ZettaByte> val) where T:IConvertible {
        return new Quantity<double, NanoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-21)) * (8*1E9))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaByte to PicoBit
    /// </summary>
    /// <param name="val">quantity measured in ZettaByte</param>
    /// <returns>quantity measured in PicoBit</returns>
    public static Quantity<double, PicoBit> ToPicoBit<T>(this BaseQuantity<T, ZettaByte> val) where T:IConvertible {
        return new Quantity<double, PicoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-21)) * (8*1E12))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaByte to FemtoBit
    /// </summary>
    /// <param name="val">quantity measured in ZettaByte</param>
    /// <returns>quantity measured in FemtoBit</returns>
    public static Quantity<double, FemtoBit> ToFemtoBit<T>(this BaseQuantity<T, ZettaByte> val) where T:IConvertible {
        return new Quantity<double, FemtoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-21)) * (8*1E15))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaByte to AttoBit
    /// </summary>
    /// <param name="val">quantity measured in ZettaByte</param>
    /// <returns>quantity measured in AttoBit</returns>
    public static Quantity<double, AttoBit> ToAttoBit<T>(this BaseQuantity<T, ZettaByte> val) where T:IConvertible {
        return new Quantity<double, AttoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-21)) * (8*1E18))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaByte to ZeptoBit
    /// </summary>
    /// <param name="val">quantity measured in ZettaByte</param>
    /// <returns>quantity measured in ZeptoBit</returns>
    public static Quantity<double, ZeptoBit> ToZeptoBit<T>(this BaseQuantity<T, ZettaByte> val) where T:IConvertible {
        return new Quantity<double, ZeptoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-21)) * (8*1E21))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaByte to YoctoBit
    /// </summary>
    /// <param name="val">quantity measured in ZettaByte</param>
    /// <returns>quantity measured in YoctoBit</returns>
    public static Quantity<double, YoctoBit> ToYoctoBit<T>(this BaseQuantity<T, ZettaByte> val) where T:IConvertible {
        return new Quantity<double, YoctoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-21)) * (8*1E24))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaByte to YottaByte
    /// </summary>
    /// <param name="val">quantity measured in ZettaByte</param>
    /// <returns>quantity measured in YottaByte</returns>
    public static Quantity<double, YottaByte> ToYottaByte<T>(this BaseQuantity<T, ZettaByte> val) where T:IConvertible {
        return new Quantity<double, YottaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-21)) * (1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaByte to ExaByte
    /// </summary>
    /// <param name="val">quantity measured in ZettaByte</param>
    /// <returns>quantity measured in ExaByte</returns>
    public static Quantity<double, ExaByte> ToExaByte<T>(this BaseQuantity<T, ZettaByte> val) where T:IConvertible {
        return new Quantity<double, ExaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-21)) * (1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaByte to PetaByte
    /// </summary>
    /// <param name="val">quantity measured in ZettaByte</param>
    /// <returns>quantity measured in PetaByte</returns>
    public static Quantity<double, PetaByte> ToPetaByte<T>(this BaseQuantity<T, ZettaByte> val) where T:IConvertible {
        return new Quantity<double, PetaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-21)) * (1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaByte to TeraByte
    /// </summary>
    /// <param name="val">quantity measured in ZettaByte</param>
    /// <returns>quantity measured in TeraByte</returns>
    public static Quantity<double, TeraByte> ToTeraByte<T>(this BaseQuantity<T, ZettaByte> val) where T:IConvertible {
        return new Quantity<double, TeraByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-21)) * (1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaByte to GigaByte
    /// </summary>
    /// <param name="val">quantity measured in ZettaByte</param>
    /// <returns>quantity measured in GigaByte</returns>
    public static Quantity<double, GigaByte> ToGigaByte<T>(this BaseQuantity<T, ZettaByte> val) where T:IConvertible {
        return new Quantity<double, GigaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-21)) * (1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaByte to MegaByte
    /// </summary>
    /// <param name="val">quantity measured in ZettaByte</param>
    /// <returns>quantity measured in MegaByte</returns>
    public static Quantity<double, MegaByte> ToMegaByte<T>(this BaseQuantity<T, ZettaByte> val) where T:IConvertible {
        return new Quantity<double, MegaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-21)) * (1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaByte to KiloByte
    /// </summary>
    /// <param name="val">quantity measured in ZettaByte</param>
    /// <returns>quantity measured in KiloByte</returns>
    public static Quantity<double, KiloByte> ToKiloByte<T>(this BaseQuantity<T, ZettaByte> val) where T:IConvertible {
        return new Quantity<double, KiloByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-21)) * (1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaByte to HectoByte
    /// </summary>
    /// <param name="val">quantity measured in ZettaByte</param>
    /// <returns>quantity measured in HectoByte</returns>
    public static Quantity<double, HectoByte> ToHectoByte<T>(this BaseQuantity<T, ZettaByte> val) where T:IConvertible {
        return new Quantity<double, HectoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-21)) * (1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaByte to DekaByte
    /// </summary>
    /// <param name="val">quantity measured in ZettaByte</param>
    /// <returns>quantity measured in DekaByte</returns>
    public static Quantity<double, DekaByte> ToDekaByte<T>(this BaseQuantity<T, ZettaByte> val) where T:IConvertible {
        return new Quantity<double, DekaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-21)) * (1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaByte to DeciByte
    /// </summary>
    /// <param name="val">quantity measured in ZettaByte</param>
    /// <returns>quantity measured in DeciByte</returns>
    public static Quantity<double, DeciByte> ToDeciByte<T>(this BaseQuantity<T, ZettaByte> val) where T:IConvertible {
        return new Quantity<double, DeciByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-21)) * (1E1))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaByte to CentiByte
    /// </summary>
    /// <param name="val">quantity measured in ZettaByte</param>
    /// <returns>quantity measured in CentiByte</returns>
    public static Quantity<double, CentiByte> ToCentiByte<T>(this BaseQuantity<T, ZettaByte> val) where T:IConvertible {
        return new Quantity<double, CentiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-21)) * (1E2))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaByte to MilliByte
    /// </summary>
    /// <param name="val">quantity measured in ZettaByte</param>
    /// <returns>quantity measured in MilliByte</returns>
    public static Quantity<double, MilliByte> ToMilliByte<T>(this BaseQuantity<T, ZettaByte> val) where T:IConvertible {
        return new Quantity<double, MilliByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-21)) * (1E3))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaByte to MicroByte
    /// </summary>
    /// <param name="val">quantity measured in ZettaByte</param>
    /// <returns>quantity measured in MicroByte</returns>
    public static Quantity<double, MicroByte> ToMicroByte<T>(this BaseQuantity<T, ZettaByte> val) where T:IConvertible {
        return new Quantity<double, MicroByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-21)) * (1E6))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaByte to NanoByte
    /// </summary>
    /// <param name="val">quantity measured in ZettaByte</param>
    /// <returns>quantity measured in NanoByte</returns>
    public static Quantity<double, NanoByte> ToNanoByte<T>(this BaseQuantity<T, ZettaByte> val) where T:IConvertible {
        return new Quantity<double, NanoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-21)) * (1E9))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaByte to PicoByte
    /// </summary>
    /// <param name="val">quantity measured in ZettaByte</param>
    /// <returns>quantity measured in PicoByte</returns>
    public static Quantity<double, PicoByte> ToPicoByte<T>(this BaseQuantity<T, ZettaByte> val) where T:IConvertible {
        return new Quantity<double, PicoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-21)) * (1E12))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaByte to FemtoByte
    /// </summary>
    /// <param name="val">quantity measured in ZettaByte</param>
    /// <returns>quantity measured in FemtoByte</returns>
    public static Quantity<double, FemtoByte> ToFemtoByte<T>(this BaseQuantity<T, ZettaByte> val) where T:IConvertible {
        return new Quantity<double, FemtoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-21)) * (1E15))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaByte to AttoByte
    /// </summary>
    /// <param name="val">quantity measured in ZettaByte</param>
    /// <returns>quantity measured in AttoByte</returns>
    public static Quantity<double, AttoByte> ToAttoByte<T>(this BaseQuantity<T, ZettaByte> val) where T:IConvertible {
        return new Quantity<double, AttoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-21)) * (1E18))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaByte to ZeptoByte
    /// </summary>
    /// <param name="val">quantity measured in ZettaByte</param>
    /// <returns>quantity measured in ZeptoByte</returns>
    public static Quantity<double, ZeptoByte> ToZeptoByte<T>(this BaseQuantity<T, ZettaByte> val) where T:IConvertible {
        return new Quantity<double, ZeptoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-21)) * (1E21))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaByte to YoctoByte
    /// </summary>
    /// <param name="val">quantity measured in ZettaByte</param>
    /// <returns>quantity measured in YoctoByte</returns>
    public static Quantity<double, YoctoByte> ToYoctoByte<T>(this BaseQuantity<T, ZettaByte> val) where T:IConvertible {
        return new Quantity<double, YoctoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-21)) * (1E24))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaByte to YobiByte
    /// </summary>
    /// <param name="val">quantity measured in ZettaByte</param>
    /// <returns>quantity measured in YobiByte</returns>
    public static Quantity<double, YobiByte> ToYobiByte<T>(this BaseQuantity<T, ZettaByte> val) where T:IConvertible {
        return new Quantity<double, YobiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-21)) * (1.2089258e-24))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaByte to ZebiByte
    /// </summary>
    /// <param name="val">quantity measured in ZettaByte</param>
    /// <returns>quantity measured in ZebiByte</returns>
    public static Quantity<double, ZebiByte> ToZebiByte<T>(this BaseQuantity<T, ZettaByte> val) where T:IConvertible {
        return new Quantity<double, ZebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-21)) * (1.1805916e-21))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaByte to ExbiByte
    /// </summary>
    /// <param name="val">quantity measured in ZettaByte</param>
    /// <returns>quantity measured in ExbiByte</returns>
    public static Quantity<double, ExbiByte> ToExbiByte<T>(this BaseQuantity<T, ZettaByte> val) where T:IConvertible {
        return new Quantity<double, ExbiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-21)) * (1.1529215e-18))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaByte to PebiByte
    /// </summary>
    /// <param name="val">quantity measured in ZettaByte</param>
    /// <returns>quantity measured in PebiByte</returns>
    public static Quantity<double, PebiByte> ToPebiByte<T>(this BaseQuantity<T, ZettaByte> val) where T:IConvertible {
        return new Quantity<double, PebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-21)) * (1.1258999e-15))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaByte to TebiByte
    /// </summary>
    /// <param name="val">quantity measured in ZettaByte</param>
    /// <returns>quantity measured in TebiByte</returns>
    public static Quantity<double, TebiByte> ToTebiByte<T>(this BaseQuantity<T, ZettaByte> val) where T:IConvertible {
        return new Quantity<double, TebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-21)) * (1.0995116e-12))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaByte to GibiByte
    /// </summary>
    /// <param name="val">quantity measured in ZettaByte</param>
    /// <returns>quantity measured in GibiByte</returns>
    public static Quantity<double, GibiByte> ToGibiByte<T>(this BaseQuantity<T, ZettaByte> val) where T:IConvertible {
        return new Quantity<double, GibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-21)) * (1d/1073741824))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaByte to MebiByte
    /// </summary>
    /// <param name="val">quantity measured in ZettaByte</param>
    /// <returns>quantity measured in MebiByte</returns>
    public static Quantity<double, MebiByte> ToMebiByte<T>(this BaseQuantity<T, ZettaByte> val) where T:IConvertible {
        return new Quantity<double, MebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-21)) * (1d/1048576))
        );
    }
	/// <summary>
    /// Extension method to convert ZettaByte to KibiByte
    /// </summary>
    /// <param name="val">quantity measured in ZettaByte</param>
    /// <returns>quantity measured in KibiByte</returns>
    public static Quantity<double, KibiByte> ToKibiByte<T>(this BaseQuantity<T, ZettaByte> val) where T:IConvertible {
        return new Quantity<double, KibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-21)) * (1d/1024))
        );
    }
	/// <summary>
    /// Extension method to convert Byte to ExaByte
    /// </summary>
    /// <param name="val">quantity measured in Byte</param>
    /// <returns>quantity measured in ExaByte</returns>
    public static Quantity<double, ExaByte> ToExaByte<T>(this BaseQuantity<T, Byte> val) where T:IConvertible {
        return new Quantity<double, ExaByte>(
            Convert.ToDouble(val.Value) * (1E-18)
        );
    }
	/// <summary>
    /// Extension method to convert ExaByte to Byte
    /// </summary>
    /// <param name="val">quantity measured in ExaByte</param>
    /// <returns>quantity measured in Byte</returns>
    public static Quantity<double, Byte> ToByte<T>(this BaseQuantity<T, ExaByte> val) where T:IConvertible {
        return new Quantity<double, Byte>(
            Convert.ToDouble(val.Value) * (1d/(1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert ExaByte to Bit
    /// </summary>
    /// <param name="val">quantity measured in ExaByte</param>
    /// <returns>quantity measured in Bit</returns>
    public static Quantity<double, Bit> ToBit<T>(this BaseQuantity<T, ExaByte> val) where T:IConvertible {
        return new Quantity<double, Bit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-18)) * (8))
        );
    }
	/// <summary>
    /// Extension method to convert ExaByte to YottaBit
    /// </summary>
    /// <param name="val">quantity measured in ExaByte</param>
    /// <returns>quantity measured in YottaBit</returns>
    public static Quantity<double, YottaBit> ToYottaBit<T>(this BaseQuantity<T, ExaByte> val) where T:IConvertible {
        return new Quantity<double, YottaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-18)) * (8*1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert ExaByte to ZettaBit
    /// </summary>
    /// <param name="val">quantity measured in ExaByte</param>
    /// <returns>quantity measured in ZettaBit</returns>
    public static Quantity<double, ZettaBit> ToZettaBit<T>(this BaseQuantity<T, ExaByte> val) where T:IConvertible {
        return new Quantity<double, ZettaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-18)) * (8*1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert ExaByte to ExaBit
    /// </summary>
    /// <param name="val">quantity measured in ExaByte</param>
    /// <returns>quantity measured in ExaBit</returns>
    public static Quantity<double, ExaBit> ToExaBit<T>(this BaseQuantity<T, ExaByte> val) where T:IConvertible {
        return new Quantity<double, ExaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-18)) * (8*1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert ExaByte to PetaBit
    /// </summary>
    /// <param name="val">quantity measured in ExaByte</param>
    /// <returns>quantity measured in PetaBit</returns>
    public static Quantity<double, PetaBit> ToPetaBit<T>(this BaseQuantity<T, ExaByte> val) where T:IConvertible {
        return new Quantity<double, PetaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-18)) * (8*1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert ExaByte to TeraBit
    /// </summary>
    /// <param name="val">quantity measured in ExaByte</param>
    /// <returns>quantity measured in TeraBit</returns>
    public static Quantity<double, TeraBit> ToTeraBit<T>(this BaseQuantity<T, ExaByte> val) where T:IConvertible {
        return new Quantity<double, TeraBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-18)) * (8*1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert ExaByte to GigaBit
    /// </summary>
    /// <param name="val">quantity measured in ExaByte</param>
    /// <returns>quantity measured in GigaBit</returns>
    public static Quantity<double, GigaBit> ToGigaBit<T>(this BaseQuantity<T, ExaByte> val) where T:IConvertible {
        return new Quantity<double, GigaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-18)) * (8*1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert ExaByte to MegaBit
    /// </summary>
    /// <param name="val">quantity measured in ExaByte</param>
    /// <returns>quantity measured in MegaBit</returns>
    public static Quantity<double, MegaBit> ToMegaBit<T>(this BaseQuantity<T, ExaByte> val) where T:IConvertible {
        return new Quantity<double, MegaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-18)) * (8*1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert ExaByte to KiloBit
    /// </summary>
    /// <param name="val">quantity measured in ExaByte</param>
    /// <returns>quantity measured in KiloBit</returns>
    public static Quantity<double, KiloBit> ToKiloBit<T>(this BaseQuantity<T, ExaByte> val) where T:IConvertible {
        return new Quantity<double, KiloBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-18)) * (8*1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert ExaByte to HectoBit
    /// </summary>
    /// <param name="val">quantity measured in ExaByte</param>
    /// <returns>quantity measured in HectoBit</returns>
    public static Quantity<double, HectoBit> ToHectoBit<T>(this BaseQuantity<T, ExaByte> val) where T:IConvertible {
        return new Quantity<double, HectoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-18)) * (8*1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert ExaByte to DekaBit
    /// </summary>
    /// <param name="val">quantity measured in ExaByte</param>
    /// <returns>quantity measured in DekaBit</returns>
    public static Quantity<double, DekaBit> ToDekaBit<T>(this BaseQuantity<T, ExaByte> val) where T:IConvertible {
        return new Quantity<double, DekaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-18)) * (8*1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert ExaByte to DeciBit
    /// </summary>
    /// <param name="val">quantity measured in ExaByte</param>
    /// <returns>quantity measured in DeciBit</returns>
    public static Quantity<double, DeciBit> ToDeciBit<T>(this BaseQuantity<T, ExaByte> val) where T:IConvertible {
        return new Quantity<double, DeciBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-18)) * (8*1E1))
        );
    }
	/// <summary>
    /// Extension method to convert ExaByte to CentiBit
    /// </summary>
    /// <param name="val">quantity measured in ExaByte</param>
    /// <returns>quantity measured in CentiBit</returns>
    public static Quantity<double, CentiBit> ToCentiBit<T>(this BaseQuantity<T, ExaByte> val) where T:IConvertible {
        return new Quantity<double, CentiBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-18)) * (8*1E2))
        );
    }
	/// <summary>
    /// Extension method to convert ExaByte to MilliBit
    /// </summary>
    /// <param name="val">quantity measured in ExaByte</param>
    /// <returns>quantity measured in MilliBit</returns>
    public static Quantity<double, MilliBit> ToMilliBit<T>(this BaseQuantity<T, ExaByte> val) where T:IConvertible {
        return new Quantity<double, MilliBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-18)) * (8*1E3))
        );
    }
	/// <summary>
    /// Extension method to convert ExaByte to MicroBit
    /// </summary>
    /// <param name="val">quantity measured in ExaByte</param>
    /// <returns>quantity measured in MicroBit</returns>
    public static Quantity<double, MicroBit> ToMicroBit<T>(this BaseQuantity<T, ExaByte> val) where T:IConvertible {
        return new Quantity<double, MicroBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-18)) * (8*1E6))
        );
    }
	/// <summary>
    /// Extension method to convert ExaByte to NanoBit
    /// </summary>
    /// <param name="val">quantity measured in ExaByte</param>
    /// <returns>quantity measured in NanoBit</returns>
    public static Quantity<double, NanoBit> ToNanoBit<T>(this BaseQuantity<T, ExaByte> val) where T:IConvertible {
        return new Quantity<double, NanoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-18)) * (8*1E9))
        );
    }
	/// <summary>
    /// Extension method to convert ExaByte to PicoBit
    /// </summary>
    /// <param name="val">quantity measured in ExaByte</param>
    /// <returns>quantity measured in PicoBit</returns>
    public static Quantity<double, PicoBit> ToPicoBit<T>(this BaseQuantity<T, ExaByte> val) where T:IConvertible {
        return new Quantity<double, PicoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-18)) * (8*1E12))
        );
    }
	/// <summary>
    /// Extension method to convert ExaByte to FemtoBit
    /// </summary>
    /// <param name="val">quantity measured in ExaByte</param>
    /// <returns>quantity measured in FemtoBit</returns>
    public static Quantity<double, FemtoBit> ToFemtoBit<T>(this BaseQuantity<T, ExaByte> val) where T:IConvertible {
        return new Quantity<double, FemtoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-18)) * (8*1E15))
        );
    }
	/// <summary>
    /// Extension method to convert ExaByte to AttoBit
    /// </summary>
    /// <param name="val">quantity measured in ExaByte</param>
    /// <returns>quantity measured in AttoBit</returns>
    public static Quantity<double, AttoBit> ToAttoBit<T>(this BaseQuantity<T, ExaByte> val) where T:IConvertible {
        return new Quantity<double, AttoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-18)) * (8*1E18))
        );
    }
	/// <summary>
    /// Extension method to convert ExaByte to ZeptoBit
    /// </summary>
    /// <param name="val">quantity measured in ExaByte</param>
    /// <returns>quantity measured in ZeptoBit</returns>
    public static Quantity<double, ZeptoBit> ToZeptoBit<T>(this BaseQuantity<T, ExaByte> val) where T:IConvertible {
        return new Quantity<double, ZeptoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-18)) * (8*1E21))
        );
    }
	/// <summary>
    /// Extension method to convert ExaByte to YoctoBit
    /// </summary>
    /// <param name="val">quantity measured in ExaByte</param>
    /// <returns>quantity measured in YoctoBit</returns>
    public static Quantity<double, YoctoBit> ToYoctoBit<T>(this BaseQuantity<T, ExaByte> val) where T:IConvertible {
        return new Quantity<double, YoctoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-18)) * (8*1E24))
        );
    }
	/// <summary>
    /// Extension method to convert ExaByte to YottaByte
    /// </summary>
    /// <param name="val">quantity measured in ExaByte</param>
    /// <returns>quantity measured in YottaByte</returns>
    public static Quantity<double, YottaByte> ToYottaByte<T>(this BaseQuantity<T, ExaByte> val) where T:IConvertible {
        return new Quantity<double, YottaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-18)) * (1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert ExaByte to ZettaByte
    /// </summary>
    /// <param name="val">quantity measured in ExaByte</param>
    /// <returns>quantity measured in ZettaByte</returns>
    public static Quantity<double, ZettaByte> ToZettaByte<T>(this BaseQuantity<T, ExaByte> val) where T:IConvertible {
        return new Quantity<double, ZettaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-18)) * (1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert ExaByte to PetaByte
    /// </summary>
    /// <param name="val">quantity measured in ExaByte</param>
    /// <returns>quantity measured in PetaByte</returns>
    public static Quantity<double, PetaByte> ToPetaByte<T>(this BaseQuantity<T, ExaByte> val) where T:IConvertible {
        return new Quantity<double, PetaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-18)) * (1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert ExaByte to TeraByte
    /// </summary>
    /// <param name="val">quantity measured in ExaByte</param>
    /// <returns>quantity measured in TeraByte</returns>
    public static Quantity<double, TeraByte> ToTeraByte<T>(this BaseQuantity<T, ExaByte> val) where T:IConvertible {
        return new Quantity<double, TeraByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-18)) * (1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert ExaByte to GigaByte
    /// </summary>
    /// <param name="val">quantity measured in ExaByte</param>
    /// <returns>quantity measured in GigaByte</returns>
    public static Quantity<double, GigaByte> ToGigaByte<T>(this BaseQuantity<T, ExaByte> val) where T:IConvertible {
        return new Quantity<double, GigaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-18)) * (1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert ExaByte to MegaByte
    /// </summary>
    /// <param name="val">quantity measured in ExaByte</param>
    /// <returns>quantity measured in MegaByte</returns>
    public static Quantity<double, MegaByte> ToMegaByte<T>(this BaseQuantity<T, ExaByte> val) where T:IConvertible {
        return new Quantity<double, MegaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-18)) * (1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert ExaByte to KiloByte
    /// </summary>
    /// <param name="val">quantity measured in ExaByte</param>
    /// <returns>quantity measured in KiloByte</returns>
    public static Quantity<double, KiloByte> ToKiloByte<T>(this BaseQuantity<T, ExaByte> val) where T:IConvertible {
        return new Quantity<double, KiloByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-18)) * (1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert ExaByte to HectoByte
    /// </summary>
    /// <param name="val">quantity measured in ExaByte</param>
    /// <returns>quantity measured in HectoByte</returns>
    public static Quantity<double, HectoByte> ToHectoByte<T>(this BaseQuantity<T, ExaByte> val) where T:IConvertible {
        return new Quantity<double, HectoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-18)) * (1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert ExaByte to DekaByte
    /// </summary>
    /// <param name="val">quantity measured in ExaByte</param>
    /// <returns>quantity measured in DekaByte</returns>
    public static Quantity<double, DekaByte> ToDekaByte<T>(this BaseQuantity<T, ExaByte> val) where T:IConvertible {
        return new Quantity<double, DekaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-18)) * (1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert ExaByte to DeciByte
    /// </summary>
    /// <param name="val">quantity measured in ExaByte</param>
    /// <returns>quantity measured in DeciByte</returns>
    public static Quantity<double, DeciByte> ToDeciByte<T>(this BaseQuantity<T, ExaByte> val) where T:IConvertible {
        return new Quantity<double, DeciByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-18)) * (1E1))
        );
    }
	/// <summary>
    /// Extension method to convert ExaByte to CentiByte
    /// </summary>
    /// <param name="val">quantity measured in ExaByte</param>
    /// <returns>quantity measured in CentiByte</returns>
    public static Quantity<double, CentiByte> ToCentiByte<T>(this BaseQuantity<T, ExaByte> val) where T:IConvertible {
        return new Quantity<double, CentiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-18)) * (1E2))
        );
    }
	/// <summary>
    /// Extension method to convert ExaByte to MilliByte
    /// </summary>
    /// <param name="val">quantity measured in ExaByte</param>
    /// <returns>quantity measured in MilliByte</returns>
    public static Quantity<double, MilliByte> ToMilliByte<T>(this BaseQuantity<T, ExaByte> val) where T:IConvertible {
        return new Quantity<double, MilliByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-18)) * (1E3))
        );
    }
	/// <summary>
    /// Extension method to convert ExaByte to MicroByte
    /// </summary>
    /// <param name="val">quantity measured in ExaByte</param>
    /// <returns>quantity measured in MicroByte</returns>
    public static Quantity<double, MicroByte> ToMicroByte<T>(this BaseQuantity<T, ExaByte> val) where T:IConvertible {
        return new Quantity<double, MicroByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-18)) * (1E6))
        );
    }
	/// <summary>
    /// Extension method to convert ExaByte to NanoByte
    /// </summary>
    /// <param name="val">quantity measured in ExaByte</param>
    /// <returns>quantity measured in NanoByte</returns>
    public static Quantity<double, NanoByte> ToNanoByte<T>(this BaseQuantity<T, ExaByte> val) where T:IConvertible {
        return new Quantity<double, NanoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-18)) * (1E9))
        );
    }
	/// <summary>
    /// Extension method to convert ExaByte to PicoByte
    /// </summary>
    /// <param name="val">quantity measured in ExaByte</param>
    /// <returns>quantity measured in PicoByte</returns>
    public static Quantity<double, PicoByte> ToPicoByte<T>(this BaseQuantity<T, ExaByte> val) where T:IConvertible {
        return new Quantity<double, PicoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-18)) * (1E12))
        );
    }
	/// <summary>
    /// Extension method to convert ExaByte to FemtoByte
    /// </summary>
    /// <param name="val">quantity measured in ExaByte</param>
    /// <returns>quantity measured in FemtoByte</returns>
    public static Quantity<double, FemtoByte> ToFemtoByte<T>(this BaseQuantity<T, ExaByte> val) where T:IConvertible {
        return new Quantity<double, FemtoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-18)) * (1E15))
        );
    }
	/// <summary>
    /// Extension method to convert ExaByte to AttoByte
    /// </summary>
    /// <param name="val">quantity measured in ExaByte</param>
    /// <returns>quantity measured in AttoByte</returns>
    public static Quantity<double, AttoByte> ToAttoByte<T>(this BaseQuantity<T, ExaByte> val) where T:IConvertible {
        return new Quantity<double, AttoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-18)) * (1E18))
        );
    }
	/// <summary>
    /// Extension method to convert ExaByte to ZeptoByte
    /// </summary>
    /// <param name="val">quantity measured in ExaByte</param>
    /// <returns>quantity measured in ZeptoByte</returns>
    public static Quantity<double, ZeptoByte> ToZeptoByte<T>(this BaseQuantity<T, ExaByte> val) where T:IConvertible {
        return new Quantity<double, ZeptoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-18)) * (1E21))
        );
    }
	/// <summary>
    /// Extension method to convert ExaByte to YoctoByte
    /// </summary>
    /// <param name="val">quantity measured in ExaByte</param>
    /// <returns>quantity measured in YoctoByte</returns>
    public static Quantity<double, YoctoByte> ToYoctoByte<T>(this BaseQuantity<T, ExaByte> val) where T:IConvertible {
        return new Quantity<double, YoctoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-18)) * (1E24))
        );
    }
	/// <summary>
    /// Extension method to convert ExaByte to YobiByte
    /// </summary>
    /// <param name="val">quantity measured in ExaByte</param>
    /// <returns>quantity measured in YobiByte</returns>
    public static Quantity<double, YobiByte> ToYobiByte<T>(this BaseQuantity<T, ExaByte> val) where T:IConvertible {
        return new Quantity<double, YobiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-18)) * (1.2089258e-24))
        );
    }
	/// <summary>
    /// Extension method to convert ExaByte to ZebiByte
    /// </summary>
    /// <param name="val">quantity measured in ExaByte</param>
    /// <returns>quantity measured in ZebiByte</returns>
    public static Quantity<double, ZebiByte> ToZebiByte<T>(this BaseQuantity<T, ExaByte> val) where T:IConvertible {
        return new Quantity<double, ZebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-18)) * (1.1805916e-21))
        );
    }
	/// <summary>
    /// Extension method to convert ExaByte to ExbiByte
    /// </summary>
    /// <param name="val">quantity measured in ExaByte</param>
    /// <returns>quantity measured in ExbiByte</returns>
    public static Quantity<double, ExbiByte> ToExbiByte<T>(this BaseQuantity<T, ExaByte> val) where T:IConvertible {
        return new Quantity<double, ExbiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-18)) * (1.1529215e-18))
        );
    }
	/// <summary>
    /// Extension method to convert ExaByte to PebiByte
    /// </summary>
    /// <param name="val">quantity measured in ExaByte</param>
    /// <returns>quantity measured in PebiByte</returns>
    public static Quantity<double, PebiByte> ToPebiByte<T>(this BaseQuantity<T, ExaByte> val) where T:IConvertible {
        return new Quantity<double, PebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-18)) * (1.1258999e-15))
        );
    }
	/// <summary>
    /// Extension method to convert ExaByte to TebiByte
    /// </summary>
    /// <param name="val">quantity measured in ExaByte</param>
    /// <returns>quantity measured in TebiByte</returns>
    public static Quantity<double, TebiByte> ToTebiByte<T>(this BaseQuantity<T, ExaByte> val) where T:IConvertible {
        return new Quantity<double, TebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-18)) * (1.0995116e-12))
        );
    }
	/// <summary>
    /// Extension method to convert ExaByte to GibiByte
    /// </summary>
    /// <param name="val">quantity measured in ExaByte</param>
    /// <returns>quantity measured in GibiByte</returns>
    public static Quantity<double, GibiByte> ToGibiByte<T>(this BaseQuantity<T, ExaByte> val) where T:IConvertible {
        return new Quantity<double, GibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-18)) * (1d/1073741824))
        );
    }
	/// <summary>
    /// Extension method to convert ExaByte to MebiByte
    /// </summary>
    /// <param name="val">quantity measured in ExaByte</param>
    /// <returns>quantity measured in MebiByte</returns>
    public static Quantity<double, MebiByte> ToMebiByte<T>(this BaseQuantity<T, ExaByte> val) where T:IConvertible {
        return new Quantity<double, MebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-18)) * (1d/1048576))
        );
    }
	/// <summary>
    /// Extension method to convert ExaByte to KibiByte
    /// </summary>
    /// <param name="val">quantity measured in ExaByte</param>
    /// <returns>quantity measured in KibiByte</returns>
    public static Quantity<double, KibiByte> ToKibiByte<T>(this BaseQuantity<T, ExaByte> val) where T:IConvertible {
        return new Quantity<double, KibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-18)) * (1d/1024))
        );
    }
	/// <summary>
    /// Extension method to convert Byte to PetaByte
    /// </summary>
    /// <param name="val">quantity measured in Byte</param>
    /// <returns>quantity measured in PetaByte</returns>
    public static Quantity<double, PetaByte> ToPetaByte<T>(this BaseQuantity<T, Byte> val) where T:IConvertible {
        return new Quantity<double, PetaByte>(
            Convert.ToDouble(val.Value) * (1E-15)
        );
    }
	/// <summary>
    /// Extension method to convert PetaByte to Byte
    /// </summary>
    /// <param name="val">quantity measured in PetaByte</param>
    /// <returns>quantity measured in Byte</returns>
    public static Quantity<double, Byte> ToByte<T>(this BaseQuantity<T, PetaByte> val) where T:IConvertible {
        return new Quantity<double, Byte>(
            Convert.ToDouble(val.Value) * (1d/(1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert PetaByte to Bit
    /// </summary>
    /// <param name="val">quantity measured in PetaByte</param>
    /// <returns>quantity measured in Bit</returns>
    public static Quantity<double, Bit> ToBit<T>(this BaseQuantity<T, PetaByte> val) where T:IConvertible {
        return new Quantity<double, Bit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-15)) * (8))
        );
    }
	/// <summary>
    /// Extension method to convert PetaByte to YottaBit
    /// </summary>
    /// <param name="val">quantity measured in PetaByte</param>
    /// <returns>quantity measured in YottaBit</returns>
    public static Quantity<double, YottaBit> ToYottaBit<T>(this BaseQuantity<T, PetaByte> val) where T:IConvertible {
        return new Quantity<double, YottaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-15)) * (8*1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert PetaByte to ZettaBit
    /// </summary>
    /// <param name="val">quantity measured in PetaByte</param>
    /// <returns>quantity measured in ZettaBit</returns>
    public static Quantity<double, ZettaBit> ToZettaBit<T>(this BaseQuantity<T, PetaByte> val) where T:IConvertible {
        return new Quantity<double, ZettaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-15)) * (8*1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert PetaByte to ExaBit
    /// </summary>
    /// <param name="val">quantity measured in PetaByte</param>
    /// <returns>quantity measured in ExaBit</returns>
    public static Quantity<double, ExaBit> ToExaBit<T>(this BaseQuantity<T, PetaByte> val) where T:IConvertible {
        return new Quantity<double, ExaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-15)) * (8*1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert PetaByte to PetaBit
    /// </summary>
    /// <param name="val">quantity measured in PetaByte</param>
    /// <returns>quantity measured in PetaBit</returns>
    public static Quantity<double, PetaBit> ToPetaBit<T>(this BaseQuantity<T, PetaByte> val) where T:IConvertible {
        return new Quantity<double, PetaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-15)) * (8*1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert PetaByte to TeraBit
    /// </summary>
    /// <param name="val">quantity measured in PetaByte</param>
    /// <returns>quantity measured in TeraBit</returns>
    public static Quantity<double, TeraBit> ToTeraBit<T>(this BaseQuantity<T, PetaByte> val) where T:IConvertible {
        return new Quantity<double, TeraBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-15)) * (8*1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert PetaByte to GigaBit
    /// </summary>
    /// <param name="val">quantity measured in PetaByte</param>
    /// <returns>quantity measured in GigaBit</returns>
    public static Quantity<double, GigaBit> ToGigaBit<T>(this BaseQuantity<T, PetaByte> val) where T:IConvertible {
        return new Quantity<double, GigaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-15)) * (8*1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert PetaByte to MegaBit
    /// </summary>
    /// <param name="val">quantity measured in PetaByte</param>
    /// <returns>quantity measured in MegaBit</returns>
    public static Quantity<double, MegaBit> ToMegaBit<T>(this BaseQuantity<T, PetaByte> val) where T:IConvertible {
        return new Quantity<double, MegaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-15)) * (8*1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert PetaByte to KiloBit
    /// </summary>
    /// <param name="val">quantity measured in PetaByte</param>
    /// <returns>quantity measured in KiloBit</returns>
    public static Quantity<double, KiloBit> ToKiloBit<T>(this BaseQuantity<T, PetaByte> val) where T:IConvertible {
        return new Quantity<double, KiloBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-15)) * (8*1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert PetaByte to HectoBit
    /// </summary>
    /// <param name="val">quantity measured in PetaByte</param>
    /// <returns>quantity measured in HectoBit</returns>
    public static Quantity<double, HectoBit> ToHectoBit<T>(this BaseQuantity<T, PetaByte> val) where T:IConvertible {
        return new Quantity<double, HectoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-15)) * (8*1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert PetaByte to DekaBit
    /// </summary>
    /// <param name="val">quantity measured in PetaByte</param>
    /// <returns>quantity measured in DekaBit</returns>
    public static Quantity<double, DekaBit> ToDekaBit<T>(this BaseQuantity<T, PetaByte> val) where T:IConvertible {
        return new Quantity<double, DekaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-15)) * (8*1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert PetaByte to DeciBit
    /// </summary>
    /// <param name="val">quantity measured in PetaByte</param>
    /// <returns>quantity measured in DeciBit</returns>
    public static Quantity<double, DeciBit> ToDeciBit<T>(this BaseQuantity<T, PetaByte> val) where T:IConvertible {
        return new Quantity<double, DeciBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-15)) * (8*1E1))
        );
    }
	/// <summary>
    /// Extension method to convert PetaByte to CentiBit
    /// </summary>
    /// <param name="val">quantity measured in PetaByte</param>
    /// <returns>quantity measured in CentiBit</returns>
    public static Quantity<double, CentiBit> ToCentiBit<T>(this BaseQuantity<T, PetaByte> val) where T:IConvertible {
        return new Quantity<double, CentiBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-15)) * (8*1E2))
        );
    }
	/// <summary>
    /// Extension method to convert PetaByte to MilliBit
    /// </summary>
    /// <param name="val">quantity measured in PetaByte</param>
    /// <returns>quantity measured in MilliBit</returns>
    public static Quantity<double, MilliBit> ToMilliBit<T>(this BaseQuantity<T, PetaByte> val) where T:IConvertible {
        return new Quantity<double, MilliBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-15)) * (8*1E3))
        );
    }
	/// <summary>
    /// Extension method to convert PetaByte to MicroBit
    /// </summary>
    /// <param name="val">quantity measured in PetaByte</param>
    /// <returns>quantity measured in MicroBit</returns>
    public static Quantity<double, MicroBit> ToMicroBit<T>(this BaseQuantity<T, PetaByte> val) where T:IConvertible {
        return new Quantity<double, MicroBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-15)) * (8*1E6))
        );
    }
	/// <summary>
    /// Extension method to convert PetaByte to NanoBit
    /// </summary>
    /// <param name="val">quantity measured in PetaByte</param>
    /// <returns>quantity measured in NanoBit</returns>
    public static Quantity<double, NanoBit> ToNanoBit<T>(this BaseQuantity<T, PetaByte> val) where T:IConvertible {
        return new Quantity<double, NanoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-15)) * (8*1E9))
        );
    }
	/// <summary>
    /// Extension method to convert PetaByte to PicoBit
    /// </summary>
    /// <param name="val">quantity measured in PetaByte</param>
    /// <returns>quantity measured in PicoBit</returns>
    public static Quantity<double, PicoBit> ToPicoBit<T>(this BaseQuantity<T, PetaByte> val) where T:IConvertible {
        return new Quantity<double, PicoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-15)) * (8*1E12))
        );
    }
	/// <summary>
    /// Extension method to convert PetaByte to FemtoBit
    /// </summary>
    /// <param name="val">quantity measured in PetaByte</param>
    /// <returns>quantity measured in FemtoBit</returns>
    public static Quantity<double, FemtoBit> ToFemtoBit<T>(this BaseQuantity<T, PetaByte> val) where T:IConvertible {
        return new Quantity<double, FemtoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-15)) * (8*1E15))
        );
    }
	/// <summary>
    /// Extension method to convert PetaByte to AttoBit
    /// </summary>
    /// <param name="val">quantity measured in PetaByte</param>
    /// <returns>quantity measured in AttoBit</returns>
    public static Quantity<double, AttoBit> ToAttoBit<T>(this BaseQuantity<T, PetaByte> val) where T:IConvertible {
        return new Quantity<double, AttoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-15)) * (8*1E18))
        );
    }
	/// <summary>
    /// Extension method to convert PetaByte to ZeptoBit
    /// </summary>
    /// <param name="val">quantity measured in PetaByte</param>
    /// <returns>quantity measured in ZeptoBit</returns>
    public static Quantity<double, ZeptoBit> ToZeptoBit<T>(this BaseQuantity<T, PetaByte> val) where T:IConvertible {
        return new Quantity<double, ZeptoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-15)) * (8*1E21))
        );
    }
	/// <summary>
    /// Extension method to convert PetaByte to YoctoBit
    /// </summary>
    /// <param name="val">quantity measured in PetaByte</param>
    /// <returns>quantity measured in YoctoBit</returns>
    public static Quantity<double, YoctoBit> ToYoctoBit<T>(this BaseQuantity<T, PetaByte> val) where T:IConvertible {
        return new Quantity<double, YoctoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-15)) * (8*1E24))
        );
    }
	/// <summary>
    /// Extension method to convert PetaByte to YottaByte
    /// </summary>
    /// <param name="val">quantity measured in PetaByte</param>
    /// <returns>quantity measured in YottaByte</returns>
    public static Quantity<double, YottaByte> ToYottaByte<T>(this BaseQuantity<T, PetaByte> val) where T:IConvertible {
        return new Quantity<double, YottaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-15)) * (1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert PetaByte to ZettaByte
    /// </summary>
    /// <param name="val">quantity measured in PetaByte</param>
    /// <returns>quantity measured in ZettaByte</returns>
    public static Quantity<double, ZettaByte> ToZettaByte<T>(this BaseQuantity<T, PetaByte> val) where T:IConvertible {
        return new Quantity<double, ZettaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-15)) * (1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert PetaByte to ExaByte
    /// </summary>
    /// <param name="val">quantity measured in PetaByte</param>
    /// <returns>quantity measured in ExaByte</returns>
    public static Quantity<double, ExaByte> ToExaByte<T>(this BaseQuantity<T, PetaByte> val) where T:IConvertible {
        return new Quantity<double, ExaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-15)) * (1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert PetaByte to TeraByte
    /// </summary>
    /// <param name="val">quantity measured in PetaByte</param>
    /// <returns>quantity measured in TeraByte</returns>
    public static Quantity<double, TeraByte> ToTeraByte<T>(this BaseQuantity<T, PetaByte> val) where T:IConvertible {
        return new Quantity<double, TeraByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-15)) * (1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert PetaByte to GigaByte
    /// </summary>
    /// <param name="val">quantity measured in PetaByte</param>
    /// <returns>quantity measured in GigaByte</returns>
    public static Quantity<double, GigaByte> ToGigaByte<T>(this BaseQuantity<T, PetaByte> val) where T:IConvertible {
        return new Quantity<double, GigaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-15)) * (1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert PetaByte to MegaByte
    /// </summary>
    /// <param name="val">quantity measured in PetaByte</param>
    /// <returns>quantity measured in MegaByte</returns>
    public static Quantity<double, MegaByte> ToMegaByte<T>(this BaseQuantity<T, PetaByte> val) where T:IConvertible {
        return new Quantity<double, MegaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-15)) * (1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert PetaByte to KiloByte
    /// </summary>
    /// <param name="val">quantity measured in PetaByte</param>
    /// <returns>quantity measured in KiloByte</returns>
    public static Quantity<double, KiloByte> ToKiloByte<T>(this BaseQuantity<T, PetaByte> val) where T:IConvertible {
        return new Quantity<double, KiloByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-15)) * (1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert PetaByte to HectoByte
    /// </summary>
    /// <param name="val">quantity measured in PetaByte</param>
    /// <returns>quantity measured in HectoByte</returns>
    public static Quantity<double, HectoByte> ToHectoByte<T>(this BaseQuantity<T, PetaByte> val) where T:IConvertible {
        return new Quantity<double, HectoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-15)) * (1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert PetaByte to DekaByte
    /// </summary>
    /// <param name="val">quantity measured in PetaByte</param>
    /// <returns>quantity measured in DekaByte</returns>
    public static Quantity<double, DekaByte> ToDekaByte<T>(this BaseQuantity<T, PetaByte> val) where T:IConvertible {
        return new Quantity<double, DekaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-15)) * (1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert PetaByte to DeciByte
    /// </summary>
    /// <param name="val">quantity measured in PetaByte</param>
    /// <returns>quantity measured in DeciByte</returns>
    public static Quantity<double, DeciByte> ToDeciByte<T>(this BaseQuantity<T, PetaByte> val) where T:IConvertible {
        return new Quantity<double, DeciByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-15)) * (1E1))
        );
    }
	/// <summary>
    /// Extension method to convert PetaByte to CentiByte
    /// </summary>
    /// <param name="val">quantity measured in PetaByte</param>
    /// <returns>quantity measured in CentiByte</returns>
    public static Quantity<double, CentiByte> ToCentiByte<T>(this BaseQuantity<T, PetaByte> val) where T:IConvertible {
        return new Quantity<double, CentiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-15)) * (1E2))
        );
    }
	/// <summary>
    /// Extension method to convert PetaByte to MilliByte
    /// </summary>
    /// <param name="val">quantity measured in PetaByte</param>
    /// <returns>quantity measured in MilliByte</returns>
    public static Quantity<double, MilliByte> ToMilliByte<T>(this BaseQuantity<T, PetaByte> val) where T:IConvertible {
        return new Quantity<double, MilliByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-15)) * (1E3))
        );
    }
	/// <summary>
    /// Extension method to convert PetaByte to MicroByte
    /// </summary>
    /// <param name="val">quantity measured in PetaByte</param>
    /// <returns>quantity measured in MicroByte</returns>
    public static Quantity<double, MicroByte> ToMicroByte<T>(this BaseQuantity<T, PetaByte> val) where T:IConvertible {
        return new Quantity<double, MicroByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-15)) * (1E6))
        );
    }
	/// <summary>
    /// Extension method to convert PetaByte to NanoByte
    /// </summary>
    /// <param name="val">quantity measured in PetaByte</param>
    /// <returns>quantity measured in NanoByte</returns>
    public static Quantity<double, NanoByte> ToNanoByte<T>(this BaseQuantity<T, PetaByte> val) where T:IConvertible {
        return new Quantity<double, NanoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-15)) * (1E9))
        );
    }
	/// <summary>
    /// Extension method to convert PetaByte to PicoByte
    /// </summary>
    /// <param name="val">quantity measured in PetaByte</param>
    /// <returns>quantity measured in PicoByte</returns>
    public static Quantity<double, PicoByte> ToPicoByte<T>(this BaseQuantity<T, PetaByte> val) where T:IConvertible {
        return new Quantity<double, PicoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-15)) * (1E12))
        );
    }
	/// <summary>
    /// Extension method to convert PetaByte to FemtoByte
    /// </summary>
    /// <param name="val">quantity measured in PetaByte</param>
    /// <returns>quantity measured in FemtoByte</returns>
    public static Quantity<double, FemtoByte> ToFemtoByte<T>(this BaseQuantity<T, PetaByte> val) where T:IConvertible {
        return new Quantity<double, FemtoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-15)) * (1E15))
        );
    }
	/// <summary>
    /// Extension method to convert PetaByte to AttoByte
    /// </summary>
    /// <param name="val">quantity measured in PetaByte</param>
    /// <returns>quantity measured in AttoByte</returns>
    public static Quantity<double, AttoByte> ToAttoByte<T>(this BaseQuantity<T, PetaByte> val) where T:IConvertible {
        return new Quantity<double, AttoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-15)) * (1E18))
        );
    }
	/// <summary>
    /// Extension method to convert PetaByte to ZeptoByte
    /// </summary>
    /// <param name="val">quantity measured in PetaByte</param>
    /// <returns>quantity measured in ZeptoByte</returns>
    public static Quantity<double, ZeptoByte> ToZeptoByte<T>(this BaseQuantity<T, PetaByte> val) where T:IConvertible {
        return new Quantity<double, ZeptoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-15)) * (1E21))
        );
    }
	/// <summary>
    /// Extension method to convert PetaByte to YoctoByte
    /// </summary>
    /// <param name="val">quantity measured in PetaByte</param>
    /// <returns>quantity measured in YoctoByte</returns>
    public static Quantity<double, YoctoByte> ToYoctoByte<T>(this BaseQuantity<T, PetaByte> val) where T:IConvertible {
        return new Quantity<double, YoctoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-15)) * (1E24))
        );
    }
	/// <summary>
    /// Extension method to convert PetaByte to YobiByte
    /// </summary>
    /// <param name="val">quantity measured in PetaByte</param>
    /// <returns>quantity measured in YobiByte</returns>
    public static Quantity<double, YobiByte> ToYobiByte<T>(this BaseQuantity<T, PetaByte> val) where T:IConvertible {
        return new Quantity<double, YobiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-15)) * (1.2089258e-24))
        );
    }
	/// <summary>
    /// Extension method to convert PetaByte to ZebiByte
    /// </summary>
    /// <param name="val">quantity measured in PetaByte</param>
    /// <returns>quantity measured in ZebiByte</returns>
    public static Quantity<double, ZebiByte> ToZebiByte<T>(this BaseQuantity<T, PetaByte> val) where T:IConvertible {
        return new Quantity<double, ZebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-15)) * (1.1805916e-21))
        );
    }
	/// <summary>
    /// Extension method to convert PetaByte to ExbiByte
    /// </summary>
    /// <param name="val">quantity measured in PetaByte</param>
    /// <returns>quantity measured in ExbiByte</returns>
    public static Quantity<double, ExbiByte> ToExbiByte<T>(this BaseQuantity<T, PetaByte> val) where T:IConvertible {
        return new Quantity<double, ExbiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-15)) * (1.1529215e-18))
        );
    }
	/// <summary>
    /// Extension method to convert PetaByte to PebiByte
    /// </summary>
    /// <param name="val">quantity measured in PetaByte</param>
    /// <returns>quantity measured in PebiByte</returns>
    public static Quantity<double, PebiByte> ToPebiByte<T>(this BaseQuantity<T, PetaByte> val) where T:IConvertible {
        return new Quantity<double, PebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-15)) * (1.1258999e-15))
        );
    }
	/// <summary>
    /// Extension method to convert PetaByte to TebiByte
    /// </summary>
    /// <param name="val">quantity measured in PetaByte</param>
    /// <returns>quantity measured in TebiByte</returns>
    public static Quantity<double, TebiByte> ToTebiByte<T>(this BaseQuantity<T, PetaByte> val) where T:IConvertible {
        return new Quantity<double, TebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-15)) * (1.0995116e-12))
        );
    }
	/// <summary>
    /// Extension method to convert PetaByte to GibiByte
    /// </summary>
    /// <param name="val">quantity measured in PetaByte</param>
    /// <returns>quantity measured in GibiByte</returns>
    public static Quantity<double, GibiByte> ToGibiByte<T>(this BaseQuantity<T, PetaByte> val) where T:IConvertible {
        return new Quantity<double, GibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-15)) * (1d/1073741824))
        );
    }
	/// <summary>
    /// Extension method to convert PetaByte to MebiByte
    /// </summary>
    /// <param name="val">quantity measured in PetaByte</param>
    /// <returns>quantity measured in MebiByte</returns>
    public static Quantity<double, MebiByte> ToMebiByte<T>(this BaseQuantity<T, PetaByte> val) where T:IConvertible {
        return new Quantity<double, MebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-15)) * (1d/1048576))
        );
    }
	/// <summary>
    /// Extension method to convert PetaByte to KibiByte
    /// </summary>
    /// <param name="val">quantity measured in PetaByte</param>
    /// <returns>quantity measured in KibiByte</returns>
    public static Quantity<double, KibiByte> ToKibiByte<T>(this BaseQuantity<T, PetaByte> val) where T:IConvertible {
        return new Quantity<double, KibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-15)) * (1d/1024))
        );
    }
	/// <summary>
    /// Extension method to convert Byte to TeraByte
    /// </summary>
    /// <param name="val">quantity measured in Byte</param>
    /// <returns>quantity measured in TeraByte</returns>
    public static Quantity<double, TeraByte> ToTeraByte<T>(this BaseQuantity<T, Byte> val) where T:IConvertible {
        return new Quantity<double, TeraByte>(
            Convert.ToDouble(val.Value) * (1E-12)
        );
    }
	/// <summary>
    /// Extension method to convert TeraByte to Byte
    /// </summary>
    /// <param name="val">quantity measured in TeraByte</param>
    /// <returns>quantity measured in Byte</returns>
    public static Quantity<double, Byte> ToByte<T>(this BaseQuantity<T, TeraByte> val) where T:IConvertible {
        return new Quantity<double, Byte>(
            Convert.ToDouble(val.Value) * (1d/(1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert TeraByte to Bit
    /// </summary>
    /// <param name="val">quantity measured in TeraByte</param>
    /// <returns>quantity measured in Bit</returns>
    public static Quantity<double, Bit> ToBit<T>(this BaseQuantity<T, TeraByte> val) where T:IConvertible {
        return new Quantity<double, Bit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-12)) * (8))
        );
    }
	/// <summary>
    /// Extension method to convert TeraByte to YottaBit
    /// </summary>
    /// <param name="val">quantity measured in TeraByte</param>
    /// <returns>quantity measured in YottaBit</returns>
    public static Quantity<double, YottaBit> ToYottaBit<T>(this BaseQuantity<T, TeraByte> val) where T:IConvertible {
        return new Quantity<double, YottaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-12)) * (8*1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert TeraByte to ZettaBit
    /// </summary>
    /// <param name="val">quantity measured in TeraByte</param>
    /// <returns>quantity measured in ZettaBit</returns>
    public static Quantity<double, ZettaBit> ToZettaBit<T>(this BaseQuantity<T, TeraByte> val) where T:IConvertible {
        return new Quantity<double, ZettaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-12)) * (8*1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert TeraByte to ExaBit
    /// </summary>
    /// <param name="val">quantity measured in TeraByte</param>
    /// <returns>quantity measured in ExaBit</returns>
    public static Quantity<double, ExaBit> ToExaBit<T>(this BaseQuantity<T, TeraByte> val) where T:IConvertible {
        return new Quantity<double, ExaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-12)) * (8*1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert TeraByte to PetaBit
    /// </summary>
    /// <param name="val">quantity measured in TeraByte</param>
    /// <returns>quantity measured in PetaBit</returns>
    public static Quantity<double, PetaBit> ToPetaBit<T>(this BaseQuantity<T, TeraByte> val) where T:IConvertible {
        return new Quantity<double, PetaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-12)) * (8*1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert TeraByte to TeraBit
    /// </summary>
    /// <param name="val">quantity measured in TeraByte</param>
    /// <returns>quantity measured in TeraBit</returns>
    public static Quantity<double, TeraBit> ToTeraBit<T>(this BaseQuantity<T, TeraByte> val) where T:IConvertible {
        return new Quantity<double, TeraBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-12)) * (8*1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert TeraByte to GigaBit
    /// </summary>
    /// <param name="val">quantity measured in TeraByte</param>
    /// <returns>quantity measured in GigaBit</returns>
    public static Quantity<double, GigaBit> ToGigaBit<T>(this BaseQuantity<T, TeraByte> val) where T:IConvertible {
        return new Quantity<double, GigaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-12)) * (8*1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert TeraByte to MegaBit
    /// </summary>
    /// <param name="val">quantity measured in TeraByte</param>
    /// <returns>quantity measured in MegaBit</returns>
    public static Quantity<double, MegaBit> ToMegaBit<T>(this BaseQuantity<T, TeraByte> val) where T:IConvertible {
        return new Quantity<double, MegaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-12)) * (8*1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert TeraByte to KiloBit
    /// </summary>
    /// <param name="val">quantity measured in TeraByte</param>
    /// <returns>quantity measured in KiloBit</returns>
    public static Quantity<double, KiloBit> ToKiloBit<T>(this BaseQuantity<T, TeraByte> val) where T:IConvertible {
        return new Quantity<double, KiloBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-12)) * (8*1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert TeraByte to HectoBit
    /// </summary>
    /// <param name="val">quantity measured in TeraByte</param>
    /// <returns>quantity measured in HectoBit</returns>
    public static Quantity<double, HectoBit> ToHectoBit<T>(this BaseQuantity<T, TeraByte> val) where T:IConvertible {
        return new Quantity<double, HectoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-12)) * (8*1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert TeraByte to DekaBit
    /// </summary>
    /// <param name="val">quantity measured in TeraByte</param>
    /// <returns>quantity measured in DekaBit</returns>
    public static Quantity<double, DekaBit> ToDekaBit<T>(this BaseQuantity<T, TeraByte> val) where T:IConvertible {
        return new Quantity<double, DekaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-12)) * (8*1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert TeraByte to DeciBit
    /// </summary>
    /// <param name="val">quantity measured in TeraByte</param>
    /// <returns>quantity measured in DeciBit</returns>
    public static Quantity<double, DeciBit> ToDeciBit<T>(this BaseQuantity<T, TeraByte> val) where T:IConvertible {
        return new Quantity<double, DeciBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-12)) * (8*1E1))
        );
    }
	/// <summary>
    /// Extension method to convert TeraByte to CentiBit
    /// </summary>
    /// <param name="val">quantity measured in TeraByte</param>
    /// <returns>quantity measured in CentiBit</returns>
    public static Quantity<double, CentiBit> ToCentiBit<T>(this BaseQuantity<T, TeraByte> val) where T:IConvertible {
        return new Quantity<double, CentiBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-12)) * (8*1E2))
        );
    }
	/// <summary>
    /// Extension method to convert TeraByte to MilliBit
    /// </summary>
    /// <param name="val">quantity measured in TeraByte</param>
    /// <returns>quantity measured in MilliBit</returns>
    public static Quantity<double, MilliBit> ToMilliBit<T>(this BaseQuantity<T, TeraByte> val) where T:IConvertible {
        return new Quantity<double, MilliBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-12)) * (8*1E3))
        );
    }
	/// <summary>
    /// Extension method to convert TeraByte to MicroBit
    /// </summary>
    /// <param name="val">quantity measured in TeraByte</param>
    /// <returns>quantity measured in MicroBit</returns>
    public static Quantity<double, MicroBit> ToMicroBit<T>(this BaseQuantity<T, TeraByte> val) where T:IConvertible {
        return new Quantity<double, MicroBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-12)) * (8*1E6))
        );
    }
	/// <summary>
    /// Extension method to convert TeraByte to NanoBit
    /// </summary>
    /// <param name="val">quantity measured in TeraByte</param>
    /// <returns>quantity measured in NanoBit</returns>
    public static Quantity<double, NanoBit> ToNanoBit<T>(this BaseQuantity<T, TeraByte> val) where T:IConvertible {
        return new Quantity<double, NanoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-12)) * (8*1E9))
        );
    }
	/// <summary>
    /// Extension method to convert TeraByte to PicoBit
    /// </summary>
    /// <param name="val">quantity measured in TeraByte</param>
    /// <returns>quantity measured in PicoBit</returns>
    public static Quantity<double, PicoBit> ToPicoBit<T>(this BaseQuantity<T, TeraByte> val) where T:IConvertible {
        return new Quantity<double, PicoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-12)) * (8*1E12))
        );
    }
	/// <summary>
    /// Extension method to convert TeraByte to FemtoBit
    /// </summary>
    /// <param name="val">quantity measured in TeraByte</param>
    /// <returns>quantity measured in FemtoBit</returns>
    public static Quantity<double, FemtoBit> ToFemtoBit<T>(this BaseQuantity<T, TeraByte> val) where T:IConvertible {
        return new Quantity<double, FemtoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-12)) * (8*1E15))
        );
    }
	/// <summary>
    /// Extension method to convert TeraByte to AttoBit
    /// </summary>
    /// <param name="val">quantity measured in TeraByte</param>
    /// <returns>quantity measured in AttoBit</returns>
    public static Quantity<double, AttoBit> ToAttoBit<T>(this BaseQuantity<T, TeraByte> val) where T:IConvertible {
        return new Quantity<double, AttoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-12)) * (8*1E18))
        );
    }
	/// <summary>
    /// Extension method to convert TeraByte to ZeptoBit
    /// </summary>
    /// <param name="val">quantity measured in TeraByte</param>
    /// <returns>quantity measured in ZeptoBit</returns>
    public static Quantity<double, ZeptoBit> ToZeptoBit<T>(this BaseQuantity<T, TeraByte> val) where T:IConvertible {
        return new Quantity<double, ZeptoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-12)) * (8*1E21))
        );
    }
	/// <summary>
    /// Extension method to convert TeraByte to YoctoBit
    /// </summary>
    /// <param name="val">quantity measured in TeraByte</param>
    /// <returns>quantity measured in YoctoBit</returns>
    public static Quantity<double, YoctoBit> ToYoctoBit<T>(this BaseQuantity<T, TeraByte> val) where T:IConvertible {
        return new Quantity<double, YoctoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-12)) * (8*1E24))
        );
    }
	/// <summary>
    /// Extension method to convert TeraByte to YottaByte
    /// </summary>
    /// <param name="val">quantity measured in TeraByte</param>
    /// <returns>quantity measured in YottaByte</returns>
    public static Quantity<double, YottaByte> ToYottaByte<T>(this BaseQuantity<T, TeraByte> val) where T:IConvertible {
        return new Quantity<double, YottaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-12)) * (1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert TeraByte to ZettaByte
    /// </summary>
    /// <param name="val">quantity measured in TeraByte</param>
    /// <returns>quantity measured in ZettaByte</returns>
    public static Quantity<double, ZettaByte> ToZettaByte<T>(this BaseQuantity<T, TeraByte> val) where T:IConvertible {
        return new Quantity<double, ZettaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-12)) * (1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert TeraByte to ExaByte
    /// </summary>
    /// <param name="val">quantity measured in TeraByte</param>
    /// <returns>quantity measured in ExaByte</returns>
    public static Quantity<double, ExaByte> ToExaByte<T>(this BaseQuantity<T, TeraByte> val) where T:IConvertible {
        return new Quantity<double, ExaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-12)) * (1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert TeraByte to PetaByte
    /// </summary>
    /// <param name="val">quantity measured in TeraByte</param>
    /// <returns>quantity measured in PetaByte</returns>
    public static Quantity<double, PetaByte> ToPetaByte<T>(this BaseQuantity<T, TeraByte> val) where T:IConvertible {
        return new Quantity<double, PetaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-12)) * (1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert TeraByte to GigaByte
    /// </summary>
    /// <param name="val">quantity measured in TeraByte</param>
    /// <returns>quantity measured in GigaByte</returns>
    public static Quantity<double, GigaByte> ToGigaByte<T>(this BaseQuantity<T, TeraByte> val) where T:IConvertible {
        return new Quantity<double, GigaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-12)) * (1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert TeraByte to MegaByte
    /// </summary>
    /// <param name="val">quantity measured in TeraByte</param>
    /// <returns>quantity measured in MegaByte</returns>
    public static Quantity<double, MegaByte> ToMegaByte<T>(this BaseQuantity<T, TeraByte> val) where T:IConvertible {
        return new Quantity<double, MegaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-12)) * (1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert TeraByte to KiloByte
    /// </summary>
    /// <param name="val">quantity measured in TeraByte</param>
    /// <returns>quantity measured in KiloByte</returns>
    public static Quantity<double, KiloByte> ToKiloByte<T>(this BaseQuantity<T, TeraByte> val) where T:IConvertible {
        return new Quantity<double, KiloByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-12)) * (1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert TeraByte to HectoByte
    /// </summary>
    /// <param name="val">quantity measured in TeraByte</param>
    /// <returns>quantity measured in HectoByte</returns>
    public static Quantity<double, HectoByte> ToHectoByte<T>(this BaseQuantity<T, TeraByte> val) where T:IConvertible {
        return new Quantity<double, HectoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-12)) * (1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert TeraByte to DekaByte
    /// </summary>
    /// <param name="val">quantity measured in TeraByte</param>
    /// <returns>quantity measured in DekaByte</returns>
    public static Quantity<double, DekaByte> ToDekaByte<T>(this BaseQuantity<T, TeraByte> val) where T:IConvertible {
        return new Quantity<double, DekaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-12)) * (1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert TeraByte to DeciByte
    /// </summary>
    /// <param name="val">quantity measured in TeraByte</param>
    /// <returns>quantity measured in DeciByte</returns>
    public static Quantity<double, DeciByte> ToDeciByte<T>(this BaseQuantity<T, TeraByte> val) where T:IConvertible {
        return new Quantity<double, DeciByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-12)) * (1E1))
        );
    }
	/// <summary>
    /// Extension method to convert TeraByte to CentiByte
    /// </summary>
    /// <param name="val">quantity measured in TeraByte</param>
    /// <returns>quantity measured in CentiByte</returns>
    public static Quantity<double, CentiByte> ToCentiByte<T>(this BaseQuantity<T, TeraByte> val) where T:IConvertible {
        return new Quantity<double, CentiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-12)) * (1E2))
        );
    }
	/// <summary>
    /// Extension method to convert TeraByte to MilliByte
    /// </summary>
    /// <param name="val">quantity measured in TeraByte</param>
    /// <returns>quantity measured in MilliByte</returns>
    public static Quantity<double, MilliByte> ToMilliByte<T>(this BaseQuantity<T, TeraByte> val) where T:IConvertible {
        return new Quantity<double, MilliByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-12)) * (1E3))
        );
    }
	/// <summary>
    /// Extension method to convert TeraByte to MicroByte
    /// </summary>
    /// <param name="val">quantity measured in TeraByte</param>
    /// <returns>quantity measured in MicroByte</returns>
    public static Quantity<double, MicroByte> ToMicroByte<T>(this BaseQuantity<T, TeraByte> val) where T:IConvertible {
        return new Quantity<double, MicroByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-12)) * (1E6))
        );
    }
	/// <summary>
    /// Extension method to convert TeraByte to NanoByte
    /// </summary>
    /// <param name="val">quantity measured in TeraByte</param>
    /// <returns>quantity measured in NanoByte</returns>
    public static Quantity<double, NanoByte> ToNanoByte<T>(this BaseQuantity<T, TeraByte> val) where T:IConvertible {
        return new Quantity<double, NanoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-12)) * (1E9))
        );
    }
	/// <summary>
    /// Extension method to convert TeraByte to PicoByte
    /// </summary>
    /// <param name="val">quantity measured in TeraByte</param>
    /// <returns>quantity measured in PicoByte</returns>
    public static Quantity<double, PicoByte> ToPicoByte<T>(this BaseQuantity<T, TeraByte> val) where T:IConvertible {
        return new Quantity<double, PicoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-12)) * (1E12))
        );
    }
	/// <summary>
    /// Extension method to convert TeraByte to FemtoByte
    /// </summary>
    /// <param name="val">quantity measured in TeraByte</param>
    /// <returns>quantity measured in FemtoByte</returns>
    public static Quantity<double, FemtoByte> ToFemtoByte<T>(this BaseQuantity<T, TeraByte> val) where T:IConvertible {
        return new Quantity<double, FemtoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-12)) * (1E15))
        );
    }
	/// <summary>
    /// Extension method to convert TeraByte to AttoByte
    /// </summary>
    /// <param name="val">quantity measured in TeraByte</param>
    /// <returns>quantity measured in AttoByte</returns>
    public static Quantity<double, AttoByte> ToAttoByte<T>(this BaseQuantity<T, TeraByte> val) where T:IConvertible {
        return new Quantity<double, AttoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-12)) * (1E18))
        );
    }
	/// <summary>
    /// Extension method to convert TeraByte to ZeptoByte
    /// </summary>
    /// <param name="val">quantity measured in TeraByte</param>
    /// <returns>quantity measured in ZeptoByte</returns>
    public static Quantity<double, ZeptoByte> ToZeptoByte<T>(this BaseQuantity<T, TeraByte> val) where T:IConvertible {
        return new Quantity<double, ZeptoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-12)) * (1E21))
        );
    }
	/// <summary>
    /// Extension method to convert TeraByte to YoctoByte
    /// </summary>
    /// <param name="val">quantity measured in TeraByte</param>
    /// <returns>quantity measured in YoctoByte</returns>
    public static Quantity<double, YoctoByte> ToYoctoByte<T>(this BaseQuantity<T, TeraByte> val) where T:IConvertible {
        return new Quantity<double, YoctoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-12)) * (1E24))
        );
    }
	/// <summary>
    /// Extension method to convert TeraByte to YobiByte
    /// </summary>
    /// <param name="val">quantity measured in TeraByte</param>
    /// <returns>quantity measured in YobiByte</returns>
    public static Quantity<double, YobiByte> ToYobiByte<T>(this BaseQuantity<T, TeraByte> val) where T:IConvertible {
        return new Quantity<double, YobiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-12)) * (1.2089258e-24))
        );
    }
	/// <summary>
    /// Extension method to convert TeraByte to ZebiByte
    /// </summary>
    /// <param name="val">quantity measured in TeraByte</param>
    /// <returns>quantity measured in ZebiByte</returns>
    public static Quantity<double, ZebiByte> ToZebiByte<T>(this BaseQuantity<T, TeraByte> val) where T:IConvertible {
        return new Quantity<double, ZebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-12)) * (1.1805916e-21))
        );
    }
	/// <summary>
    /// Extension method to convert TeraByte to ExbiByte
    /// </summary>
    /// <param name="val">quantity measured in TeraByte</param>
    /// <returns>quantity measured in ExbiByte</returns>
    public static Quantity<double, ExbiByte> ToExbiByte<T>(this BaseQuantity<T, TeraByte> val) where T:IConvertible {
        return new Quantity<double, ExbiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-12)) * (1.1529215e-18))
        );
    }
	/// <summary>
    /// Extension method to convert TeraByte to PebiByte
    /// </summary>
    /// <param name="val">quantity measured in TeraByte</param>
    /// <returns>quantity measured in PebiByte</returns>
    public static Quantity<double, PebiByte> ToPebiByte<T>(this BaseQuantity<T, TeraByte> val) where T:IConvertible {
        return new Quantity<double, PebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-12)) * (1.1258999e-15))
        );
    }
	/// <summary>
    /// Extension method to convert TeraByte to TebiByte
    /// </summary>
    /// <param name="val">quantity measured in TeraByte</param>
    /// <returns>quantity measured in TebiByte</returns>
    public static Quantity<double, TebiByte> ToTebiByte<T>(this BaseQuantity<T, TeraByte> val) where T:IConvertible {
        return new Quantity<double, TebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-12)) * (1.0995116e-12))
        );
    }
	/// <summary>
    /// Extension method to convert TeraByte to GibiByte
    /// </summary>
    /// <param name="val">quantity measured in TeraByte</param>
    /// <returns>quantity measured in GibiByte</returns>
    public static Quantity<double, GibiByte> ToGibiByte<T>(this BaseQuantity<T, TeraByte> val) where T:IConvertible {
        return new Quantity<double, GibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-12)) * (1d/1073741824))
        );
    }
	/// <summary>
    /// Extension method to convert TeraByte to MebiByte
    /// </summary>
    /// <param name="val">quantity measured in TeraByte</param>
    /// <returns>quantity measured in MebiByte</returns>
    public static Quantity<double, MebiByte> ToMebiByte<T>(this BaseQuantity<T, TeraByte> val) where T:IConvertible {
        return new Quantity<double, MebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-12)) * (1d/1048576))
        );
    }
	/// <summary>
    /// Extension method to convert TeraByte to KibiByte
    /// </summary>
    /// <param name="val">quantity measured in TeraByte</param>
    /// <returns>quantity measured in KibiByte</returns>
    public static Quantity<double, KibiByte> ToKibiByte<T>(this BaseQuantity<T, TeraByte> val) where T:IConvertible {
        return new Quantity<double, KibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-12)) * (1d/1024))
        );
    }
	/// <summary>
    /// Extension method to convert Byte to GigaByte
    /// </summary>
    /// <param name="val">quantity measured in Byte</param>
    /// <returns>quantity measured in GigaByte</returns>
    public static Quantity<double, GigaByte> ToGigaByte<T>(this BaseQuantity<T, Byte> val) where T:IConvertible {
        return new Quantity<double, GigaByte>(
            Convert.ToDouble(val.Value) * (1E-9)
        );
    }
	/// <summary>
    /// Extension method to convert GigaByte to Byte
    /// </summary>
    /// <param name="val">quantity measured in GigaByte</param>
    /// <returns>quantity measured in Byte</returns>
    public static Quantity<double, Byte> ToByte<T>(this BaseQuantity<T, GigaByte> val) where T:IConvertible {
        return new Quantity<double, Byte>(
            Convert.ToDouble(val.Value) * (1d/(1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert GigaByte to Bit
    /// </summary>
    /// <param name="val">quantity measured in GigaByte</param>
    /// <returns>quantity measured in Bit</returns>
    public static Quantity<double, Bit> ToBit<T>(this BaseQuantity<T, GigaByte> val) where T:IConvertible {
        return new Quantity<double, Bit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-9)) * (8))
        );
    }
	/// <summary>
    /// Extension method to convert GigaByte to YottaBit
    /// </summary>
    /// <param name="val">quantity measured in GigaByte</param>
    /// <returns>quantity measured in YottaBit</returns>
    public static Quantity<double, YottaBit> ToYottaBit<T>(this BaseQuantity<T, GigaByte> val) where T:IConvertible {
        return new Quantity<double, YottaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-9)) * (8*1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert GigaByte to ZettaBit
    /// </summary>
    /// <param name="val">quantity measured in GigaByte</param>
    /// <returns>quantity measured in ZettaBit</returns>
    public static Quantity<double, ZettaBit> ToZettaBit<T>(this BaseQuantity<T, GigaByte> val) where T:IConvertible {
        return new Quantity<double, ZettaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-9)) * (8*1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert GigaByte to ExaBit
    /// </summary>
    /// <param name="val">quantity measured in GigaByte</param>
    /// <returns>quantity measured in ExaBit</returns>
    public static Quantity<double, ExaBit> ToExaBit<T>(this BaseQuantity<T, GigaByte> val) where T:IConvertible {
        return new Quantity<double, ExaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-9)) * (8*1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert GigaByte to PetaBit
    /// </summary>
    /// <param name="val">quantity measured in GigaByte</param>
    /// <returns>quantity measured in PetaBit</returns>
    public static Quantity<double, PetaBit> ToPetaBit<T>(this BaseQuantity<T, GigaByte> val) where T:IConvertible {
        return new Quantity<double, PetaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-9)) * (8*1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert GigaByte to TeraBit
    /// </summary>
    /// <param name="val">quantity measured in GigaByte</param>
    /// <returns>quantity measured in TeraBit</returns>
    public static Quantity<double, TeraBit> ToTeraBit<T>(this BaseQuantity<T, GigaByte> val) where T:IConvertible {
        return new Quantity<double, TeraBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-9)) * (8*1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert GigaByte to GigaBit
    /// </summary>
    /// <param name="val">quantity measured in GigaByte</param>
    /// <returns>quantity measured in GigaBit</returns>
    public static Quantity<double, GigaBit> ToGigaBit<T>(this BaseQuantity<T, GigaByte> val) where T:IConvertible {
        return new Quantity<double, GigaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-9)) * (8*1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert GigaByte to MegaBit
    /// </summary>
    /// <param name="val">quantity measured in GigaByte</param>
    /// <returns>quantity measured in MegaBit</returns>
    public static Quantity<double, MegaBit> ToMegaBit<T>(this BaseQuantity<T, GigaByte> val) where T:IConvertible {
        return new Quantity<double, MegaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-9)) * (8*1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert GigaByte to KiloBit
    /// </summary>
    /// <param name="val">quantity measured in GigaByte</param>
    /// <returns>quantity measured in KiloBit</returns>
    public static Quantity<double, KiloBit> ToKiloBit<T>(this BaseQuantity<T, GigaByte> val) where T:IConvertible {
        return new Quantity<double, KiloBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-9)) * (8*1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert GigaByte to HectoBit
    /// </summary>
    /// <param name="val">quantity measured in GigaByte</param>
    /// <returns>quantity measured in HectoBit</returns>
    public static Quantity<double, HectoBit> ToHectoBit<T>(this BaseQuantity<T, GigaByte> val) where T:IConvertible {
        return new Quantity<double, HectoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-9)) * (8*1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert GigaByte to DekaBit
    /// </summary>
    /// <param name="val">quantity measured in GigaByte</param>
    /// <returns>quantity measured in DekaBit</returns>
    public static Quantity<double, DekaBit> ToDekaBit<T>(this BaseQuantity<T, GigaByte> val) where T:IConvertible {
        return new Quantity<double, DekaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-9)) * (8*1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert GigaByte to DeciBit
    /// </summary>
    /// <param name="val">quantity measured in GigaByte</param>
    /// <returns>quantity measured in DeciBit</returns>
    public static Quantity<double, DeciBit> ToDeciBit<T>(this BaseQuantity<T, GigaByte> val) where T:IConvertible {
        return new Quantity<double, DeciBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-9)) * (8*1E1))
        );
    }
	/// <summary>
    /// Extension method to convert GigaByte to CentiBit
    /// </summary>
    /// <param name="val">quantity measured in GigaByte</param>
    /// <returns>quantity measured in CentiBit</returns>
    public static Quantity<double, CentiBit> ToCentiBit<T>(this BaseQuantity<T, GigaByte> val) where T:IConvertible {
        return new Quantity<double, CentiBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-9)) * (8*1E2))
        );
    }
	/// <summary>
    /// Extension method to convert GigaByte to MilliBit
    /// </summary>
    /// <param name="val">quantity measured in GigaByte</param>
    /// <returns>quantity measured in MilliBit</returns>
    public static Quantity<double, MilliBit> ToMilliBit<T>(this BaseQuantity<T, GigaByte> val) where T:IConvertible {
        return new Quantity<double, MilliBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-9)) * (8*1E3))
        );
    }
	/// <summary>
    /// Extension method to convert GigaByte to MicroBit
    /// </summary>
    /// <param name="val">quantity measured in GigaByte</param>
    /// <returns>quantity measured in MicroBit</returns>
    public static Quantity<double, MicroBit> ToMicroBit<T>(this BaseQuantity<T, GigaByte> val) where T:IConvertible {
        return new Quantity<double, MicroBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-9)) * (8*1E6))
        );
    }
	/// <summary>
    /// Extension method to convert GigaByte to NanoBit
    /// </summary>
    /// <param name="val">quantity measured in GigaByte</param>
    /// <returns>quantity measured in NanoBit</returns>
    public static Quantity<double, NanoBit> ToNanoBit<T>(this BaseQuantity<T, GigaByte> val) where T:IConvertible {
        return new Quantity<double, NanoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-9)) * (8*1E9))
        );
    }
	/// <summary>
    /// Extension method to convert GigaByte to PicoBit
    /// </summary>
    /// <param name="val">quantity measured in GigaByte</param>
    /// <returns>quantity measured in PicoBit</returns>
    public static Quantity<double, PicoBit> ToPicoBit<T>(this BaseQuantity<T, GigaByte> val) where T:IConvertible {
        return new Quantity<double, PicoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-9)) * (8*1E12))
        );
    }
	/// <summary>
    /// Extension method to convert GigaByte to FemtoBit
    /// </summary>
    /// <param name="val">quantity measured in GigaByte</param>
    /// <returns>quantity measured in FemtoBit</returns>
    public static Quantity<double, FemtoBit> ToFemtoBit<T>(this BaseQuantity<T, GigaByte> val) where T:IConvertible {
        return new Quantity<double, FemtoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-9)) * (8*1E15))
        );
    }
	/// <summary>
    /// Extension method to convert GigaByte to AttoBit
    /// </summary>
    /// <param name="val">quantity measured in GigaByte</param>
    /// <returns>quantity measured in AttoBit</returns>
    public static Quantity<double, AttoBit> ToAttoBit<T>(this BaseQuantity<T, GigaByte> val) where T:IConvertible {
        return new Quantity<double, AttoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-9)) * (8*1E18))
        );
    }
	/// <summary>
    /// Extension method to convert GigaByte to ZeptoBit
    /// </summary>
    /// <param name="val">quantity measured in GigaByte</param>
    /// <returns>quantity measured in ZeptoBit</returns>
    public static Quantity<double, ZeptoBit> ToZeptoBit<T>(this BaseQuantity<T, GigaByte> val) where T:IConvertible {
        return new Quantity<double, ZeptoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-9)) * (8*1E21))
        );
    }
	/// <summary>
    /// Extension method to convert GigaByte to YoctoBit
    /// </summary>
    /// <param name="val">quantity measured in GigaByte</param>
    /// <returns>quantity measured in YoctoBit</returns>
    public static Quantity<double, YoctoBit> ToYoctoBit<T>(this BaseQuantity<T, GigaByte> val) where T:IConvertible {
        return new Quantity<double, YoctoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-9)) * (8*1E24))
        );
    }
	/// <summary>
    /// Extension method to convert GigaByte to YottaByte
    /// </summary>
    /// <param name="val">quantity measured in GigaByte</param>
    /// <returns>quantity measured in YottaByte</returns>
    public static Quantity<double, YottaByte> ToYottaByte<T>(this BaseQuantity<T, GigaByte> val) where T:IConvertible {
        return new Quantity<double, YottaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-9)) * (1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert GigaByte to ZettaByte
    /// </summary>
    /// <param name="val">quantity measured in GigaByte</param>
    /// <returns>quantity measured in ZettaByte</returns>
    public static Quantity<double, ZettaByte> ToZettaByte<T>(this BaseQuantity<T, GigaByte> val) where T:IConvertible {
        return new Quantity<double, ZettaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-9)) * (1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert GigaByte to ExaByte
    /// </summary>
    /// <param name="val">quantity measured in GigaByte</param>
    /// <returns>quantity measured in ExaByte</returns>
    public static Quantity<double, ExaByte> ToExaByte<T>(this BaseQuantity<T, GigaByte> val) where T:IConvertible {
        return new Quantity<double, ExaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-9)) * (1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert GigaByte to PetaByte
    /// </summary>
    /// <param name="val">quantity measured in GigaByte</param>
    /// <returns>quantity measured in PetaByte</returns>
    public static Quantity<double, PetaByte> ToPetaByte<T>(this BaseQuantity<T, GigaByte> val) where T:IConvertible {
        return new Quantity<double, PetaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-9)) * (1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert GigaByte to TeraByte
    /// </summary>
    /// <param name="val">quantity measured in GigaByte</param>
    /// <returns>quantity measured in TeraByte</returns>
    public static Quantity<double, TeraByte> ToTeraByte<T>(this BaseQuantity<T, GigaByte> val) where T:IConvertible {
        return new Quantity<double, TeraByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-9)) * (1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert GigaByte to MegaByte
    /// </summary>
    /// <param name="val">quantity measured in GigaByte</param>
    /// <returns>quantity measured in MegaByte</returns>
    public static Quantity<double, MegaByte> ToMegaByte<T>(this BaseQuantity<T, GigaByte> val) where T:IConvertible {
        return new Quantity<double, MegaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-9)) * (1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert GigaByte to KiloByte
    /// </summary>
    /// <param name="val">quantity measured in GigaByte</param>
    /// <returns>quantity measured in KiloByte</returns>
    public static Quantity<double, KiloByte> ToKiloByte<T>(this BaseQuantity<T, GigaByte> val) where T:IConvertible {
        return new Quantity<double, KiloByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-9)) * (1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert GigaByte to HectoByte
    /// </summary>
    /// <param name="val">quantity measured in GigaByte</param>
    /// <returns>quantity measured in HectoByte</returns>
    public static Quantity<double, HectoByte> ToHectoByte<T>(this BaseQuantity<T, GigaByte> val) where T:IConvertible {
        return new Quantity<double, HectoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-9)) * (1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert GigaByte to DekaByte
    /// </summary>
    /// <param name="val">quantity measured in GigaByte</param>
    /// <returns>quantity measured in DekaByte</returns>
    public static Quantity<double, DekaByte> ToDekaByte<T>(this BaseQuantity<T, GigaByte> val) where T:IConvertible {
        return new Quantity<double, DekaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-9)) * (1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert GigaByte to DeciByte
    /// </summary>
    /// <param name="val">quantity measured in GigaByte</param>
    /// <returns>quantity measured in DeciByte</returns>
    public static Quantity<double, DeciByte> ToDeciByte<T>(this BaseQuantity<T, GigaByte> val) where T:IConvertible {
        return new Quantity<double, DeciByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-9)) * (1E1))
        );
    }
	/// <summary>
    /// Extension method to convert GigaByte to CentiByte
    /// </summary>
    /// <param name="val">quantity measured in GigaByte</param>
    /// <returns>quantity measured in CentiByte</returns>
    public static Quantity<double, CentiByte> ToCentiByte<T>(this BaseQuantity<T, GigaByte> val) where T:IConvertible {
        return new Quantity<double, CentiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-9)) * (1E2))
        );
    }
	/// <summary>
    /// Extension method to convert GigaByte to MilliByte
    /// </summary>
    /// <param name="val">quantity measured in GigaByte</param>
    /// <returns>quantity measured in MilliByte</returns>
    public static Quantity<double, MilliByte> ToMilliByte<T>(this BaseQuantity<T, GigaByte> val) where T:IConvertible {
        return new Quantity<double, MilliByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-9)) * (1E3))
        );
    }
	/// <summary>
    /// Extension method to convert GigaByte to MicroByte
    /// </summary>
    /// <param name="val">quantity measured in GigaByte</param>
    /// <returns>quantity measured in MicroByte</returns>
    public static Quantity<double, MicroByte> ToMicroByte<T>(this BaseQuantity<T, GigaByte> val) where T:IConvertible {
        return new Quantity<double, MicroByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-9)) * (1E6))
        );
    }
	/// <summary>
    /// Extension method to convert GigaByte to NanoByte
    /// </summary>
    /// <param name="val">quantity measured in GigaByte</param>
    /// <returns>quantity measured in NanoByte</returns>
    public static Quantity<double, NanoByte> ToNanoByte<T>(this BaseQuantity<T, GigaByte> val) where T:IConvertible {
        return new Quantity<double, NanoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-9)) * (1E9))
        );
    }
	/// <summary>
    /// Extension method to convert GigaByte to PicoByte
    /// </summary>
    /// <param name="val">quantity measured in GigaByte</param>
    /// <returns>quantity measured in PicoByte</returns>
    public static Quantity<double, PicoByte> ToPicoByte<T>(this BaseQuantity<T, GigaByte> val) where T:IConvertible {
        return new Quantity<double, PicoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-9)) * (1E12))
        );
    }
	/// <summary>
    /// Extension method to convert GigaByte to FemtoByte
    /// </summary>
    /// <param name="val">quantity measured in GigaByte</param>
    /// <returns>quantity measured in FemtoByte</returns>
    public static Quantity<double, FemtoByte> ToFemtoByte<T>(this BaseQuantity<T, GigaByte> val) where T:IConvertible {
        return new Quantity<double, FemtoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-9)) * (1E15))
        );
    }
	/// <summary>
    /// Extension method to convert GigaByte to AttoByte
    /// </summary>
    /// <param name="val">quantity measured in GigaByte</param>
    /// <returns>quantity measured in AttoByte</returns>
    public static Quantity<double, AttoByte> ToAttoByte<T>(this BaseQuantity<T, GigaByte> val) where T:IConvertible {
        return new Quantity<double, AttoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-9)) * (1E18))
        );
    }
	/// <summary>
    /// Extension method to convert GigaByte to ZeptoByte
    /// </summary>
    /// <param name="val">quantity measured in GigaByte</param>
    /// <returns>quantity measured in ZeptoByte</returns>
    public static Quantity<double, ZeptoByte> ToZeptoByte<T>(this BaseQuantity<T, GigaByte> val) where T:IConvertible {
        return new Quantity<double, ZeptoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-9)) * (1E21))
        );
    }
	/// <summary>
    /// Extension method to convert GigaByte to YoctoByte
    /// </summary>
    /// <param name="val">quantity measured in GigaByte</param>
    /// <returns>quantity measured in YoctoByte</returns>
    public static Quantity<double, YoctoByte> ToYoctoByte<T>(this BaseQuantity<T, GigaByte> val) where T:IConvertible {
        return new Quantity<double, YoctoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-9)) * (1E24))
        );
    }
	/// <summary>
    /// Extension method to convert GigaByte to YobiByte
    /// </summary>
    /// <param name="val">quantity measured in GigaByte</param>
    /// <returns>quantity measured in YobiByte</returns>
    public static Quantity<double, YobiByte> ToYobiByte<T>(this BaseQuantity<T, GigaByte> val) where T:IConvertible {
        return new Quantity<double, YobiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-9)) * (1.2089258e-24))
        );
    }
	/// <summary>
    /// Extension method to convert GigaByte to ZebiByte
    /// </summary>
    /// <param name="val">quantity measured in GigaByte</param>
    /// <returns>quantity measured in ZebiByte</returns>
    public static Quantity<double, ZebiByte> ToZebiByte<T>(this BaseQuantity<T, GigaByte> val) where T:IConvertible {
        return new Quantity<double, ZebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-9)) * (1.1805916e-21))
        );
    }
	/// <summary>
    /// Extension method to convert GigaByte to ExbiByte
    /// </summary>
    /// <param name="val">quantity measured in GigaByte</param>
    /// <returns>quantity measured in ExbiByte</returns>
    public static Quantity<double, ExbiByte> ToExbiByte<T>(this BaseQuantity<T, GigaByte> val) where T:IConvertible {
        return new Quantity<double, ExbiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-9)) * (1.1529215e-18))
        );
    }
	/// <summary>
    /// Extension method to convert GigaByte to PebiByte
    /// </summary>
    /// <param name="val">quantity measured in GigaByte</param>
    /// <returns>quantity measured in PebiByte</returns>
    public static Quantity<double, PebiByte> ToPebiByte<T>(this BaseQuantity<T, GigaByte> val) where T:IConvertible {
        return new Quantity<double, PebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-9)) * (1.1258999e-15))
        );
    }
	/// <summary>
    /// Extension method to convert GigaByte to TebiByte
    /// </summary>
    /// <param name="val">quantity measured in GigaByte</param>
    /// <returns>quantity measured in TebiByte</returns>
    public static Quantity<double, TebiByte> ToTebiByte<T>(this BaseQuantity<T, GigaByte> val) where T:IConvertible {
        return new Quantity<double, TebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-9)) * (1.0995116e-12))
        );
    }
	/// <summary>
    /// Extension method to convert GigaByte to GibiByte
    /// </summary>
    /// <param name="val">quantity measured in GigaByte</param>
    /// <returns>quantity measured in GibiByte</returns>
    public static Quantity<double, GibiByte> ToGibiByte<T>(this BaseQuantity<T, GigaByte> val) where T:IConvertible {
        return new Quantity<double, GibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-9)) * (1d/1073741824))
        );
    }
	/// <summary>
    /// Extension method to convert GigaByte to MebiByte
    /// </summary>
    /// <param name="val">quantity measured in GigaByte</param>
    /// <returns>quantity measured in MebiByte</returns>
    public static Quantity<double, MebiByte> ToMebiByte<T>(this BaseQuantity<T, GigaByte> val) where T:IConvertible {
        return new Quantity<double, MebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-9)) * (1d/1048576))
        );
    }
	/// <summary>
    /// Extension method to convert GigaByte to KibiByte
    /// </summary>
    /// <param name="val">quantity measured in GigaByte</param>
    /// <returns>quantity measured in KibiByte</returns>
    public static Quantity<double, KibiByte> ToKibiByte<T>(this BaseQuantity<T, GigaByte> val) where T:IConvertible {
        return new Quantity<double, KibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-9)) * (1d/1024))
        );
    }
	/// <summary>
    /// Extension method to convert Byte to MegaByte
    /// </summary>
    /// <param name="val">quantity measured in Byte</param>
    /// <returns>quantity measured in MegaByte</returns>
    public static Quantity<double, MegaByte> ToMegaByte<T>(this BaseQuantity<T, Byte> val) where T:IConvertible {
        return new Quantity<double, MegaByte>(
            Convert.ToDouble(val.Value) * (1E-6)
        );
    }
	/// <summary>
    /// Extension method to convert MegaByte to Byte
    /// </summary>
    /// <param name="val">quantity measured in MegaByte</param>
    /// <returns>quantity measured in Byte</returns>
    public static Quantity<double, Byte> ToByte<T>(this BaseQuantity<T, MegaByte> val) where T:IConvertible {
        return new Quantity<double, Byte>(
            Convert.ToDouble(val.Value) * (1d/(1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert MegaByte to Bit
    /// </summary>
    /// <param name="val">quantity measured in MegaByte</param>
    /// <returns>quantity measured in Bit</returns>
    public static Quantity<double, Bit> ToBit<T>(this BaseQuantity<T, MegaByte> val) where T:IConvertible {
        return new Quantity<double, Bit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-6)) * (8))
        );
    }
	/// <summary>
    /// Extension method to convert MegaByte to YottaBit
    /// </summary>
    /// <param name="val">quantity measured in MegaByte</param>
    /// <returns>quantity measured in YottaBit</returns>
    public static Quantity<double, YottaBit> ToYottaBit<T>(this BaseQuantity<T, MegaByte> val) where T:IConvertible {
        return new Quantity<double, YottaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-6)) * (8*1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert MegaByte to ZettaBit
    /// </summary>
    /// <param name="val">quantity measured in MegaByte</param>
    /// <returns>quantity measured in ZettaBit</returns>
    public static Quantity<double, ZettaBit> ToZettaBit<T>(this BaseQuantity<T, MegaByte> val) where T:IConvertible {
        return new Quantity<double, ZettaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-6)) * (8*1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert MegaByte to ExaBit
    /// </summary>
    /// <param name="val">quantity measured in MegaByte</param>
    /// <returns>quantity measured in ExaBit</returns>
    public static Quantity<double, ExaBit> ToExaBit<T>(this BaseQuantity<T, MegaByte> val) where T:IConvertible {
        return new Quantity<double, ExaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-6)) * (8*1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert MegaByte to PetaBit
    /// </summary>
    /// <param name="val">quantity measured in MegaByte</param>
    /// <returns>quantity measured in PetaBit</returns>
    public static Quantity<double, PetaBit> ToPetaBit<T>(this BaseQuantity<T, MegaByte> val) where T:IConvertible {
        return new Quantity<double, PetaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-6)) * (8*1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert MegaByte to TeraBit
    /// </summary>
    /// <param name="val">quantity measured in MegaByte</param>
    /// <returns>quantity measured in TeraBit</returns>
    public static Quantity<double, TeraBit> ToTeraBit<T>(this BaseQuantity<T, MegaByte> val) where T:IConvertible {
        return new Quantity<double, TeraBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-6)) * (8*1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert MegaByte to GigaBit
    /// </summary>
    /// <param name="val">quantity measured in MegaByte</param>
    /// <returns>quantity measured in GigaBit</returns>
    public static Quantity<double, GigaBit> ToGigaBit<T>(this BaseQuantity<T, MegaByte> val) where T:IConvertible {
        return new Quantity<double, GigaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-6)) * (8*1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert MegaByte to MegaBit
    /// </summary>
    /// <param name="val">quantity measured in MegaByte</param>
    /// <returns>quantity measured in MegaBit</returns>
    public static Quantity<double, MegaBit> ToMegaBit<T>(this BaseQuantity<T, MegaByte> val) where T:IConvertible {
        return new Quantity<double, MegaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-6)) * (8*1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert MegaByte to KiloBit
    /// </summary>
    /// <param name="val">quantity measured in MegaByte</param>
    /// <returns>quantity measured in KiloBit</returns>
    public static Quantity<double, KiloBit> ToKiloBit<T>(this BaseQuantity<T, MegaByte> val) where T:IConvertible {
        return new Quantity<double, KiloBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-6)) * (8*1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert MegaByte to HectoBit
    /// </summary>
    /// <param name="val">quantity measured in MegaByte</param>
    /// <returns>quantity measured in HectoBit</returns>
    public static Quantity<double, HectoBit> ToHectoBit<T>(this BaseQuantity<T, MegaByte> val) where T:IConvertible {
        return new Quantity<double, HectoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-6)) * (8*1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert MegaByte to DekaBit
    /// </summary>
    /// <param name="val">quantity measured in MegaByte</param>
    /// <returns>quantity measured in DekaBit</returns>
    public static Quantity<double, DekaBit> ToDekaBit<T>(this BaseQuantity<T, MegaByte> val) where T:IConvertible {
        return new Quantity<double, DekaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-6)) * (8*1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert MegaByte to DeciBit
    /// </summary>
    /// <param name="val">quantity measured in MegaByte</param>
    /// <returns>quantity measured in DeciBit</returns>
    public static Quantity<double, DeciBit> ToDeciBit<T>(this BaseQuantity<T, MegaByte> val) where T:IConvertible {
        return new Quantity<double, DeciBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-6)) * (8*1E1))
        );
    }
	/// <summary>
    /// Extension method to convert MegaByte to CentiBit
    /// </summary>
    /// <param name="val">quantity measured in MegaByte</param>
    /// <returns>quantity measured in CentiBit</returns>
    public static Quantity<double, CentiBit> ToCentiBit<T>(this BaseQuantity<T, MegaByte> val) where T:IConvertible {
        return new Quantity<double, CentiBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-6)) * (8*1E2))
        );
    }
	/// <summary>
    /// Extension method to convert MegaByte to MilliBit
    /// </summary>
    /// <param name="val">quantity measured in MegaByte</param>
    /// <returns>quantity measured in MilliBit</returns>
    public static Quantity<double, MilliBit> ToMilliBit<T>(this BaseQuantity<T, MegaByte> val) where T:IConvertible {
        return new Quantity<double, MilliBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-6)) * (8*1E3))
        );
    }
	/// <summary>
    /// Extension method to convert MegaByte to MicroBit
    /// </summary>
    /// <param name="val">quantity measured in MegaByte</param>
    /// <returns>quantity measured in MicroBit</returns>
    public static Quantity<double, MicroBit> ToMicroBit<T>(this BaseQuantity<T, MegaByte> val) where T:IConvertible {
        return new Quantity<double, MicroBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-6)) * (8*1E6))
        );
    }
	/// <summary>
    /// Extension method to convert MegaByte to NanoBit
    /// </summary>
    /// <param name="val">quantity measured in MegaByte</param>
    /// <returns>quantity measured in NanoBit</returns>
    public static Quantity<double, NanoBit> ToNanoBit<T>(this BaseQuantity<T, MegaByte> val) where T:IConvertible {
        return new Quantity<double, NanoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-6)) * (8*1E9))
        );
    }
	/// <summary>
    /// Extension method to convert MegaByte to PicoBit
    /// </summary>
    /// <param name="val">quantity measured in MegaByte</param>
    /// <returns>quantity measured in PicoBit</returns>
    public static Quantity<double, PicoBit> ToPicoBit<T>(this BaseQuantity<T, MegaByte> val) where T:IConvertible {
        return new Quantity<double, PicoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-6)) * (8*1E12))
        );
    }
	/// <summary>
    /// Extension method to convert MegaByte to FemtoBit
    /// </summary>
    /// <param name="val">quantity measured in MegaByte</param>
    /// <returns>quantity measured in FemtoBit</returns>
    public static Quantity<double, FemtoBit> ToFemtoBit<T>(this BaseQuantity<T, MegaByte> val) where T:IConvertible {
        return new Quantity<double, FemtoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-6)) * (8*1E15))
        );
    }
	/// <summary>
    /// Extension method to convert MegaByte to AttoBit
    /// </summary>
    /// <param name="val">quantity measured in MegaByte</param>
    /// <returns>quantity measured in AttoBit</returns>
    public static Quantity<double, AttoBit> ToAttoBit<T>(this BaseQuantity<T, MegaByte> val) where T:IConvertible {
        return new Quantity<double, AttoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-6)) * (8*1E18))
        );
    }
	/// <summary>
    /// Extension method to convert MegaByte to ZeptoBit
    /// </summary>
    /// <param name="val">quantity measured in MegaByte</param>
    /// <returns>quantity measured in ZeptoBit</returns>
    public static Quantity<double, ZeptoBit> ToZeptoBit<T>(this BaseQuantity<T, MegaByte> val) where T:IConvertible {
        return new Quantity<double, ZeptoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-6)) * (8*1E21))
        );
    }
	/// <summary>
    /// Extension method to convert MegaByte to YoctoBit
    /// </summary>
    /// <param name="val">quantity measured in MegaByte</param>
    /// <returns>quantity measured in YoctoBit</returns>
    public static Quantity<double, YoctoBit> ToYoctoBit<T>(this BaseQuantity<T, MegaByte> val) where T:IConvertible {
        return new Quantity<double, YoctoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-6)) * (8*1E24))
        );
    }
	/// <summary>
    /// Extension method to convert MegaByte to YottaByte
    /// </summary>
    /// <param name="val">quantity measured in MegaByte</param>
    /// <returns>quantity measured in YottaByte</returns>
    public static Quantity<double, YottaByte> ToYottaByte<T>(this BaseQuantity<T, MegaByte> val) where T:IConvertible {
        return new Quantity<double, YottaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-6)) * (1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert MegaByte to ZettaByte
    /// </summary>
    /// <param name="val">quantity measured in MegaByte</param>
    /// <returns>quantity measured in ZettaByte</returns>
    public static Quantity<double, ZettaByte> ToZettaByte<T>(this BaseQuantity<T, MegaByte> val) where T:IConvertible {
        return new Quantity<double, ZettaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-6)) * (1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert MegaByte to ExaByte
    /// </summary>
    /// <param name="val">quantity measured in MegaByte</param>
    /// <returns>quantity measured in ExaByte</returns>
    public static Quantity<double, ExaByte> ToExaByte<T>(this BaseQuantity<T, MegaByte> val) where T:IConvertible {
        return new Quantity<double, ExaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-6)) * (1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert MegaByte to PetaByte
    /// </summary>
    /// <param name="val">quantity measured in MegaByte</param>
    /// <returns>quantity measured in PetaByte</returns>
    public static Quantity<double, PetaByte> ToPetaByte<T>(this BaseQuantity<T, MegaByte> val) where T:IConvertible {
        return new Quantity<double, PetaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-6)) * (1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert MegaByte to TeraByte
    /// </summary>
    /// <param name="val">quantity measured in MegaByte</param>
    /// <returns>quantity measured in TeraByte</returns>
    public static Quantity<double, TeraByte> ToTeraByte<T>(this BaseQuantity<T, MegaByte> val) where T:IConvertible {
        return new Quantity<double, TeraByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-6)) * (1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert MegaByte to GigaByte
    /// </summary>
    /// <param name="val">quantity measured in MegaByte</param>
    /// <returns>quantity measured in GigaByte</returns>
    public static Quantity<double, GigaByte> ToGigaByte<T>(this BaseQuantity<T, MegaByte> val) where T:IConvertible {
        return new Quantity<double, GigaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-6)) * (1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert MegaByte to KiloByte
    /// </summary>
    /// <param name="val">quantity measured in MegaByte</param>
    /// <returns>quantity measured in KiloByte</returns>
    public static Quantity<double, KiloByte> ToKiloByte<T>(this BaseQuantity<T, MegaByte> val) where T:IConvertible {
        return new Quantity<double, KiloByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-6)) * (1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert MegaByte to HectoByte
    /// </summary>
    /// <param name="val">quantity measured in MegaByte</param>
    /// <returns>quantity measured in HectoByte</returns>
    public static Quantity<double, HectoByte> ToHectoByte<T>(this BaseQuantity<T, MegaByte> val) where T:IConvertible {
        return new Quantity<double, HectoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-6)) * (1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert MegaByte to DekaByte
    /// </summary>
    /// <param name="val">quantity measured in MegaByte</param>
    /// <returns>quantity measured in DekaByte</returns>
    public static Quantity<double, DekaByte> ToDekaByte<T>(this BaseQuantity<T, MegaByte> val) where T:IConvertible {
        return new Quantity<double, DekaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-6)) * (1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert MegaByte to DeciByte
    /// </summary>
    /// <param name="val">quantity measured in MegaByte</param>
    /// <returns>quantity measured in DeciByte</returns>
    public static Quantity<double, DeciByte> ToDeciByte<T>(this BaseQuantity<T, MegaByte> val) where T:IConvertible {
        return new Quantity<double, DeciByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-6)) * (1E1))
        );
    }
	/// <summary>
    /// Extension method to convert MegaByte to CentiByte
    /// </summary>
    /// <param name="val">quantity measured in MegaByte</param>
    /// <returns>quantity measured in CentiByte</returns>
    public static Quantity<double, CentiByte> ToCentiByte<T>(this BaseQuantity<T, MegaByte> val) where T:IConvertible {
        return new Quantity<double, CentiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-6)) * (1E2))
        );
    }
	/// <summary>
    /// Extension method to convert MegaByte to MilliByte
    /// </summary>
    /// <param name="val">quantity measured in MegaByte</param>
    /// <returns>quantity measured in MilliByte</returns>
    public static Quantity<double, MilliByte> ToMilliByte<T>(this BaseQuantity<T, MegaByte> val) where T:IConvertible {
        return new Quantity<double, MilliByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-6)) * (1E3))
        );
    }
	/// <summary>
    /// Extension method to convert MegaByte to MicroByte
    /// </summary>
    /// <param name="val">quantity measured in MegaByte</param>
    /// <returns>quantity measured in MicroByte</returns>
    public static Quantity<double, MicroByte> ToMicroByte<T>(this BaseQuantity<T, MegaByte> val) where T:IConvertible {
        return new Quantity<double, MicroByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-6)) * (1E6))
        );
    }
	/// <summary>
    /// Extension method to convert MegaByte to NanoByte
    /// </summary>
    /// <param name="val">quantity measured in MegaByte</param>
    /// <returns>quantity measured in NanoByte</returns>
    public static Quantity<double, NanoByte> ToNanoByte<T>(this BaseQuantity<T, MegaByte> val) where T:IConvertible {
        return new Quantity<double, NanoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-6)) * (1E9))
        );
    }
	/// <summary>
    /// Extension method to convert MegaByte to PicoByte
    /// </summary>
    /// <param name="val">quantity measured in MegaByte</param>
    /// <returns>quantity measured in PicoByte</returns>
    public static Quantity<double, PicoByte> ToPicoByte<T>(this BaseQuantity<T, MegaByte> val) where T:IConvertible {
        return new Quantity<double, PicoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-6)) * (1E12))
        );
    }
	/// <summary>
    /// Extension method to convert MegaByte to FemtoByte
    /// </summary>
    /// <param name="val">quantity measured in MegaByte</param>
    /// <returns>quantity measured in FemtoByte</returns>
    public static Quantity<double, FemtoByte> ToFemtoByte<T>(this BaseQuantity<T, MegaByte> val) where T:IConvertible {
        return new Quantity<double, FemtoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-6)) * (1E15))
        );
    }
	/// <summary>
    /// Extension method to convert MegaByte to AttoByte
    /// </summary>
    /// <param name="val">quantity measured in MegaByte</param>
    /// <returns>quantity measured in AttoByte</returns>
    public static Quantity<double, AttoByte> ToAttoByte<T>(this BaseQuantity<T, MegaByte> val) where T:IConvertible {
        return new Quantity<double, AttoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-6)) * (1E18))
        );
    }
	/// <summary>
    /// Extension method to convert MegaByte to ZeptoByte
    /// </summary>
    /// <param name="val">quantity measured in MegaByte</param>
    /// <returns>quantity measured in ZeptoByte</returns>
    public static Quantity<double, ZeptoByte> ToZeptoByte<T>(this BaseQuantity<T, MegaByte> val) where T:IConvertible {
        return new Quantity<double, ZeptoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-6)) * (1E21))
        );
    }
	/// <summary>
    /// Extension method to convert MegaByte to YoctoByte
    /// </summary>
    /// <param name="val">quantity measured in MegaByte</param>
    /// <returns>quantity measured in YoctoByte</returns>
    public static Quantity<double, YoctoByte> ToYoctoByte<T>(this BaseQuantity<T, MegaByte> val) where T:IConvertible {
        return new Quantity<double, YoctoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-6)) * (1E24))
        );
    }
	/// <summary>
    /// Extension method to convert MegaByte to YobiByte
    /// </summary>
    /// <param name="val">quantity measured in MegaByte</param>
    /// <returns>quantity measured in YobiByte</returns>
    public static Quantity<double, YobiByte> ToYobiByte<T>(this BaseQuantity<T, MegaByte> val) where T:IConvertible {
        return new Quantity<double, YobiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-6)) * (1.2089258e-24))
        );
    }
	/// <summary>
    /// Extension method to convert MegaByte to ZebiByte
    /// </summary>
    /// <param name="val">quantity measured in MegaByte</param>
    /// <returns>quantity measured in ZebiByte</returns>
    public static Quantity<double, ZebiByte> ToZebiByte<T>(this BaseQuantity<T, MegaByte> val) where T:IConvertible {
        return new Quantity<double, ZebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-6)) * (1.1805916e-21))
        );
    }
	/// <summary>
    /// Extension method to convert MegaByte to ExbiByte
    /// </summary>
    /// <param name="val">quantity measured in MegaByte</param>
    /// <returns>quantity measured in ExbiByte</returns>
    public static Quantity<double, ExbiByte> ToExbiByte<T>(this BaseQuantity<T, MegaByte> val) where T:IConvertible {
        return new Quantity<double, ExbiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-6)) * (1.1529215e-18))
        );
    }
	/// <summary>
    /// Extension method to convert MegaByte to PebiByte
    /// </summary>
    /// <param name="val">quantity measured in MegaByte</param>
    /// <returns>quantity measured in PebiByte</returns>
    public static Quantity<double, PebiByte> ToPebiByte<T>(this BaseQuantity<T, MegaByte> val) where T:IConvertible {
        return new Quantity<double, PebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-6)) * (1.1258999e-15))
        );
    }
	/// <summary>
    /// Extension method to convert MegaByte to TebiByte
    /// </summary>
    /// <param name="val">quantity measured in MegaByte</param>
    /// <returns>quantity measured in TebiByte</returns>
    public static Quantity<double, TebiByte> ToTebiByte<T>(this BaseQuantity<T, MegaByte> val) where T:IConvertible {
        return new Quantity<double, TebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-6)) * (1.0995116e-12))
        );
    }
	/// <summary>
    /// Extension method to convert MegaByte to GibiByte
    /// </summary>
    /// <param name="val">quantity measured in MegaByte</param>
    /// <returns>quantity measured in GibiByte</returns>
    public static Quantity<double, GibiByte> ToGibiByte<T>(this BaseQuantity<T, MegaByte> val) where T:IConvertible {
        return new Quantity<double, GibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-6)) * (1d/1073741824))
        );
    }
	/// <summary>
    /// Extension method to convert MegaByte to MebiByte
    /// </summary>
    /// <param name="val">quantity measured in MegaByte</param>
    /// <returns>quantity measured in MebiByte</returns>
    public static Quantity<double, MebiByte> ToMebiByte<T>(this BaseQuantity<T, MegaByte> val) where T:IConvertible {
        return new Quantity<double, MebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-6)) * (1d/1048576))
        );
    }
	/// <summary>
    /// Extension method to convert MegaByte to KibiByte
    /// </summary>
    /// <param name="val">quantity measured in MegaByte</param>
    /// <returns>quantity measured in KibiByte</returns>
    public static Quantity<double, KibiByte> ToKibiByte<T>(this BaseQuantity<T, MegaByte> val) where T:IConvertible {
        return new Quantity<double, KibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-6)) * (1d/1024))
        );
    }
	/// <summary>
    /// Extension method to convert Byte to KiloByte
    /// </summary>
    /// <param name="val">quantity measured in Byte</param>
    /// <returns>quantity measured in KiloByte</returns>
    public static Quantity<double, KiloByte> ToKiloByte<T>(this BaseQuantity<T, Byte> val) where T:IConvertible {
        return new Quantity<double, KiloByte>(
            Convert.ToDouble(val.Value) * (1E-3)
        );
    }
	/// <summary>
    /// Extension method to convert KiloByte to Byte
    /// </summary>
    /// <param name="val">quantity measured in KiloByte</param>
    /// <returns>quantity measured in Byte</returns>
    public static Quantity<double, Byte> ToByte<T>(this BaseQuantity<T, KiloByte> val) where T:IConvertible {
        return new Quantity<double, Byte>(
            Convert.ToDouble(val.Value) * (1d/(1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert KiloByte to Bit
    /// </summary>
    /// <param name="val">quantity measured in KiloByte</param>
    /// <returns>quantity measured in Bit</returns>
    public static Quantity<double, Bit> ToBit<T>(this BaseQuantity<T, KiloByte> val) where T:IConvertible {
        return new Quantity<double, Bit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-3)) * (8))
        );
    }
	/// <summary>
    /// Extension method to convert KiloByte to YottaBit
    /// </summary>
    /// <param name="val">quantity measured in KiloByte</param>
    /// <returns>quantity measured in YottaBit</returns>
    public static Quantity<double, YottaBit> ToYottaBit<T>(this BaseQuantity<T, KiloByte> val) where T:IConvertible {
        return new Quantity<double, YottaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-3)) * (8*1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert KiloByte to ZettaBit
    /// </summary>
    /// <param name="val">quantity measured in KiloByte</param>
    /// <returns>quantity measured in ZettaBit</returns>
    public static Quantity<double, ZettaBit> ToZettaBit<T>(this BaseQuantity<T, KiloByte> val) where T:IConvertible {
        return new Quantity<double, ZettaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-3)) * (8*1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert KiloByte to ExaBit
    /// </summary>
    /// <param name="val">quantity measured in KiloByte</param>
    /// <returns>quantity measured in ExaBit</returns>
    public static Quantity<double, ExaBit> ToExaBit<T>(this BaseQuantity<T, KiloByte> val) where T:IConvertible {
        return new Quantity<double, ExaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-3)) * (8*1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert KiloByte to PetaBit
    /// </summary>
    /// <param name="val">quantity measured in KiloByte</param>
    /// <returns>quantity measured in PetaBit</returns>
    public static Quantity<double, PetaBit> ToPetaBit<T>(this BaseQuantity<T, KiloByte> val) where T:IConvertible {
        return new Quantity<double, PetaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-3)) * (8*1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert KiloByte to TeraBit
    /// </summary>
    /// <param name="val">quantity measured in KiloByte</param>
    /// <returns>quantity measured in TeraBit</returns>
    public static Quantity<double, TeraBit> ToTeraBit<T>(this BaseQuantity<T, KiloByte> val) where T:IConvertible {
        return new Quantity<double, TeraBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-3)) * (8*1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert KiloByte to GigaBit
    /// </summary>
    /// <param name="val">quantity measured in KiloByte</param>
    /// <returns>quantity measured in GigaBit</returns>
    public static Quantity<double, GigaBit> ToGigaBit<T>(this BaseQuantity<T, KiloByte> val) where T:IConvertible {
        return new Quantity<double, GigaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-3)) * (8*1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert KiloByte to MegaBit
    /// </summary>
    /// <param name="val">quantity measured in KiloByte</param>
    /// <returns>quantity measured in MegaBit</returns>
    public static Quantity<double, MegaBit> ToMegaBit<T>(this BaseQuantity<T, KiloByte> val) where T:IConvertible {
        return new Quantity<double, MegaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-3)) * (8*1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert KiloByte to KiloBit
    /// </summary>
    /// <param name="val">quantity measured in KiloByte</param>
    /// <returns>quantity measured in KiloBit</returns>
    public static Quantity<double, KiloBit> ToKiloBit<T>(this BaseQuantity<T, KiloByte> val) where T:IConvertible {
        return new Quantity<double, KiloBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-3)) * (8*1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert KiloByte to HectoBit
    /// </summary>
    /// <param name="val">quantity measured in KiloByte</param>
    /// <returns>quantity measured in HectoBit</returns>
    public static Quantity<double, HectoBit> ToHectoBit<T>(this BaseQuantity<T, KiloByte> val) where T:IConvertible {
        return new Quantity<double, HectoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-3)) * (8*1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert KiloByte to DekaBit
    /// </summary>
    /// <param name="val">quantity measured in KiloByte</param>
    /// <returns>quantity measured in DekaBit</returns>
    public static Quantity<double, DekaBit> ToDekaBit<T>(this BaseQuantity<T, KiloByte> val) where T:IConvertible {
        return new Quantity<double, DekaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-3)) * (8*1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert KiloByte to DeciBit
    /// </summary>
    /// <param name="val">quantity measured in KiloByte</param>
    /// <returns>quantity measured in DeciBit</returns>
    public static Quantity<double, DeciBit> ToDeciBit<T>(this BaseQuantity<T, KiloByte> val) where T:IConvertible {
        return new Quantity<double, DeciBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-3)) * (8*1E1))
        );
    }
	/// <summary>
    /// Extension method to convert KiloByte to CentiBit
    /// </summary>
    /// <param name="val">quantity measured in KiloByte</param>
    /// <returns>quantity measured in CentiBit</returns>
    public static Quantity<double, CentiBit> ToCentiBit<T>(this BaseQuantity<T, KiloByte> val) where T:IConvertible {
        return new Quantity<double, CentiBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-3)) * (8*1E2))
        );
    }
	/// <summary>
    /// Extension method to convert KiloByte to MilliBit
    /// </summary>
    /// <param name="val">quantity measured in KiloByte</param>
    /// <returns>quantity measured in MilliBit</returns>
    public static Quantity<double, MilliBit> ToMilliBit<T>(this BaseQuantity<T, KiloByte> val) where T:IConvertible {
        return new Quantity<double, MilliBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-3)) * (8*1E3))
        );
    }
	/// <summary>
    /// Extension method to convert KiloByte to MicroBit
    /// </summary>
    /// <param name="val">quantity measured in KiloByte</param>
    /// <returns>quantity measured in MicroBit</returns>
    public static Quantity<double, MicroBit> ToMicroBit<T>(this BaseQuantity<T, KiloByte> val) where T:IConvertible {
        return new Quantity<double, MicroBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-3)) * (8*1E6))
        );
    }
	/// <summary>
    /// Extension method to convert KiloByte to NanoBit
    /// </summary>
    /// <param name="val">quantity measured in KiloByte</param>
    /// <returns>quantity measured in NanoBit</returns>
    public static Quantity<double, NanoBit> ToNanoBit<T>(this BaseQuantity<T, KiloByte> val) where T:IConvertible {
        return new Quantity<double, NanoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-3)) * (8*1E9))
        );
    }
	/// <summary>
    /// Extension method to convert KiloByte to PicoBit
    /// </summary>
    /// <param name="val">quantity measured in KiloByte</param>
    /// <returns>quantity measured in PicoBit</returns>
    public static Quantity<double, PicoBit> ToPicoBit<T>(this BaseQuantity<T, KiloByte> val) where T:IConvertible {
        return new Quantity<double, PicoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-3)) * (8*1E12))
        );
    }
	/// <summary>
    /// Extension method to convert KiloByte to FemtoBit
    /// </summary>
    /// <param name="val">quantity measured in KiloByte</param>
    /// <returns>quantity measured in FemtoBit</returns>
    public static Quantity<double, FemtoBit> ToFemtoBit<T>(this BaseQuantity<T, KiloByte> val) where T:IConvertible {
        return new Quantity<double, FemtoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-3)) * (8*1E15))
        );
    }
	/// <summary>
    /// Extension method to convert KiloByte to AttoBit
    /// </summary>
    /// <param name="val">quantity measured in KiloByte</param>
    /// <returns>quantity measured in AttoBit</returns>
    public static Quantity<double, AttoBit> ToAttoBit<T>(this BaseQuantity<T, KiloByte> val) where T:IConvertible {
        return new Quantity<double, AttoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-3)) * (8*1E18))
        );
    }
	/// <summary>
    /// Extension method to convert KiloByte to ZeptoBit
    /// </summary>
    /// <param name="val">quantity measured in KiloByte</param>
    /// <returns>quantity measured in ZeptoBit</returns>
    public static Quantity<double, ZeptoBit> ToZeptoBit<T>(this BaseQuantity<T, KiloByte> val) where T:IConvertible {
        return new Quantity<double, ZeptoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-3)) * (8*1E21))
        );
    }
	/// <summary>
    /// Extension method to convert KiloByte to YoctoBit
    /// </summary>
    /// <param name="val">quantity measured in KiloByte</param>
    /// <returns>quantity measured in YoctoBit</returns>
    public static Quantity<double, YoctoBit> ToYoctoBit<T>(this BaseQuantity<T, KiloByte> val) where T:IConvertible {
        return new Quantity<double, YoctoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-3)) * (8*1E24))
        );
    }
	/// <summary>
    /// Extension method to convert KiloByte to YottaByte
    /// </summary>
    /// <param name="val">quantity measured in KiloByte</param>
    /// <returns>quantity measured in YottaByte</returns>
    public static Quantity<double, YottaByte> ToYottaByte<T>(this BaseQuantity<T, KiloByte> val) where T:IConvertible {
        return new Quantity<double, YottaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-3)) * (1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert KiloByte to ZettaByte
    /// </summary>
    /// <param name="val">quantity measured in KiloByte</param>
    /// <returns>quantity measured in ZettaByte</returns>
    public static Quantity<double, ZettaByte> ToZettaByte<T>(this BaseQuantity<T, KiloByte> val) where T:IConvertible {
        return new Quantity<double, ZettaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-3)) * (1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert KiloByte to ExaByte
    /// </summary>
    /// <param name="val">quantity measured in KiloByte</param>
    /// <returns>quantity measured in ExaByte</returns>
    public static Quantity<double, ExaByte> ToExaByte<T>(this BaseQuantity<T, KiloByte> val) where T:IConvertible {
        return new Quantity<double, ExaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-3)) * (1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert KiloByte to PetaByte
    /// </summary>
    /// <param name="val">quantity measured in KiloByte</param>
    /// <returns>quantity measured in PetaByte</returns>
    public static Quantity<double, PetaByte> ToPetaByte<T>(this BaseQuantity<T, KiloByte> val) where T:IConvertible {
        return new Quantity<double, PetaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-3)) * (1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert KiloByte to TeraByte
    /// </summary>
    /// <param name="val">quantity measured in KiloByte</param>
    /// <returns>quantity measured in TeraByte</returns>
    public static Quantity<double, TeraByte> ToTeraByte<T>(this BaseQuantity<T, KiloByte> val) where T:IConvertible {
        return new Quantity<double, TeraByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-3)) * (1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert KiloByte to GigaByte
    /// </summary>
    /// <param name="val">quantity measured in KiloByte</param>
    /// <returns>quantity measured in GigaByte</returns>
    public static Quantity<double, GigaByte> ToGigaByte<T>(this BaseQuantity<T, KiloByte> val) where T:IConvertible {
        return new Quantity<double, GigaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-3)) * (1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert KiloByte to MegaByte
    /// </summary>
    /// <param name="val">quantity measured in KiloByte</param>
    /// <returns>quantity measured in MegaByte</returns>
    public static Quantity<double, MegaByte> ToMegaByte<T>(this BaseQuantity<T, KiloByte> val) where T:IConvertible {
        return new Quantity<double, MegaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-3)) * (1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert KiloByte to HectoByte
    /// </summary>
    /// <param name="val">quantity measured in KiloByte</param>
    /// <returns>quantity measured in HectoByte</returns>
    public static Quantity<double, HectoByte> ToHectoByte<T>(this BaseQuantity<T, KiloByte> val) where T:IConvertible {
        return new Quantity<double, HectoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-3)) * (1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert KiloByte to DekaByte
    /// </summary>
    /// <param name="val">quantity measured in KiloByte</param>
    /// <returns>quantity measured in DekaByte</returns>
    public static Quantity<double, DekaByte> ToDekaByte<T>(this BaseQuantity<T, KiloByte> val) where T:IConvertible {
        return new Quantity<double, DekaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-3)) * (1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert KiloByte to DeciByte
    /// </summary>
    /// <param name="val">quantity measured in KiloByte</param>
    /// <returns>quantity measured in DeciByte</returns>
    public static Quantity<double, DeciByte> ToDeciByte<T>(this BaseQuantity<T, KiloByte> val) where T:IConvertible {
        return new Quantity<double, DeciByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-3)) * (1E1))
        );
    }
	/// <summary>
    /// Extension method to convert KiloByte to CentiByte
    /// </summary>
    /// <param name="val">quantity measured in KiloByte</param>
    /// <returns>quantity measured in CentiByte</returns>
    public static Quantity<double, CentiByte> ToCentiByte<T>(this BaseQuantity<T, KiloByte> val) where T:IConvertible {
        return new Quantity<double, CentiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-3)) * (1E2))
        );
    }
	/// <summary>
    /// Extension method to convert KiloByte to MilliByte
    /// </summary>
    /// <param name="val">quantity measured in KiloByte</param>
    /// <returns>quantity measured in MilliByte</returns>
    public static Quantity<double, MilliByte> ToMilliByte<T>(this BaseQuantity<T, KiloByte> val) where T:IConvertible {
        return new Quantity<double, MilliByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-3)) * (1E3))
        );
    }
	/// <summary>
    /// Extension method to convert KiloByte to MicroByte
    /// </summary>
    /// <param name="val">quantity measured in KiloByte</param>
    /// <returns>quantity measured in MicroByte</returns>
    public static Quantity<double, MicroByte> ToMicroByte<T>(this BaseQuantity<T, KiloByte> val) where T:IConvertible {
        return new Quantity<double, MicroByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-3)) * (1E6))
        );
    }
	/// <summary>
    /// Extension method to convert KiloByte to NanoByte
    /// </summary>
    /// <param name="val">quantity measured in KiloByte</param>
    /// <returns>quantity measured in NanoByte</returns>
    public static Quantity<double, NanoByte> ToNanoByte<T>(this BaseQuantity<T, KiloByte> val) where T:IConvertible {
        return new Quantity<double, NanoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-3)) * (1E9))
        );
    }
	/// <summary>
    /// Extension method to convert KiloByte to PicoByte
    /// </summary>
    /// <param name="val">quantity measured in KiloByte</param>
    /// <returns>quantity measured in PicoByte</returns>
    public static Quantity<double, PicoByte> ToPicoByte<T>(this BaseQuantity<T, KiloByte> val) where T:IConvertible {
        return new Quantity<double, PicoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-3)) * (1E12))
        );
    }
	/// <summary>
    /// Extension method to convert KiloByte to FemtoByte
    /// </summary>
    /// <param name="val">quantity measured in KiloByte</param>
    /// <returns>quantity measured in FemtoByte</returns>
    public static Quantity<double, FemtoByte> ToFemtoByte<T>(this BaseQuantity<T, KiloByte> val) where T:IConvertible {
        return new Quantity<double, FemtoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-3)) * (1E15))
        );
    }
	/// <summary>
    /// Extension method to convert KiloByte to AttoByte
    /// </summary>
    /// <param name="val">quantity measured in KiloByte</param>
    /// <returns>quantity measured in AttoByte</returns>
    public static Quantity<double, AttoByte> ToAttoByte<T>(this BaseQuantity<T, KiloByte> val) where T:IConvertible {
        return new Quantity<double, AttoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-3)) * (1E18))
        );
    }
	/// <summary>
    /// Extension method to convert KiloByte to ZeptoByte
    /// </summary>
    /// <param name="val">quantity measured in KiloByte</param>
    /// <returns>quantity measured in ZeptoByte</returns>
    public static Quantity<double, ZeptoByte> ToZeptoByte<T>(this BaseQuantity<T, KiloByte> val) where T:IConvertible {
        return new Quantity<double, ZeptoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-3)) * (1E21))
        );
    }
	/// <summary>
    /// Extension method to convert KiloByte to YoctoByte
    /// </summary>
    /// <param name="val">quantity measured in KiloByte</param>
    /// <returns>quantity measured in YoctoByte</returns>
    public static Quantity<double, YoctoByte> ToYoctoByte<T>(this BaseQuantity<T, KiloByte> val) where T:IConvertible {
        return new Quantity<double, YoctoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-3)) * (1E24))
        );
    }
	/// <summary>
    /// Extension method to convert KiloByte to YobiByte
    /// </summary>
    /// <param name="val">quantity measured in KiloByte</param>
    /// <returns>quantity measured in YobiByte</returns>
    public static Quantity<double, YobiByte> ToYobiByte<T>(this BaseQuantity<T, KiloByte> val) where T:IConvertible {
        return new Quantity<double, YobiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-3)) * (1.2089258e-24))
        );
    }
	/// <summary>
    /// Extension method to convert KiloByte to ZebiByte
    /// </summary>
    /// <param name="val">quantity measured in KiloByte</param>
    /// <returns>quantity measured in ZebiByte</returns>
    public static Quantity<double, ZebiByte> ToZebiByte<T>(this BaseQuantity<T, KiloByte> val) where T:IConvertible {
        return new Quantity<double, ZebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-3)) * (1.1805916e-21))
        );
    }
	/// <summary>
    /// Extension method to convert KiloByte to ExbiByte
    /// </summary>
    /// <param name="val">quantity measured in KiloByte</param>
    /// <returns>quantity measured in ExbiByte</returns>
    public static Quantity<double, ExbiByte> ToExbiByte<T>(this BaseQuantity<T, KiloByte> val) where T:IConvertible {
        return new Quantity<double, ExbiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-3)) * (1.1529215e-18))
        );
    }
	/// <summary>
    /// Extension method to convert KiloByte to PebiByte
    /// </summary>
    /// <param name="val">quantity measured in KiloByte</param>
    /// <returns>quantity measured in PebiByte</returns>
    public static Quantity<double, PebiByte> ToPebiByte<T>(this BaseQuantity<T, KiloByte> val) where T:IConvertible {
        return new Quantity<double, PebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-3)) * (1.1258999e-15))
        );
    }
	/// <summary>
    /// Extension method to convert KiloByte to TebiByte
    /// </summary>
    /// <param name="val">quantity measured in KiloByte</param>
    /// <returns>quantity measured in TebiByte</returns>
    public static Quantity<double, TebiByte> ToTebiByte<T>(this BaseQuantity<T, KiloByte> val) where T:IConvertible {
        return new Quantity<double, TebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-3)) * (1.0995116e-12))
        );
    }
	/// <summary>
    /// Extension method to convert KiloByte to GibiByte
    /// </summary>
    /// <param name="val">quantity measured in KiloByte</param>
    /// <returns>quantity measured in GibiByte</returns>
    public static Quantity<double, GibiByte> ToGibiByte<T>(this BaseQuantity<T, KiloByte> val) where T:IConvertible {
        return new Quantity<double, GibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-3)) * (1d/1073741824))
        );
    }
	/// <summary>
    /// Extension method to convert KiloByte to MebiByte
    /// </summary>
    /// <param name="val">quantity measured in KiloByte</param>
    /// <returns>quantity measured in MebiByte</returns>
    public static Quantity<double, MebiByte> ToMebiByte<T>(this BaseQuantity<T, KiloByte> val) where T:IConvertible {
        return new Quantity<double, MebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-3)) * (1d/1048576))
        );
    }
	/// <summary>
    /// Extension method to convert KiloByte to KibiByte
    /// </summary>
    /// <param name="val">quantity measured in KiloByte</param>
    /// <returns>quantity measured in KibiByte</returns>
    public static Quantity<double, KibiByte> ToKibiByte<T>(this BaseQuantity<T, KiloByte> val) where T:IConvertible {
        return new Quantity<double, KibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-3)) * (1d/1024))
        );
    }
	/// <summary>
    /// Extension method to convert Byte to HectoByte
    /// </summary>
    /// <param name="val">quantity measured in Byte</param>
    /// <returns>quantity measured in HectoByte</returns>
    public static Quantity<double, HectoByte> ToHectoByte<T>(this BaseQuantity<T, Byte> val) where T:IConvertible {
        return new Quantity<double, HectoByte>(
            Convert.ToDouble(val.Value) * (1E-2)
        );
    }
	/// <summary>
    /// Extension method to convert HectoByte to Byte
    /// </summary>
    /// <param name="val">quantity measured in HectoByte</param>
    /// <returns>quantity measured in Byte</returns>
    public static Quantity<double, Byte> ToByte<T>(this BaseQuantity<T, HectoByte> val) where T:IConvertible {
        return new Quantity<double, Byte>(
            Convert.ToDouble(val.Value) * (1d/(1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert HectoByte to Bit
    /// </summary>
    /// <param name="val">quantity measured in HectoByte</param>
    /// <returns>quantity measured in Bit</returns>
    public static Quantity<double, Bit> ToBit<T>(this BaseQuantity<T, HectoByte> val) where T:IConvertible {
        return new Quantity<double, Bit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-2)) * (8))
        );
    }
	/// <summary>
    /// Extension method to convert HectoByte to YottaBit
    /// </summary>
    /// <param name="val">quantity measured in HectoByte</param>
    /// <returns>quantity measured in YottaBit</returns>
    public static Quantity<double, YottaBit> ToYottaBit<T>(this BaseQuantity<T, HectoByte> val) where T:IConvertible {
        return new Quantity<double, YottaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-2)) * (8*1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert HectoByte to ZettaBit
    /// </summary>
    /// <param name="val">quantity measured in HectoByte</param>
    /// <returns>quantity measured in ZettaBit</returns>
    public static Quantity<double, ZettaBit> ToZettaBit<T>(this BaseQuantity<T, HectoByte> val) where T:IConvertible {
        return new Quantity<double, ZettaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-2)) * (8*1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert HectoByte to ExaBit
    /// </summary>
    /// <param name="val">quantity measured in HectoByte</param>
    /// <returns>quantity measured in ExaBit</returns>
    public static Quantity<double, ExaBit> ToExaBit<T>(this BaseQuantity<T, HectoByte> val) where T:IConvertible {
        return new Quantity<double, ExaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-2)) * (8*1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert HectoByte to PetaBit
    /// </summary>
    /// <param name="val">quantity measured in HectoByte</param>
    /// <returns>quantity measured in PetaBit</returns>
    public static Quantity<double, PetaBit> ToPetaBit<T>(this BaseQuantity<T, HectoByte> val) where T:IConvertible {
        return new Quantity<double, PetaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-2)) * (8*1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert HectoByte to TeraBit
    /// </summary>
    /// <param name="val">quantity measured in HectoByte</param>
    /// <returns>quantity measured in TeraBit</returns>
    public static Quantity<double, TeraBit> ToTeraBit<T>(this BaseQuantity<T, HectoByte> val) where T:IConvertible {
        return new Quantity<double, TeraBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-2)) * (8*1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert HectoByte to GigaBit
    /// </summary>
    /// <param name="val">quantity measured in HectoByte</param>
    /// <returns>quantity measured in GigaBit</returns>
    public static Quantity<double, GigaBit> ToGigaBit<T>(this BaseQuantity<T, HectoByte> val) where T:IConvertible {
        return new Quantity<double, GigaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-2)) * (8*1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert HectoByte to MegaBit
    /// </summary>
    /// <param name="val">quantity measured in HectoByte</param>
    /// <returns>quantity measured in MegaBit</returns>
    public static Quantity<double, MegaBit> ToMegaBit<T>(this BaseQuantity<T, HectoByte> val) where T:IConvertible {
        return new Quantity<double, MegaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-2)) * (8*1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert HectoByte to KiloBit
    /// </summary>
    /// <param name="val">quantity measured in HectoByte</param>
    /// <returns>quantity measured in KiloBit</returns>
    public static Quantity<double, KiloBit> ToKiloBit<T>(this BaseQuantity<T, HectoByte> val) where T:IConvertible {
        return new Quantity<double, KiloBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-2)) * (8*1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert HectoByte to HectoBit
    /// </summary>
    /// <param name="val">quantity measured in HectoByte</param>
    /// <returns>quantity measured in HectoBit</returns>
    public static Quantity<double, HectoBit> ToHectoBit<T>(this BaseQuantity<T, HectoByte> val) where T:IConvertible {
        return new Quantity<double, HectoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-2)) * (8*1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert HectoByte to DekaBit
    /// </summary>
    /// <param name="val">quantity measured in HectoByte</param>
    /// <returns>quantity measured in DekaBit</returns>
    public static Quantity<double, DekaBit> ToDekaBit<T>(this BaseQuantity<T, HectoByte> val) where T:IConvertible {
        return new Quantity<double, DekaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-2)) * (8*1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert HectoByte to DeciBit
    /// </summary>
    /// <param name="val">quantity measured in HectoByte</param>
    /// <returns>quantity measured in DeciBit</returns>
    public static Quantity<double, DeciBit> ToDeciBit<T>(this BaseQuantity<T, HectoByte> val) where T:IConvertible {
        return new Quantity<double, DeciBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-2)) * (8*1E1))
        );
    }
	/// <summary>
    /// Extension method to convert HectoByte to CentiBit
    /// </summary>
    /// <param name="val">quantity measured in HectoByte</param>
    /// <returns>quantity measured in CentiBit</returns>
    public static Quantity<double, CentiBit> ToCentiBit<T>(this BaseQuantity<T, HectoByte> val) where T:IConvertible {
        return new Quantity<double, CentiBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-2)) * (8*1E2))
        );
    }
	/// <summary>
    /// Extension method to convert HectoByte to MilliBit
    /// </summary>
    /// <param name="val">quantity measured in HectoByte</param>
    /// <returns>quantity measured in MilliBit</returns>
    public static Quantity<double, MilliBit> ToMilliBit<T>(this BaseQuantity<T, HectoByte> val) where T:IConvertible {
        return new Quantity<double, MilliBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-2)) * (8*1E3))
        );
    }
	/// <summary>
    /// Extension method to convert HectoByte to MicroBit
    /// </summary>
    /// <param name="val">quantity measured in HectoByte</param>
    /// <returns>quantity measured in MicroBit</returns>
    public static Quantity<double, MicroBit> ToMicroBit<T>(this BaseQuantity<T, HectoByte> val) where T:IConvertible {
        return new Quantity<double, MicroBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-2)) * (8*1E6))
        );
    }
	/// <summary>
    /// Extension method to convert HectoByte to NanoBit
    /// </summary>
    /// <param name="val">quantity measured in HectoByte</param>
    /// <returns>quantity measured in NanoBit</returns>
    public static Quantity<double, NanoBit> ToNanoBit<T>(this BaseQuantity<T, HectoByte> val) where T:IConvertible {
        return new Quantity<double, NanoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-2)) * (8*1E9))
        );
    }
	/// <summary>
    /// Extension method to convert HectoByte to PicoBit
    /// </summary>
    /// <param name="val">quantity measured in HectoByte</param>
    /// <returns>quantity measured in PicoBit</returns>
    public static Quantity<double, PicoBit> ToPicoBit<T>(this BaseQuantity<T, HectoByte> val) where T:IConvertible {
        return new Quantity<double, PicoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-2)) * (8*1E12))
        );
    }
	/// <summary>
    /// Extension method to convert HectoByte to FemtoBit
    /// </summary>
    /// <param name="val">quantity measured in HectoByte</param>
    /// <returns>quantity measured in FemtoBit</returns>
    public static Quantity<double, FemtoBit> ToFemtoBit<T>(this BaseQuantity<T, HectoByte> val) where T:IConvertible {
        return new Quantity<double, FemtoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-2)) * (8*1E15))
        );
    }
	/// <summary>
    /// Extension method to convert HectoByte to AttoBit
    /// </summary>
    /// <param name="val">quantity measured in HectoByte</param>
    /// <returns>quantity measured in AttoBit</returns>
    public static Quantity<double, AttoBit> ToAttoBit<T>(this BaseQuantity<T, HectoByte> val) where T:IConvertible {
        return new Quantity<double, AttoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-2)) * (8*1E18))
        );
    }
	/// <summary>
    /// Extension method to convert HectoByte to ZeptoBit
    /// </summary>
    /// <param name="val">quantity measured in HectoByte</param>
    /// <returns>quantity measured in ZeptoBit</returns>
    public static Quantity<double, ZeptoBit> ToZeptoBit<T>(this BaseQuantity<T, HectoByte> val) where T:IConvertible {
        return new Quantity<double, ZeptoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-2)) * (8*1E21))
        );
    }
	/// <summary>
    /// Extension method to convert HectoByte to YoctoBit
    /// </summary>
    /// <param name="val">quantity measured in HectoByte</param>
    /// <returns>quantity measured in YoctoBit</returns>
    public static Quantity<double, YoctoBit> ToYoctoBit<T>(this BaseQuantity<T, HectoByte> val) where T:IConvertible {
        return new Quantity<double, YoctoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-2)) * (8*1E24))
        );
    }
	/// <summary>
    /// Extension method to convert HectoByte to YottaByte
    /// </summary>
    /// <param name="val">quantity measured in HectoByte</param>
    /// <returns>quantity measured in YottaByte</returns>
    public static Quantity<double, YottaByte> ToYottaByte<T>(this BaseQuantity<T, HectoByte> val) where T:IConvertible {
        return new Quantity<double, YottaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-2)) * (1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert HectoByte to ZettaByte
    /// </summary>
    /// <param name="val">quantity measured in HectoByte</param>
    /// <returns>quantity measured in ZettaByte</returns>
    public static Quantity<double, ZettaByte> ToZettaByte<T>(this BaseQuantity<T, HectoByte> val) where T:IConvertible {
        return new Quantity<double, ZettaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-2)) * (1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert HectoByte to ExaByte
    /// </summary>
    /// <param name="val">quantity measured in HectoByte</param>
    /// <returns>quantity measured in ExaByte</returns>
    public static Quantity<double, ExaByte> ToExaByte<T>(this BaseQuantity<T, HectoByte> val) where T:IConvertible {
        return new Quantity<double, ExaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-2)) * (1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert HectoByte to PetaByte
    /// </summary>
    /// <param name="val">quantity measured in HectoByte</param>
    /// <returns>quantity measured in PetaByte</returns>
    public static Quantity<double, PetaByte> ToPetaByte<T>(this BaseQuantity<T, HectoByte> val) where T:IConvertible {
        return new Quantity<double, PetaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-2)) * (1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert HectoByte to TeraByte
    /// </summary>
    /// <param name="val">quantity measured in HectoByte</param>
    /// <returns>quantity measured in TeraByte</returns>
    public static Quantity<double, TeraByte> ToTeraByte<T>(this BaseQuantity<T, HectoByte> val) where T:IConvertible {
        return new Quantity<double, TeraByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-2)) * (1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert HectoByte to GigaByte
    /// </summary>
    /// <param name="val">quantity measured in HectoByte</param>
    /// <returns>quantity measured in GigaByte</returns>
    public static Quantity<double, GigaByte> ToGigaByte<T>(this BaseQuantity<T, HectoByte> val) where T:IConvertible {
        return new Quantity<double, GigaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-2)) * (1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert HectoByte to MegaByte
    /// </summary>
    /// <param name="val">quantity measured in HectoByte</param>
    /// <returns>quantity measured in MegaByte</returns>
    public static Quantity<double, MegaByte> ToMegaByte<T>(this BaseQuantity<T, HectoByte> val) where T:IConvertible {
        return new Quantity<double, MegaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-2)) * (1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert HectoByte to KiloByte
    /// </summary>
    /// <param name="val">quantity measured in HectoByte</param>
    /// <returns>quantity measured in KiloByte</returns>
    public static Quantity<double, KiloByte> ToKiloByte<T>(this BaseQuantity<T, HectoByte> val) where T:IConvertible {
        return new Quantity<double, KiloByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-2)) * (1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert HectoByte to DekaByte
    /// </summary>
    /// <param name="val">quantity measured in HectoByte</param>
    /// <returns>quantity measured in DekaByte</returns>
    public static Quantity<double, DekaByte> ToDekaByte<T>(this BaseQuantity<T, HectoByte> val) where T:IConvertible {
        return new Quantity<double, DekaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-2)) * (1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert HectoByte to DeciByte
    /// </summary>
    /// <param name="val">quantity measured in HectoByte</param>
    /// <returns>quantity measured in DeciByte</returns>
    public static Quantity<double, DeciByte> ToDeciByte<T>(this BaseQuantity<T, HectoByte> val) where T:IConvertible {
        return new Quantity<double, DeciByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-2)) * (1E1))
        );
    }
	/// <summary>
    /// Extension method to convert HectoByte to CentiByte
    /// </summary>
    /// <param name="val">quantity measured in HectoByte</param>
    /// <returns>quantity measured in CentiByte</returns>
    public static Quantity<double, CentiByte> ToCentiByte<T>(this BaseQuantity<T, HectoByte> val) where T:IConvertible {
        return new Quantity<double, CentiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-2)) * (1E2))
        );
    }
	/// <summary>
    /// Extension method to convert HectoByte to MilliByte
    /// </summary>
    /// <param name="val">quantity measured in HectoByte</param>
    /// <returns>quantity measured in MilliByte</returns>
    public static Quantity<double, MilliByte> ToMilliByte<T>(this BaseQuantity<T, HectoByte> val) where T:IConvertible {
        return new Quantity<double, MilliByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-2)) * (1E3))
        );
    }
	/// <summary>
    /// Extension method to convert HectoByte to MicroByte
    /// </summary>
    /// <param name="val">quantity measured in HectoByte</param>
    /// <returns>quantity measured in MicroByte</returns>
    public static Quantity<double, MicroByte> ToMicroByte<T>(this BaseQuantity<T, HectoByte> val) where T:IConvertible {
        return new Quantity<double, MicroByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-2)) * (1E6))
        );
    }
	/// <summary>
    /// Extension method to convert HectoByte to NanoByte
    /// </summary>
    /// <param name="val">quantity measured in HectoByte</param>
    /// <returns>quantity measured in NanoByte</returns>
    public static Quantity<double, NanoByte> ToNanoByte<T>(this BaseQuantity<T, HectoByte> val) where T:IConvertible {
        return new Quantity<double, NanoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-2)) * (1E9))
        );
    }
	/// <summary>
    /// Extension method to convert HectoByte to PicoByte
    /// </summary>
    /// <param name="val">quantity measured in HectoByte</param>
    /// <returns>quantity measured in PicoByte</returns>
    public static Quantity<double, PicoByte> ToPicoByte<T>(this BaseQuantity<T, HectoByte> val) where T:IConvertible {
        return new Quantity<double, PicoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-2)) * (1E12))
        );
    }
	/// <summary>
    /// Extension method to convert HectoByte to FemtoByte
    /// </summary>
    /// <param name="val">quantity measured in HectoByte</param>
    /// <returns>quantity measured in FemtoByte</returns>
    public static Quantity<double, FemtoByte> ToFemtoByte<T>(this BaseQuantity<T, HectoByte> val) where T:IConvertible {
        return new Quantity<double, FemtoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-2)) * (1E15))
        );
    }
	/// <summary>
    /// Extension method to convert HectoByte to AttoByte
    /// </summary>
    /// <param name="val">quantity measured in HectoByte</param>
    /// <returns>quantity measured in AttoByte</returns>
    public static Quantity<double, AttoByte> ToAttoByte<T>(this BaseQuantity<T, HectoByte> val) where T:IConvertible {
        return new Quantity<double, AttoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-2)) * (1E18))
        );
    }
	/// <summary>
    /// Extension method to convert HectoByte to ZeptoByte
    /// </summary>
    /// <param name="val">quantity measured in HectoByte</param>
    /// <returns>quantity measured in ZeptoByte</returns>
    public static Quantity<double, ZeptoByte> ToZeptoByte<T>(this BaseQuantity<T, HectoByte> val) where T:IConvertible {
        return new Quantity<double, ZeptoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-2)) * (1E21))
        );
    }
	/// <summary>
    /// Extension method to convert HectoByte to YoctoByte
    /// </summary>
    /// <param name="val">quantity measured in HectoByte</param>
    /// <returns>quantity measured in YoctoByte</returns>
    public static Quantity<double, YoctoByte> ToYoctoByte<T>(this BaseQuantity<T, HectoByte> val) where T:IConvertible {
        return new Quantity<double, YoctoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-2)) * (1E24))
        );
    }
	/// <summary>
    /// Extension method to convert HectoByte to YobiByte
    /// </summary>
    /// <param name="val">quantity measured in HectoByte</param>
    /// <returns>quantity measured in YobiByte</returns>
    public static Quantity<double, YobiByte> ToYobiByte<T>(this BaseQuantity<T, HectoByte> val) where T:IConvertible {
        return new Quantity<double, YobiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-2)) * (1.2089258e-24))
        );
    }
	/// <summary>
    /// Extension method to convert HectoByte to ZebiByte
    /// </summary>
    /// <param name="val">quantity measured in HectoByte</param>
    /// <returns>quantity measured in ZebiByte</returns>
    public static Quantity<double, ZebiByte> ToZebiByte<T>(this BaseQuantity<T, HectoByte> val) where T:IConvertible {
        return new Quantity<double, ZebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-2)) * (1.1805916e-21))
        );
    }
	/// <summary>
    /// Extension method to convert HectoByte to ExbiByte
    /// </summary>
    /// <param name="val">quantity measured in HectoByte</param>
    /// <returns>quantity measured in ExbiByte</returns>
    public static Quantity<double, ExbiByte> ToExbiByte<T>(this BaseQuantity<T, HectoByte> val) where T:IConvertible {
        return new Quantity<double, ExbiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-2)) * (1.1529215e-18))
        );
    }
	/// <summary>
    /// Extension method to convert HectoByte to PebiByte
    /// </summary>
    /// <param name="val">quantity measured in HectoByte</param>
    /// <returns>quantity measured in PebiByte</returns>
    public static Quantity<double, PebiByte> ToPebiByte<T>(this BaseQuantity<T, HectoByte> val) where T:IConvertible {
        return new Quantity<double, PebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-2)) * (1.1258999e-15))
        );
    }
	/// <summary>
    /// Extension method to convert HectoByte to TebiByte
    /// </summary>
    /// <param name="val">quantity measured in HectoByte</param>
    /// <returns>quantity measured in TebiByte</returns>
    public static Quantity<double, TebiByte> ToTebiByte<T>(this BaseQuantity<T, HectoByte> val) where T:IConvertible {
        return new Quantity<double, TebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-2)) * (1.0995116e-12))
        );
    }
	/// <summary>
    /// Extension method to convert HectoByte to GibiByte
    /// </summary>
    /// <param name="val">quantity measured in HectoByte</param>
    /// <returns>quantity measured in GibiByte</returns>
    public static Quantity<double, GibiByte> ToGibiByte<T>(this BaseQuantity<T, HectoByte> val) where T:IConvertible {
        return new Quantity<double, GibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-2)) * (1d/1073741824))
        );
    }
	/// <summary>
    /// Extension method to convert HectoByte to MebiByte
    /// </summary>
    /// <param name="val">quantity measured in HectoByte</param>
    /// <returns>quantity measured in MebiByte</returns>
    public static Quantity<double, MebiByte> ToMebiByte<T>(this BaseQuantity<T, HectoByte> val) where T:IConvertible {
        return new Quantity<double, MebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-2)) * (1d/1048576))
        );
    }
	/// <summary>
    /// Extension method to convert HectoByte to KibiByte
    /// </summary>
    /// <param name="val">quantity measured in HectoByte</param>
    /// <returns>quantity measured in KibiByte</returns>
    public static Quantity<double, KibiByte> ToKibiByte<T>(this BaseQuantity<T, HectoByte> val) where T:IConvertible {
        return new Quantity<double, KibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-2)) * (1d/1024))
        );
    }
	/// <summary>
    /// Extension method to convert Byte to DekaByte
    /// </summary>
    /// <param name="val">quantity measured in Byte</param>
    /// <returns>quantity measured in DekaByte</returns>
    public static Quantity<double, DekaByte> ToDekaByte<T>(this BaseQuantity<T, Byte> val) where T:IConvertible {
        return new Quantity<double, DekaByte>(
            Convert.ToDouble(val.Value) * (1E-1)
        );
    }
	/// <summary>
    /// Extension method to convert DekaByte to Byte
    /// </summary>
    /// <param name="val">quantity measured in DekaByte</param>
    /// <returns>quantity measured in Byte</returns>
    public static Quantity<double, Byte> ToByte<T>(this BaseQuantity<T, DekaByte> val) where T:IConvertible {
        return new Quantity<double, Byte>(
            Convert.ToDouble(val.Value) * (1d/(1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert DekaByte to Bit
    /// </summary>
    /// <param name="val">quantity measured in DekaByte</param>
    /// <returns>quantity measured in Bit</returns>
    public static Quantity<double, Bit> ToBit<T>(this BaseQuantity<T, DekaByte> val) where T:IConvertible {
        return new Quantity<double, Bit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-1)) * (8))
        );
    }
	/// <summary>
    /// Extension method to convert DekaByte to YottaBit
    /// </summary>
    /// <param name="val">quantity measured in DekaByte</param>
    /// <returns>quantity measured in YottaBit</returns>
    public static Quantity<double, YottaBit> ToYottaBit<T>(this BaseQuantity<T, DekaByte> val) where T:IConvertible {
        return new Quantity<double, YottaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-1)) * (8*1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert DekaByte to ZettaBit
    /// </summary>
    /// <param name="val">quantity measured in DekaByte</param>
    /// <returns>quantity measured in ZettaBit</returns>
    public static Quantity<double, ZettaBit> ToZettaBit<T>(this BaseQuantity<T, DekaByte> val) where T:IConvertible {
        return new Quantity<double, ZettaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-1)) * (8*1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert DekaByte to ExaBit
    /// </summary>
    /// <param name="val">quantity measured in DekaByte</param>
    /// <returns>quantity measured in ExaBit</returns>
    public static Quantity<double, ExaBit> ToExaBit<T>(this BaseQuantity<T, DekaByte> val) where T:IConvertible {
        return new Quantity<double, ExaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-1)) * (8*1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert DekaByte to PetaBit
    /// </summary>
    /// <param name="val">quantity measured in DekaByte</param>
    /// <returns>quantity measured in PetaBit</returns>
    public static Quantity<double, PetaBit> ToPetaBit<T>(this BaseQuantity<T, DekaByte> val) where T:IConvertible {
        return new Quantity<double, PetaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-1)) * (8*1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert DekaByte to TeraBit
    /// </summary>
    /// <param name="val">quantity measured in DekaByte</param>
    /// <returns>quantity measured in TeraBit</returns>
    public static Quantity<double, TeraBit> ToTeraBit<T>(this BaseQuantity<T, DekaByte> val) where T:IConvertible {
        return new Quantity<double, TeraBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-1)) * (8*1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert DekaByte to GigaBit
    /// </summary>
    /// <param name="val">quantity measured in DekaByte</param>
    /// <returns>quantity measured in GigaBit</returns>
    public static Quantity<double, GigaBit> ToGigaBit<T>(this BaseQuantity<T, DekaByte> val) where T:IConvertible {
        return new Quantity<double, GigaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-1)) * (8*1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert DekaByte to MegaBit
    /// </summary>
    /// <param name="val">quantity measured in DekaByte</param>
    /// <returns>quantity measured in MegaBit</returns>
    public static Quantity<double, MegaBit> ToMegaBit<T>(this BaseQuantity<T, DekaByte> val) where T:IConvertible {
        return new Quantity<double, MegaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-1)) * (8*1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert DekaByte to KiloBit
    /// </summary>
    /// <param name="val">quantity measured in DekaByte</param>
    /// <returns>quantity measured in KiloBit</returns>
    public static Quantity<double, KiloBit> ToKiloBit<T>(this BaseQuantity<T, DekaByte> val) where T:IConvertible {
        return new Quantity<double, KiloBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-1)) * (8*1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert DekaByte to HectoBit
    /// </summary>
    /// <param name="val">quantity measured in DekaByte</param>
    /// <returns>quantity measured in HectoBit</returns>
    public static Quantity<double, HectoBit> ToHectoBit<T>(this BaseQuantity<T, DekaByte> val) where T:IConvertible {
        return new Quantity<double, HectoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-1)) * (8*1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert DekaByte to DekaBit
    /// </summary>
    /// <param name="val">quantity measured in DekaByte</param>
    /// <returns>quantity measured in DekaBit</returns>
    public static Quantity<double, DekaBit> ToDekaBit<T>(this BaseQuantity<T, DekaByte> val) where T:IConvertible {
        return new Quantity<double, DekaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-1)) * (8*1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert DekaByte to DeciBit
    /// </summary>
    /// <param name="val">quantity measured in DekaByte</param>
    /// <returns>quantity measured in DeciBit</returns>
    public static Quantity<double, DeciBit> ToDeciBit<T>(this BaseQuantity<T, DekaByte> val) where T:IConvertible {
        return new Quantity<double, DeciBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-1)) * (8*1E1))
        );
    }
	/// <summary>
    /// Extension method to convert DekaByte to CentiBit
    /// </summary>
    /// <param name="val">quantity measured in DekaByte</param>
    /// <returns>quantity measured in CentiBit</returns>
    public static Quantity<double, CentiBit> ToCentiBit<T>(this BaseQuantity<T, DekaByte> val) where T:IConvertible {
        return new Quantity<double, CentiBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-1)) * (8*1E2))
        );
    }
	/// <summary>
    /// Extension method to convert DekaByte to MilliBit
    /// </summary>
    /// <param name="val">quantity measured in DekaByte</param>
    /// <returns>quantity measured in MilliBit</returns>
    public static Quantity<double, MilliBit> ToMilliBit<T>(this BaseQuantity<T, DekaByte> val) where T:IConvertible {
        return new Quantity<double, MilliBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-1)) * (8*1E3))
        );
    }
	/// <summary>
    /// Extension method to convert DekaByte to MicroBit
    /// </summary>
    /// <param name="val">quantity measured in DekaByte</param>
    /// <returns>quantity measured in MicroBit</returns>
    public static Quantity<double, MicroBit> ToMicroBit<T>(this BaseQuantity<T, DekaByte> val) where T:IConvertible {
        return new Quantity<double, MicroBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-1)) * (8*1E6))
        );
    }
	/// <summary>
    /// Extension method to convert DekaByte to NanoBit
    /// </summary>
    /// <param name="val">quantity measured in DekaByte</param>
    /// <returns>quantity measured in NanoBit</returns>
    public static Quantity<double, NanoBit> ToNanoBit<T>(this BaseQuantity<T, DekaByte> val) where T:IConvertible {
        return new Quantity<double, NanoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-1)) * (8*1E9))
        );
    }
	/// <summary>
    /// Extension method to convert DekaByte to PicoBit
    /// </summary>
    /// <param name="val">quantity measured in DekaByte</param>
    /// <returns>quantity measured in PicoBit</returns>
    public static Quantity<double, PicoBit> ToPicoBit<T>(this BaseQuantity<T, DekaByte> val) where T:IConvertible {
        return new Quantity<double, PicoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-1)) * (8*1E12))
        );
    }
	/// <summary>
    /// Extension method to convert DekaByte to FemtoBit
    /// </summary>
    /// <param name="val">quantity measured in DekaByte</param>
    /// <returns>quantity measured in FemtoBit</returns>
    public static Quantity<double, FemtoBit> ToFemtoBit<T>(this BaseQuantity<T, DekaByte> val) where T:IConvertible {
        return new Quantity<double, FemtoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-1)) * (8*1E15))
        );
    }
	/// <summary>
    /// Extension method to convert DekaByte to AttoBit
    /// </summary>
    /// <param name="val">quantity measured in DekaByte</param>
    /// <returns>quantity measured in AttoBit</returns>
    public static Quantity<double, AttoBit> ToAttoBit<T>(this BaseQuantity<T, DekaByte> val) where T:IConvertible {
        return new Quantity<double, AttoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-1)) * (8*1E18))
        );
    }
	/// <summary>
    /// Extension method to convert DekaByte to ZeptoBit
    /// </summary>
    /// <param name="val">quantity measured in DekaByte</param>
    /// <returns>quantity measured in ZeptoBit</returns>
    public static Quantity<double, ZeptoBit> ToZeptoBit<T>(this BaseQuantity<T, DekaByte> val) where T:IConvertible {
        return new Quantity<double, ZeptoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-1)) * (8*1E21))
        );
    }
	/// <summary>
    /// Extension method to convert DekaByte to YoctoBit
    /// </summary>
    /// <param name="val">quantity measured in DekaByte</param>
    /// <returns>quantity measured in YoctoBit</returns>
    public static Quantity<double, YoctoBit> ToYoctoBit<T>(this BaseQuantity<T, DekaByte> val) where T:IConvertible {
        return new Quantity<double, YoctoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E-1)) * (8*1E24))
        );
    }
	/// <summary>
    /// Extension method to convert DekaByte to YottaByte
    /// </summary>
    /// <param name="val">quantity measured in DekaByte</param>
    /// <returns>quantity measured in YottaByte</returns>
    public static Quantity<double, YottaByte> ToYottaByte<T>(this BaseQuantity<T, DekaByte> val) where T:IConvertible {
        return new Quantity<double, YottaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-1)) * (1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert DekaByte to ZettaByte
    /// </summary>
    /// <param name="val">quantity measured in DekaByte</param>
    /// <returns>quantity measured in ZettaByte</returns>
    public static Quantity<double, ZettaByte> ToZettaByte<T>(this BaseQuantity<T, DekaByte> val) where T:IConvertible {
        return new Quantity<double, ZettaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-1)) * (1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert DekaByte to ExaByte
    /// </summary>
    /// <param name="val">quantity measured in DekaByte</param>
    /// <returns>quantity measured in ExaByte</returns>
    public static Quantity<double, ExaByte> ToExaByte<T>(this BaseQuantity<T, DekaByte> val) where T:IConvertible {
        return new Quantity<double, ExaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-1)) * (1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert DekaByte to PetaByte
    /// </summary>
    /// <param name="val">quantity measured in DekaByte</param>
    /// <returns>quantity measured in PetaByte</returns>
    public static Quantity<double, PetaByte> ToPetaByte<T>(this BaseQuantity<T, DekaByte> val) where T:IConvertible {
        return new Quantity<double, PetaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-1)) * (1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert DekaByte to TeraByte
    /// </summary>
    /// <param name="val">quantity measured in DekaByte</param>
    /// <returns>quantity measured in TeraByte</returns>
    public static Quantity<double, TeraByte> ToTeraByte<T>(this BaseQuantity<T, DekaByte> val) where T:IConvertible {
        return new Quantity<double, TeraByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-1)) * (1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert DekaByte to GigaByte
    /// </summary>
    /// <param name="val">quantity measured in DekaByte</param>
    /// <returns>quantity measured in GigaByte</returns>
    public static Quantity<double, GigaByte> ToGigaByte<T>(this BaseQuantity<T, DekaByte> val) where T:IConvertible {
        return new Quantity<double, GigaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-1)) * (1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert DekaByte to MegaByte
    /// </summary>
    /// <param name="val">quantity measured in DekaByte</param>
    /// <returns>quantity measured in MegaByte</returns>
    public static Quantity<double, MegaByte> ToMegaByte<T>(this BaseQuantity<T, DekaByte> val) where T:IConvertible {
        return new Quantity<double, MegaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-1)) * (1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert DekaByte to KiloByte
    /// </summary>
    /// <param name="val">quantity measured in DekaByte</param>
    /// <returns>quantity measured in KiloByte</returns>
    public static Quantity<double, KiloByte> ToKiloByte<T>(this BaseQuantity<T, DekaByte> val) where T:IConvertible {
        return new Quantity<double, KiloByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-1)) * (1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert DekaByte to HectoByte
    /// </summary>
    /// <param name="val">quantity measured in DekaByte</param>
    /// <returns>quantity measured in HectoByte</returns>
    public static Quantity<double, HectoByte> ToHectoByte<T>(this BaseQuantity<T, DekaByte> val) where T:IConvertible {
        return new Quantity<double, HectoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-1)) * (1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert DekaByte to DeciByte
    /// </summary>
    /// <param name="val">quantity measured in DekaByte</param>
    /// <returns>quantity measured in DeciByte</returns>
    public static Quantity<double, DeciByte> ToDeciByte<T>(this BaseQuantity<T, DekaByte> val) where T:IConvertible {
        return new Quantity<double, DeciByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-1)) * (1E1))
        );
    }
	/// <summary>
    /// Extension method to convert DekaByte to CentiByte
    /// </summary>
    /// <param name="val">quantity measured in DekaByte</param>
    /// <returns>quantity measured in CentiByte</returns>
    public static Quantity<double, CentiByte> ToCentiByte<T>(this BaseQuantity<T, DekaByte> val) where T:IConvertible {
        return new Quantity<double, CentiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-1)) * (1E2))
        );
    }
	/// <summary>
    /// Extension method to convert DekaByte to MilliByte
    /// </summary>
    /// <param name="val">quantity measured in DekaByte</param>
    /// <returns>quantity measured in MilliByte</returns>
    public static Quantity<double, MilliByte> ToMilliByte<T>(this BaseQuantity<T, DekaByte> val) where T:IConvertible {
        return new Quantity<double, MilliByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-1)) * (1E3))
        );
    }
	/// <summary>
    /// Extension method to convert DekaByte to MicroByte
    /// </summary>
    /// <param name="val">quantity measured in DekaByte</param>
    /// <returns>quantity measured in MicroByte</returns>
    public static Quantity<double, MicroByte> ToMicroByte<T>(this BaseQuantity<T, DekaByte> val) where T:IConvertible {
        return new Quantity<double, MicroByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-1)) * (1E6))
        );
    }
	/// <summary>
    /// Extension method to convert DekaByte to NanoByte
    /// </summary>
    /// <param name="val">quantity measured in DekaByte</param>
    /// <returns>quantity measured in NanoByte</returns>
    public static Quantity<double, NanoByte> ToNanoByte<T>(this BaseQuantity<T, DekaByte> val) where T:IConvertible {
        return new Quantity<double, NanoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-1)) * (1E9))
        );
    }
	/// <summary>
    /// Extension method to convert DekaByte to PicoByte
    /// </summary>
    /// <param name="val">quantity measured in DekaByte</param>
    /// <returns>quantity measured in PicoByte</returns>
    public static Quantity<double, PicoByte> ToPicoByte<T>(this BaseQuantity<T, DekaByte> val) where T:IConvertible {
        return new Quantity<double, PicoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-1)) * (1E12))
        );
    }
	/// <summary>
    /// Extension method to convert DekaByte to FemtoByte
    /// </summary>
    /// <param name="val">quantity measured in DekaByte</param>
    /// <returns>quantity measured in FemtoByte</returns>
    public static Quantity<double, FemtoByte> ToFemtoByte<T>(this BaseQuantity<T, DekaByte> val) where T:IConvertible {
        return new Quantity<double, FemtoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-1)) * (1E15))
        );
    }
	/// <summary>
    /// Extension method to convert DekaByte to AttoByte
    /// </summary>
    /// <param name="val">quantity measured in DekaByte</param>
    /// <returns>quantity measured in AttoByte</returns>
    public static Quantity<double, AttoByte> ToAttoByte<T>(this BaseQuantity<T, DekaByte> val) where T:IConvertible {
        return new Quantity<double, AttoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-1)) * (1E18))
        );
    }
	/// <summary>
    /// Extension method to convert DekaByte to ZeptoByte
    /// </summary>
    /// <param name="val">quantity measured in DekaByte</param>
    /// <returns>quantity measured in ZeptoByte</returns>
    public static Quantity<double, ZeptoByte> ToZeptoByte<T>(this BaseQuantity<T, DekaByte> val) where T:IConvertible {
        return new Quantity<double, ZeptoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-1)) * (1E21))
        );
    }
	/// <summary>
    /// Extension method to convert DekaByte to YoctoByte
    /// </summary>
    /// <param name="val">quantity measured in DekaByte</param>
    /// <returns>quantity measured in YoctoByte</returns>
    public static Quantity<double, YoctoByte> ToYoctoByte<T>(this BaseQuantity<T, DekaByte> val) where T:IConvertible {
        return new Quantity<double, YoctoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-1)) * (1E24))
        );
    }
	/// <summary>
    /// Extension method to convert DekaByte to YobiByte
    /// </summary>
    /// <param name="val">quantity measured in DekaByte</param>
    /// <returns>quantity measured in YobiByte</returns>
    public static Quantity<double, YobiByte> ToYobiByte<T>(this BaseQuantity<T, DekaByte> val) where T:IConvertible {
        return new Quantity<double, YobiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-1)) * (1.2089258e-24))
        );
    }
	/// <summary>
    /// Extension method to convert DekaByte to ZebiByte
    /// </summary>
    /// <param name="val">quantity measured in DekaByte</param>
    /// <returns>quantity measured in ZebiByte</returns>
    public static Quantity<double, ZebiByte> ToZebiByte<T>(this BaseQuantity<T, DekaByte> val) where T:IConvertible {
        return new Quantity<double, ZebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-1)) * (1.1805916e-21))
        );
    }
	/// <summary>
    /// Extension method to convert DekaByte to ExbiByte
    /// </summary>
    /// <param name="val">quantity measured in DekaByte</param>
    /// <returns>quantity measured in ExbiByte</returns>
    public static Quantity<double, ExbiByte> ToExbiByte<T>(this BaseQuantity<T, DekaByte> val) where T:IConvertible {
        return new Quantity<double, ExbiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-1)) * (1.1529215e-18))
        );
    }
	/// <summary>
    /// Extension method to convert DekaByte to PebiByte
    /// </summary>
    /// <param name="val">quantity measured in DekaByte</param>
    /// <returns>quantity measured in PebiByte</returns>
    public static Quantity<double, PebiByte> ToPebiByte<T>(this BaseQuantity<T, DekaByte> val) where T:IConvertible {
        return new Quantity<double, PebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-1)) * (1.1258999e-15))
        );
    }
	/// <summary>
    /// Extension method to convert DekaByte to TebiByte
    /// </summary>
    /// <param name="val">quantity measured in DekaByte</param>
    /// <returns>quantity measured in TebiByte</returns>
    public static Quantity<double, TebiByte> ToTebiByte<T>(this BaseQuantity<T, DekaByte> val) where T:IConvertible {
        return new Quantity<double, TebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-1)) * (1.0995116e-12))
        );
    }
	/// <summary>
    /// Extension method to convert DekaByte to GibiByte
    /// </summary>
    /// <param name="val">quantity measured in DekaByte</param>
    /// <returns>quantity measured in GibiByte</returns>
    public static Quantity<double, GibiByte> ToGibiByte<T>(this BaseQuantity<T, DekaByte> val) where T:IConvertible {
        return new Quantity<double, GibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-1)) * (1d/1073741824))
        );
    }
	/// <summary>
    /// Extension method to convert DekaByte to MebiByte
    /// </summary>
    /// <param name="val">quantity measured in DekaByte</param>
    /// <returns>quantity measured in MebiByte</returns>
    public static Quantity<double, MebiByte> ToMebiByte<T>(this BaseQuantity<T, DekaByte> val) where T:IConvertible {
        return new Quantity<double, MebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-1)) * (1d/1048576))
        );
    }
	/// <summary>
    /// Extension method to convert DekaByte to KibiByte
    /// </summary>
    /// <param name="val">quantity measured in DekaByte</param>
    /// <returns>quantity measured in KibiByte</returns>
    public static Quantity<double, KibiByte> ToKibiByte<T>(this BaseQuantity<T, DekaByte> val) where T:IConvertible {
        return new Quantity<double, KibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E-1)) * (1d/1024))
        );
    }
	/// <summary>
    /// Extension method to convert Byte to DeciByte
    /// </summary>
    /// <param name="val">quantity measured in Byte</param>
    /// <returns>quantity measured in DeciByte</returns>
    public static Quantity<double, DeciByte> ToDeciByte<T>(this BaseQuantity<T, Byte> val) where T:IConvertible {
        return new Quantity<double, DeciByte>(
            Convert.ToDouble(val.Value) * (1E1)
        );
    }
	/// <summary>
    /// Extension method to convert DeciByte to Byte
    /// </summary>
    /// <param name="val">quantity measured in DeciByte</param>
    /// <returns>quantity measured in Byte</returns>
    public static Quantity<double, Byte> ToByte<T>(this BaseQuantity<T, DeciByte> val) where T:IConvertible {
        return new Quantity<double, Byte>(
            Convert.ToDouble(val.Value) * (1d/(1E1))
        );
    }
	/// <summary>
    /// Extension method to convert DeciByte to Bit
    /// </summary>
    /// <param name="val">quantity measured in DeciByte</param>
    /// <returns>quantity measured in Bit</returns>
    public static Quantity<double, Bit> ToBit<T>(this BaseQuantity<T, DeciByte> val) where T:IConvertible {
        return new Quantity<double, Bit>(
            Convert.ToDouble(val.Value) * ((1d/(1E1)) * (8))
        );
    }
	/// <summary>
    /// Extension method to convert DeciByte to YottaBit
    /// </summary>
    /// <param name="val">quantity measured in DeciByte</param>
    /// <returns>quantity measured in YottaBit</returns>
    public static Quantity<double, YottaBit> ToYottaBit<T>(this BaseQuantity<T, DeciByte> val) where T:IConvertible {
        return new Quantity<double, YottaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E1)) * (8*1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert DeciByte to ZettaBit
    /// </summary>
    /// <param name="val">quantity measured in DeciByte</param>
    /// <returns>quantity measured in ZettaBit</returns>
    public static Quantity<double, ZettaBit> ToZettaBit<T>(this BaseQuantity<T, DeciByte> val) where T:IConvertible {
        return new Quantity<double, ZettaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E1)) * (8*1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert DeciByte to ExaBit
    /// </summary>
    /// <param name="val">quantity measured in DeciByte</param>
    /// <returns>quantity measured in ExaBit</returns>
    public static Quantity<double, ExaBit> ToExaBit<T>(this BaseQuantity<T, DeciByte> val) where T:IConvertible {
        return new Quantity<double, ExaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E1)) * (8*1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert DeciByte to PetaBit
    /// </summary>
    /// <param name="val">quantity measured in DeciByte</param>
    /// <returns>quantity measured in PetaBit</returns>
    public static Quantity<double, PetaBit> ToPetaBit<T>(this BaseQuantity<T, DeciByte> val) where T:IConvertible {
        return new Quantity<double, PetaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E1)) * (8*1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert DeciByte to TeraBit
    /// </summary>
    /// <param name="val">quantity measured in DeciByte</param>
    /// <returns>quantity measured in TeraBit</returns>
    public static Quantity<double, TeraBit> ToTeraBit<T>(this BaseQuantity<T, DeciByte> val) where T:IConvertible {
        return new Quantity<double, TeraBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E1)) * (8*1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert DeciByte to GigaBit
    /// </summary>
    /// <param name="val">quantity measured in DeciByte</param>
    /// <returns>quantity measured in GigaBit</returns>
    public static Quantity<double, GigaBit> ToGigaBit<T>(this BaseQuantity<T, DeciByte> val) where T:IConvertible {
        return new Quantity<double, GigaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E1)) * (8*1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert DeciByte to MegaBit
    /// </summary>
    /// <param name="val">quantity measured in DeciByte</param>
    /// <returns>quantity measured in MegaBit</returns>
    public static Quantity<double, MegaBit> ToMegaBit<T>(this BaseQuantity<T, DeciByte> val) where T:IConvertible {
        return new Quantity<double, MegaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E1)) * (8*1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert DeciByte to KiloBit
    /// </summary>
    /// <param name="val">quantity measured in DeciByte</param>
    /// <returns>quantity measured in KiloBit</returns>
    public static Quantity<double, KiloBit> ToKiloBit<T>(this BaseQuantity<T, DeciByte> val) where T:IConvertible {
        return new Quantity<double, KiloBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E1)) * (8*1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert DeciByte to HectoBit
    /// </summary>
    /// <param name="val">quantity measured in DeciByte</param>
    /// <returns>quantity measured in HectoBit</returns>
    public static Quantity<double, HectoBit> ToHectoBit<T>(this BaseQuantity<T, DeciByte> val) where T:IConvertible {
        return new Quantity<double, HectoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E1)) * (8*1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert DeciByte to DekaBit
    /// </summary>
    /// <param name="val">quantity measured in DeciByte</param>
    /// <returns>quantity measured in DekaBit</returns>
    public static Quantity<double, DekaBit> ToDekaBit<T>(this BaseQuantity<T, DeciByte> val) where T:IConvertible {
        return new Quantity<double, DekaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E1)) * (8*1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert DeciByte to DeciBit
    /// </summary>
    /// <param name="val">quantity measured in DeciByte</param>
    /// <returns>quantity measured in DeciBit</returns>
    public static Quantity<double, DeciBit> ToDeciBit<T>(this BaseQuantity<T, DeciByte> val) where T:IConvertible {
        return new Quantity<double, DeciBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E1)) * (8*1E1))
        );
    }
	/// <summary>
    /// Extension method to convert DeciByte to CentiBit
    /// </summary>
    /// <param name="val">quantity measured in DeciByte</param>
    /// <returns>quantity measured in CentiBit</returns>
    public static Quantity<double, CentiBit> ToCentiBit<T>(this BaseQuantity<T, DeciByte> val) where T:IConvertible {
        return new Quantity<double, CentiBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E1)) * (8*1E2))
        );
    }
	/// <summary>
    /// Extension method to convert DeciByte to MilliBit
    /// </summary>
    /// <param name="val">quantity measured in DeciByte</param>
    /// <returns>quantity measured in MilliBit</returns>
    public static Quantity<double, MilliBit> ToMilliBit<T>(this BaseQuantity<T, DeciByte> val) where T:IConvertible {
        return new Quantity<double, MilliBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E1)) * (8*1E3))
        );
    }
	/// <summary>
    /// Extension method to convert DeciByte to MicroBit
    /// </summary>
    /// <param name="val">quantity measured in DeciByte</param>
    /// <returns>quantity measured in MicroBit</returns>
    public static Quantity<double, MicroBit> ToMicroBit<T>(this BaseQuantity<T, DeciByte> val) where T:IConvertible {
        return new Quantity<double, MicroBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E1)) * (8*1E6))
        );
    }
	/// <summary>
    /// Extension method to convert DeciByte to NanoBit
    /// </summary>
    /// <param name="val">quantity measured in DeciByte</param>
    /// <returns>quantity measured in NanoBit</returns>
    public static Quantity<double, NanoBit> ToNanoBit<T>(this BaseQuantity<T, DeciByte> val) where T:IConvertible {
        return new Quantity<double, NanoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E1)) * (8*1E9))
        );
    }
	/// <summary>
    /// Extension method to convert DeciByte to PicoBit
    /// </summary>
    /// <param name="val">quantity measured in DeciByte</param>
    /// <returns>quantity measured in PicoBit</returns>
    public static Quantity<double, PicoBit> ToPicoBit<T>(this BaseQuantity<T, DeciByte> val) where T:IConvertible {
        return new Quantity<double, PicoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E1)) * (8*1E12))
        );
    }
	/// <summary>
    /// Extension method to convert DeciByte to FemtoBit
    /// </summary>
    /// <param name="val">quantity measured in DeciByte</param>
    /// <returns>quantity measured in FemtoBit</returns>
    public static Quantity<double, FemtoBit> ToFemtoBit<T>(this BaseQuantity<T, DeciByte> val) where T:IConvertible {
        return new Quantity<double, FemtoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E1)) * (8*1E15))
        );
    }
	/// <summary>
    /// Extension method to convert DeciByte to AttoBit
    /// </summary>
    /// <param name="val">quantity measured in DeciByte</param>
    /// <returns>quantity measured in AttoBit</returns>
    public static Quantity<double, AttoBit> ToAttoBit<T>(this BaseQuantity<T, DeciByte> val) where T:IConvertible {
        return new Quantity<double, AttoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E1)) * (8*1E18))
        );
    }
	/// <summary>
    /// Extension method to convert DeciByte to ZeptoBit
    /// </summary>
    /// <param name="val">quantity measured in DeciByte</param>
    /// <returns>quantity measured in ZeptoBit</returns>
    public static Quantity<double, ZeptoBit> ToZeptoBit<T>(this BaseQuantity<T, DeciByte> val) where T:IConvertible {
        return new Quantity<double, ZeptoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E1)) * (8*1E21))
        );
    }
	/// <summary>
    /// Extension method to convert DeciByte to YoctoBit
    /// </summary>
    /// <param name="val">quantity measured in DeciByte</param>
    /// <returns>quantity measured in YoctoBit</returns>
    public static Quantity<double, YoctoBit> ToYoctoBit<T>(this BaseQuantity<T, DeciByte> val) where T:IConvertible {
        return new Quantity<double, YoctoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E1)) * (8*1E24))
        );
    }
	/// <summary>
    /// Extension method to convert DeciByte to YottaByte
    /// </summary>
    /// <param name="val">quantity measured in DeciByte</param>
    /// <returns>quantity measured in YottaByte</returns>
    public static Quantity<double, YottaByte> ToYottaByte<T>(this BaseQuantity<T, DeciByte> val) where T:IConvertible {
        return new Quantity<double, YottaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E1)) * (1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert DeciByte to ZettaByte
    /// </summary>
    /// <param name="val">quantity measured in DeciByte</param>
    /// <returns>quantity measured in ZettaByte</returns>
    public static Quantity<double, ZettaByte> ToZettaByte<T>(this BaseQuantity<T, DeciByte> val) where T:IConvertible {
        return new Quantity<double, ZettaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E1)) * (1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert DeciByte to ExaByte
    /// </summary>
    /// <param name="val">quantity measured in DeciByte</param>
    /// <returns>quantity measured in ExaByte</returns>
    public static Quantity<double, ExaByte> ToExaByte<T>(this BaseQuantity<T, DeciByte> val) where T:IConvertible {
        return new Quantity<double, ExaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E1)) * (1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert DeciByte to PetaByte
    /// </summary>
    /// <param name="val">quantity measured in DeciByte</param>
    /// <returns>quantity measured in PetaByte</returns>
    public static Quantity<double, PetaByte> ToPetaByte<T>(this BaseQuantity<T, DeciByte> val) where T:IConvertible {
        return new Quantity<double, PetaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E1)) * (1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert DeciByte to TeraByte
    /// </summary>
    /// <param name="val">quantity measured in DeciByte</param>
    /// <returns>quantity measured in TeraByte</returns>
    public static Quantity<double, TeraByte> ToTeraByte<T>(this BaseQuantity<T, DeciByte> val) where T:IConvertible {
        return new Quantity<double, TeraByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E1)) * (1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert DeciByte to GigaByte
    /// </summary>
    /// <param name="val">quantity measured in DeciByte</param>
    /// <returns>quantity measured in GigaByte</returns>
    public static Quantity<double, GigaByte> ToGigaByte<T>(this BaseQuantity<T, DeciByte> val) where T:IConvertible {
        return new Quantity<double, GigaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E1)) * (1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert DeciByte to MegaByte
    /// </summary>
    /// <param name="val">quantity measured in DeciByte</param>
    /// <returns>quantity measured in MegaByte</returns>
    public static Quantity<double, MegaByte> ToMegaByte<T>(this BaseQuantity<T, DeciByte> val) where T:IConvertible {
        return new Quantity<double, MegaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E1)) * (1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert DeciByte to KiloByte
    /// </summary>
    /// <param name="val">quantity measured in DeciByte</param>
    /// <returns>quantity measured in KiloByte</returns>
    public static Quantity<double, KiloByte> ToKiloByte<T>(this BaseQuantity<T, DeciByte> val) where T:IConvertible {
        return new Quantity<double, KiloByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E1)) * (1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert DeciByte to HectoByte
    /// </summary>
    /// <param name="val">quantity measured in DeciByte</param>
    /// <returns>quantity measured in HectoByte</returns>
    public static Quantity<double, HectoByte> ToHectoByte<T>(this BaseQuantity<T, DeciByte> val) where T:IConvertible {
        return new Quantity<double, HectoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E1)) * (1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert DeciByte to DekaByte
    /// </summary>
    /// <param name="val">quantity measured in DeciByte</param>
    /// <returns>quantity measured in DekaByte</returns>
    public static Quantity<double, DekaByte> ToDekaByte<T>(this BaseQuantity<T, DeciByte> val) where T:IConvertible {
        return new Quantity<double, DekaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E1)) * (1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert DeciByte to CentiByte
    /// </summary>
    /// <param name="val">quantity measured in DeciByte</param>
    /// <returns>quantity measured in CentiByte</returns>
    public static Quantity<double, CentiByte> ToCentiByte<T>(this BaseQuantity<T, DeciByte> val) where T:IConvertible {
        return new Quantity<double, CentiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E1)) * (1E2))
        );
    }
	/// <summary>
    /// Extension method to convert DeciByte to MilliByte
    /// </summary>
    /// <param name="val">quantity measured in DeciByte</param>
    /// <returns>quantity measured in MilliByte</returns>
    public static Quantity<double, MilliByte> ToMilliByte<T>(this BaseQuantity<T, DeciByte> val) where T:IConvertible {
        return new Quantity<double, MilliByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E1)) * (1E3))
        );
    }
	/// <summary>
    /// Extension method to convert DeciByte to MicroByte
    /// </summary>
    /// <param name="val">quantity measured in DeciByte</param>
    /// <returns>quantity measured in MicroByte</returns>
    public static Quantity<double, MicroByte> ToMicroByte<T>(this BaseQuantity<T, DeciByte> val) where T:IConvertible {
        return new Quantity<double, MicroByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E1)) * (1E6))
        );
    }
	/// <summary>
    /// Extension method to convert DeciByte to NanoByte
    /// </summary>
    /// <param name="val">quantity measured in DeciByte</param>
    /// <returns>quantity measured in NanoByte</returns>
    public static Quantity<double, NanoByte> ToNanoByte<T>(this BaseQuantity<T, DeciByte> val) where T:IConvertible {
        return new Quantity<double, NanoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E1)) * (1E9))
        );
    }
	/// <summary>
    /// Extension method to convert DeciByte to PicoByte
    /// </summary>
    /// <param name="val">quantity measured in DeciByte</param>
    /// <returns>quantity measured in PicoByte</returns>
    public static Quantity<double, PicoByte> ToPicoByte<T>(this BaseQuantity<T, DeciByte> val) where T:IConvertible {
        return new Quantity<double, PicoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E1)) * (1E12))
        );
    }
	/// <summary>
    /// Extension method to convert DeciByte to FemtoByte
    /// </summary>
    /// <param name="val">quantity measured in DeciByte</param>
    /// <returns>quantity measured in FemtoByte</returns>
    public static Quantity<double, FemtoByte> ToFemtoByte<T>(this BaseQuantity<T, DeciByte> val) where T:IConvertible {
        return new Quantity<double, FemtoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E1)) * (1E15))
        );
    }
	/// <summary>
    /// Extension method to convert DeciByte to AttoByte
    /// </summary>
    /// <param name="val">quantity measured in DeciByte</param>
    /// <returns>quantity measured in AttoByte</returns>
    public static Quantity<double, AttoByte> ToAttoByte<T>(this BaseQuantity<T, DeciByte> val) where T:IConvertible {
        return new Quantity<double, AttoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E1)) * (1E18))
        );
    }
	/// <summary>
    /// Extension method to convert DeciByte to ZeptoByte
    /// </summary>
    /// <param name="val">quantity measured in DeciByte</param>
    /// <returns>quantity measured in ZeptoByte</returns>
    public static Quantity<double, ZeptoByte> ToZeptoByte<T>(this BaseQuantity<T, DeciByte> val) where T:IConvertible {
        return new Quantity<double, ZeptoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E1)) * (1E21))
        );
    }
	/// <summary>
    /// Extension method to convert DeciByte to YoctoByte
    /// </summary>
    /// <param name="val">quantity measured in DeciByte</param>
    /// <returns>quantity measured in YoctoByte</returns>
    public static Quantity<double, YoctoByte> ToYoctoByte<T>(this BaseQuantity<T, DeciByte> val) where T:IConvertible {
        return new Quantity<double, YoctoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E1)) * (1E24))
        );
    }
	/// <summary>
    /// Extension method to convert DeciByte to YobiByte
    /// </summary>
    /// <param name="val">quantity measured in DeciByte</param>
    /// <returns>quantity measured in YobiByte</returns>
    public static Quantity<double, YobiByte> ToYobiByte<T>(this BaseQuantity<T, DeciByte> val) where T:IConvertible {
        return new Quantity<double, YobiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E1)) * (1.2089258e-24))
        );
    }
	/// <summary>
    /// Extension method to convert DeciByte to ZebiByte
    /// </summary>
    /// <param name="val">quantity measured in DeciByte</param>
    /// <returns>quantity measured in ZebiByte</returns>
    public static Quantity<double, ZebiByte> ToZebiByte<T>(this BaseQuantity<T, DeciByte> val) where T:IConvertible {
        return new Quantity<double, ZebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E1)) * (1.1805916e-21))
        );
    }
	/// <summary>
    /// Extension method to convert DeciByte to ExbiByte
    /// </summary>
    /// <param name="val">quantity measured in DeciByte</param>
    /// <returns>quantity measured in ExbiByte</returns>
    public static Quantity<double, ExbiByte> ToExbiByte<T>(this BaseQuantity<T, DeciByte> val) where T:IConvertible {
        return new Quantity<double, ExbiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E1)) * (1.1529215e-18))
        );
    }
	/// <summary>
    /// Extension method to convert DeciByte to PebiByte
    /// </summary>
    /// <param name="val">quantity measured in DeciByte</param>
    /// <returns>quantity measured in PebiByte</returns>
    public static Quantity<double, PebiByte> ToPebiByte<T>(this BaseQuantity<T, DeciByte> val) where T:IConvertible {
        return new Quantity<double, PebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E1)) * (1.1258999e-15))
        );
    }
	/// <summary>
    /// Extension method to convert DeciByte to TebiByte
    /// </summary>
    /// <param name="val">quantity measured in DeciByte</param>
    /// <returns>quantity measured in TebiByte</returns>
    public static Quantity<double, TebiByte> ToTebiByte<T>(this BaseQuantity<T, DeciByte> val) where T:IConvertible {
        return new Quantity<double, TebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E1)) * (1.0995116e-12))
        );
    }
	/// <summary>
    /// Extension method to convert DeciByte to GibiByte
    /// </summary>
    /// <param name="val">quantity measured in DeciByte</param>
    /// <returns>quantity measured in GibiByte</returns>
    public static Quantity<double, GibiByte> ToGibiByte<T>(this BaseQuantity<T, DeciByte> val) where T:IConvertible {
        return new Quantity<double, GibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E1)) * (1d/1073741824))
        );
    }
	/// <summary>
    /// Extension method to convert DeciByte to MebiByte
    /// </summary>
    /// <param name="val">quantity measured in DeciByte</param>
    /// <returns>quantity measured in MebiByte</returns>
    public static Quantity<double, MebiByte> ToMebiByte<T>(this BaseQuantity<T, DeciByte> val) where T:IConvertible {
        return new Quantity<double, MebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E1)) * (1d/1048576))
        );
    }
	/// <summary>
    /// Extension method to convert DeciByte to KibiByte
    /// </summary>
    /// <param name="val">quantity measured in DeciByte</param>
    /// <returns>quantity measured in KibiByte</returns>
    public static Quantity<double, KibiByte> ToKibiByte<T>(this BaseQuantity<T, DeciByte> val) where T:IConvertible {
        return new Quantity<double, KibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E1)) * (1d/1024))
        );
    }
	/// <summary>
    /// Extension method to convert Byte to CentiByte
    /// </summary>
    /// <param name="val">quantity measured in Byte</param>
    /// <returns>quantity measured in CentiByte</returns>
    public static Quantity<double, CentiByte> ToCentiByte<T>(this BaseQuantity<T, Byte> val) where T:IConvertible {
        return new Quantity<double, CentiByte>(
            Convert.ToDouble(val.Value) * (1E2)
        );
    }
	/// <summary>
    /// Extension method to convert CentiByte to Byte
    /// </summary>
    /// <param name="val">quantity measured in CentiByte</param>
    /// <returns>quantity measured in Byte</returns>
    public static Quantity<double, Byte> ToByte<T>(this BaseQuantity<T, CentiByte> val) where T:IConvertible {
        return new Quantity<double, Byte>(
            Convert.ToDouble(val.Value) * (1d/(1E2))
        );
    }
	/// <summary>
    /// Extension method to convert CentiByte to Bit
    /// </summary>
    /// <param name="val">quantity measured in CentiByte</param>
    /// <returns>quantity measured in Bit</returns>
    public static Quantity<double, Bit> ToBit<T>(this BaseQuantity<T, CentiByte> val) where T:IConvertible {
        return new Quantity<double, Bit>(
            Convert.ToDouble(val.Value) * ((1d/(1E2)) * (8))
        );
    }
	/// <summary>
    /// Extension method to convert CentiByte to YottaBit
    /// </summary>
    /// <param name="val">quantity measured in CentiByte</param>
    /// <returns>quantity measured in YottaBit</returns>
    public static Quantity<double, YottaBit> ToYottaBit<T>(this BaseQuantity<T, CentiByte> val) where T:IConvertible {
        return new Quantity<double, YottaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E2)) * (8*1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert CentiByte to ZettaBit
    /// </summary>
    /// <param name="val">quantity measured in CentiByte</param>
    /// <returns>quantity measured in ZettaBit</returns>
    public static Quantity<double, ZettaBit> ToZettaBit<T>(this BaseQuantity<T, CentiByte> val) where T:IConvertible {
        return new Quantity<double, ZettaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E2)) * (8*1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert CentiByte to ExaBit
    /// </summary>
    /// <param name="val">quantity measured in CentiByte</param>
    /// <returns>quantity measured in ExaBit</returns>
    public static Quantity<double, ExaBit> ToExaBit<T>(this BaseQuantity<T, CentiByte> val) where T:IConvertible {
        return new Quantity<double, ExaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E2)) * (8*1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert CentiByte to PetaBit
    /// </summary>
    /// <param name="val">quantity measured in CentiByte</param>
    /// <returns>quantity measured in PetaBit</returns>
    public static Quantity<double, PetaBit> ToPetaBit<T>(this BaseQuantity<T, CentiByte> val) where T:IConvertible {
        return new Quantity<double, PetaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E2)) * (8*1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert CentiByte to TeraBit
    /// </summary>
    /// <param name="val">quantity measured in CentiByte</param>
    /// <returns>quantity measured in TeraBit</returns>
    public static Quantity<double, TeraBit> ToTeraBit<T>(this BaseQuantity<T, CentiByte> val) where T:IConvertible {
        return new Quantity<double, TeraBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E2)) * (8*1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert CentiByte to GigaBit
    /// </summary>
    /// <param name="val">quantity measured in CentiByte</param>
    /// <returns>quantity measured in GigaBit</returns>
    public static Quantity<double, GigaBit> ToGigaBit<T>(this BaseQuantity<T, CentiByte> val) where T:IConvertible {
        return new Quantity<double, GigaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E2)) * (8*1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert CentiByte to MegaBit
    /// </summary>
    /// <param name="val">quantity measured in CentiByte</param>
    /// <returns>quantity measured in MegaBit</returns>
    public static Quantity<double, MegaBit> ToMegaBit<T>(this BaseQuantity<T, CentiByte> val) where T:IConvertible {
        return new Quantity<double, MegaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E2)) * (8*1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert CentiByte to KiloBit
    /// </summary>
    /// <param name="val">quantity measured in CentiByte</param>
    /// <returns>quantity measured in KiloBit</returns>
    public static Quantity<double, KiloBit> ToKiloBit<T>(this BaseQuantity<T, CentiByte> val) where T:IConvertible {
        return new Quantity<double, KiloBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E2)) * (8*1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert CentiByte to HectoBit
    /// </summary>
    /// <param name="val">quantity measured in CentiByte</param>
    /// <returns>quantity measured in HectoBit</returns>
    public static Quantity<double, HectoBit> ToHectoBit<T>(this BaseQuantity<T, CentiByte> val) where T:IConvertible {
        return new Quantity<double, HectoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E2)) * (8*1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert CentiByte to DekaBit
    /// </summary>
    /// <param name="val">quantity measured in CentiByte</param>
    /// <returns>quantity measured in DekaBit</returns>
    public static Quantity<double, DekaBit> ToDekaBit<T>(this BaseQuantity<T, CentiByte> val) where T:IConvertible {
        return new Quantity<double, DekaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E2)) * (8*1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert CentiByte to DeciBit
    /// </summary>
    /// <param name="val">quantity measured in CentiByte</param>
    /// <returns>quantity measured in DeciBit</returns>
    public static Quantity<double, DeciBit> ToDeciBit<T>(this BaseQuantity<T, CentiByte> val) where T:IConvertible {
        return new Quantity<double, DeciBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E2)) * (8*1E1))
        );
    }
	/// <summary>
    /// Extension method to convert CentiByte to CentiBit
    /// </summary>
    /// <param name="val">quantity measured in CentiByte</param>
    /// <returns>quantity measured in CentiBit</returns>
    public static Quantity<double, CentiBit> ToCentiBit<T>(this BaseQuantity<T, CentiByte> val) where T:IConvertible {
        return new Quantity<double, CentiBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E2)) * (8*1E2))
        );
    }
	/// <summary>
    /// Extension method to convert CentiByte to MilliBit
    /// </summary>
    /// <param name="val">quantity measured in CentiByte</param>
    /// <returns>quantity measured in MilliBit</returns>
    public static Quantity<double, MilliBit> ToMilliBit<T>(this BaseQuantity<T, CentiByte> val) where T:IConvertible {
        return new Quantity<double, MilliBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E2)) * (8*1E3))
        );
    }
	/// <summary>
    /// Extension method to convert CentiByte to MicroBit
    /// </summary>
    /// <param name="val">quantity measured in CentiByte</param>
    /// <returns>quantity measured in MicroBit</returns>
    public static Quantity<double, MicroBit> ToMicroBit<T>(this BaseQuantity<T, CentiByte> val) where T:IConvertible {
        return new Quantity<double, MicroBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E2)) * (8*1E6))
        );
    }
	/// <summary>
    /// Extension method to convert CentiByte to NanoBit
    /// </summary>
    /// <param name="val">quantity measured in CentiByte</param>
    /// <returns>quantity measured in NanoBit</returns>
    public static Quantity<double, NanoBit> ToNanoBit<T>(this BaseQuantity<T, CentiByte> val) where T:IConvertible {
        return new Quantity<double, NanoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E2)) * (8*1E9))
        );
    }
	/// <summary>
    /// Extension method to convert CentiByte to PicoBit
    /// </summary>
    /// <param name="val">quantity measured in CentiByte</param>
    /// <returns>quantity measured in PicoBit</returns>
    public static Quantity<double, PicoBit> ToPicoBit<T>(this BaseQuantity<T, CentiByte> val) where T:IConvertible {
        return new Quantity<double, PicoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E2)) * (8*1E12))
        );
    }
	/// <summary>
    /// Extension method to convert CentiByte to FemtoBit
    /// </summary>
    /// <param name="val">quantity measured in CentiByte</param>
    /// <returns>quantity measured in FemtoBit</returns>
    public static Quantity<double, FemtoBit> ToFemtoBit<T>(this BaseQuantity<T, CentiByte> val) where T:IConvertible {
        return new Quantity<double, FemtoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E2)) * (8*1E15))
        );
    }
	/// <summary>
    /// Extension method to convert CentiByte to AttoBit
    /// </summary>
    /// <param name="val">quantity measured in CentiByte</param>
    /// <returns>quantity measured in AttoBit</returns>
    public static Quantity<double, AttoBit> ToAttoBit<T>(this BaseQuantity<T, CentiByte> val) where T:IConvertible {
        return new Quantity<double, AttoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E2)) * (8*1E18))
        );
    }
	/// <summary>
    /// Extension method to convert CentiByte to ZeptoBit
    /// </summary>
    /// <param name="val">quantity measured in CentiByte</param>
    /// <returns>quantity measured in ZeptoBit</returns>
    public static Quantity<double, ZeptoBit> ToZeptoBit<T>(this BaseQuantity<T, CentiByte> val) where T:IConvertible {
        return new Quantity<double, ZeptoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E2)) * (8*1E21))
        );
    }
	/// <summary>
    /// Extension method to convert CentiByte to YoctoBit
    /// </summary>
    /// <param name="val">quantity measured in CentiByte</param>
    /// <returns>quantity measured in YoctoBit</returns>
    public static Quantity<double, YoctoBit> ToYoctoBit<T>(this BaseQuantity<T, CentiByte> val) where T:IConvertible {
        return new Quantity<double, YoctoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E2)) * (8*1E24))
        );
    }
	/// <summary>
    /// Extension method to convert CentiByte to YottaByte
    /// </summary>
    /// <param name="val">quantity measured in CentiByte</param>
    /// <returns>quantity measured in YottaByte</returns>
    public static Quantity<double, YottaByte> ToYottaByte<T>(this BaseQuantity<T, CentiByte> val) where T:IConvertible {
        return new Quantity<double, YottaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E2)) * (1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert CentiByte to ZettaByte
    /// </summary>
    /// <param name="val">quantity measured in CentiByte</param>
    /// <returns>quantity measured in ZettaByte</returns>
    public static Quantity<double, ZettaByte> ToZettaByte<T>(this BaseQuantity<T, CentiByte> val) where T:IConvertible {
        return new Quantity<double, ZettaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E2)) * (1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert CentiByte to ExaByte
    /// </summary>
    /// <param name="val">quantity measured in CentiByte</param>
    /// <returns>quantity measured in ExaByte</returns>
    public static Quantity<double, ExaByte> ToExaByte<T>(this BaseQuantity<T, CentiByte> val) where T:IConvertible {
        return new Quantity<double, ExaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E2)) * (1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert CentiByte to PetaByte
    /// </summary>
    /// <param name="val">quantity measured in CentiByte</param>
    /// <returns>quantity measured in PetaByte</returns>
    public static Quantity<double, PetaByte> ToPetaByte<T>(this BaseQuantity<T, CentiByte> val) where T:IConvertible {
        return new Quantity<double, PetaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E2)) * (1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert CentiByte to TeraByte
    /// </summary>
    /// <param name="val">quantity measured in CentiByte</param>
    /// <returns>quantity measured in TeraByte</returns>
    public static Quantity<double, TeraByte> ToTeraByte<T>(this BaseQuantity<T, CentiByte> val) where T:IConvertible {
        return new Quantity<double, TeraByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E2)) * (1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert CentiByte to GigaByte
    /// </summary>
    /// <param name="val">quantity measured in CentiByte</param>
    /// <returns>quantity measured in GigaByte</returns>
    public static Quantity<double, GigaByte> ToGigaByte<T>(this BaseQuantity<T, CentiByte> val) where T:IConvertible {
        return new Quantity<double, GigaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E2)) * (1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert CentiByte to MegaByte
    /// </summary>
    /// <param name="val">quantity measured in CentiByte</param>
    /// <returns>quantity measured in MegaByte</returns>
    public static Quantity<double, MegaByte> ToMegaByte<T>(this BaseQuantity<T, CentiByte> val) where T:IConvertible {
        return new Quantity<double, MegaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E2)) * (1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert CentiByte to KiloByte
    /// </summary>
    /// <param name="val">quantity measured in CentiByte</param>
    /// <returns>quantity measured in KiloByte</returns>
    public static Quantity<double, KiloByte> ToKiloByte<T>(this BaseQuantity<T, CentiByte> val) where T:IConvertible {
        return new Quantity<double, KiloByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E2)) * (1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert CentiByte to HectoByte
    /// </summary>
    /// <param name="val">quantity measured in CentiByte</param>
    /// <returns>quantity measured in HectoByte</returns>
    public static Quantity<double, HectoByte> ToHectoByte<T>(this BaseQuantity<T, CentiByte> val) where T:IConvertible {
        return new Quantity<double, HectoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E2)) * (1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert CentiByte to DekaByte
    /// </summary>
    /// <param name="val">quantity measured in CentiByte</param>
    /// <returns>quantity measured in DekaByte</returns>
    public static Quantity<double, DekaByte> ToDekaByte<T>(this BaseQuantity<T, CentiByte> val) where T:IConvertible {
        return new Quantity<double, DekaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E2)) * (1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert CentiByte to DeciByte
    /// </summary>
    /// <param name="val">quantity measured in CentiByte</param>
    /// <returns>quantity measured in DeciByte</returns>
    public static Quantity<double, DeciByte> ToDeciByte<T>(this BaseQuantity<T, CentiByte> val) where T:IConvertible {
        return new Quantity<double, DeciByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E2)) * (1E1))
        );
    }
	/// <summary>
    /// Extension method to convert CentiByte to MilliByte
    /// </summary>
    /// <param name="val">quantity measured in CentiByte</param>
    /// <returns>quantity measured in MilliByte</returns>
    public static Quantity<double, MilliByte> ToMilliByte<T>(this BaseQuantity<T, CentiByte> val) where T:IConvertible {
        return new Quantity<double, MilliByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E2)) * (1E3))
        );
    }
	/// <summary>
    /// Extension method to convert CentiByte to MicroByte
    /// </summary>
    /// <param name="val">quantity measured in CentiByte</param>
    /// <returns>quantity measured in MicroByte</returns>
    public static Quantity<double, MicroByte> ToMicroByte<T>(this BaseQuantity<T, CentiByte> val) where T:IConvertible {
        return new Quantity<double, MicroByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E2)) * (1E6))
        );
    }
	/// <summary>
    /// Extension method to convert CentiByte to NanoByte
    /// </summary>
    /// <param name="val">quantity measured in CentiByte</param>
    /// <returns>quantity measured in NanoByte</returns>
    public static Quantity<double, NanoByte> ToNanoByte<T>(this BaseQuantity<T, CentiByte> val) where T:IConvertible {
        return new Quantity<double, NanoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E2)) * (1E9))
        );
    }
	/// <summary>
    /// Extension method to convert CentiByte to PicoByte
    /// </summary>
    /// <param name="val">quantity measured in CentiByte</param>
    /// <returns>quantity measured in PicoByte</returns>
    public static Quantity<double, PicoByte> ToPicoByte<T>(this BaseQuantity<T, CentiByte> val) where T:IConvertible {
        return new Quantity<double, PicoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E2)) * (1E12))
        );
    }
	/// <summary>
    /// Extension method to convert CentiByte to FemtoByte
    /// </summary>
    /// <param name="val">quantity measured in CentiByte</param>
    /// <returns>quantity measured in FemtoByte</returns>
    public static Quantity<double, FemtoByte> ToFemtoByte<T>(this BaseQuantity<T, CentiByte> val) where T:IConvertible {
        return new Quantity<double, FemtoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E2)) * (1E15))
        );
    }
	/// <summary>
    /// Extension method to convert CentiByte to AttoByte
    /// </summary>
    /// <param name="val">quantity measured in CentiByte</param>
    /// <returns>quantity measured in AttoByte</returns>
    public static Quantity<double, AttoByte> ToAttoByte<T>(this BaseQuantity<T, CentiByte> val) where T:IConvertible {
        return new Quantity<double, AttoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E2)) * (1E18))
        );
    }
	/// <summary>
    /// Extension method to convert CentiByte to ZeptoByte
    /// </summary>
    /// <param name="val">quantity measured in CentiByte</param>
    /// <returns>quantity measured in ZeptoByte</returns>
    public static Quantity<double, ZeptoByte> ToZeptoByte<T>(this BaseQuantity<T, CentiByte> val) where T:IConvertible {
        return new Quantity<double, ZeptoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E2)) * (1E21))
        );
    }
	/// <summary>
    /// Extension method to convert CentiByte to YoctoByte
    /// </summary>
    /// <param name="val">quantity measured in CentiByte</param>
    /// <returns>quantity measured in YoctoByte</returns>
    public static Quantity<double, YoctoByte> ToYoctoByte<T>(this BaseQuantity<T, CentiByte> val) where T:IConvertible {
        return new Quantity<double, YoctoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E2)) * (1E24))
        );
    }
	/// <summary>
    /// Extension method to convert CentiByte to YobiByte
    /// </summary>
    /// <param name="val">quantity measured in CentiByte</param>
    /// <returns>quantity measured in YobiByte</returns>
    public static Quantity<double, YobiByte> ToYobiByte<T>(this BaseQuantity<T, CentiByte> val) where T:IConvertible {
        return new Quantity<double, YobiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E2)) * (1.2089258e-24))
        );
    }
	/// <summary>
    /// Extension method to convert CentiByte to ZebiByte
    /// </summary>
    /// <param name="val">quantity measured in CentiByte</param>
    /// <returns>quantity measured in ZebiByte</returns>
    public static Quantity<double, ZebiByte> ToZebiByte<T>(this BaseQuantity<T, CentiByte> val) where T:IConvertible {
        return new Quantity<double, ZebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E2)) * (1.1805916e-21))
        );
    }
	/// <summary>
    /// Extension method to convert CentiByte to ExbiByte
    /// </summary>
    /// <param name="val">quantity measured in CentiByte</param>
    /// <returns>quantity measured in ExbiByte</returns>
    public static Quantity<double, ExbiByte> ToExbiByte<T>(this BaseQuantity<T, CentiByte> val) where T:IConvertible {
        return new Quantity<double, ExbiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E2)) * (1.1529215e-18))
        );
    }
	/// <summary>
    /// Extension method to convert CentiByte to PebiByte
    /// </summary>
    /// <param name="val">quantity measured in CentiByte</param>
    /// <returns>quantity measured in PebiByte</returns>
    public static Quantity<double, PebiByte> ToPebiByte<T>(this BaseQuantity<T, CentiByte> val) where T:IConvertible {
        return new Quantity<double, PebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E2)) * (1.1258999e-15))
        );
    }
	/// <summary>
    /// Extension method to convert CentiByte to TebiByte
    /// </summary>
    /// <param name="val">quantity measured in CentiByte</param>
    /// <returns>quantity measured in TebiByte</returns>
    public static Quantity<double, TebiByte> ToTebiByte<T>(this BaseQuantity<T, CentiByte> val) where T:IConvertible {
        return new Quantity<double, TebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E2)) * (1.0995116e-12))
        );
    }
	/// <summary>
    /// Extension method to convert CentiByte to GibiByte
    /// </summary>
    /// <param name="val">quantity measured in CentiByte</param>
    /// <returns>quantity measured in GibiByte</returns>
    public static Quantity<double, GibiByte> ToGibiByte<T>(this BaseQuantity<T, CentiByte> val) where T:IConvertible {
        return new Quantity<double, GibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E2)) * (1d/1073741824))
        );
    }
	/// <summary>
    /// Extension method to convert CentiByte to MebiByte
    /// </summary>
    /// <param name="val">quantity measured in CentiByte</param>
    /// <returns>quantity measured in MebiByte</returns>
    public static Quantity<double, MebiByte> ToMebiByte<T>(this BaseQuantity<T, CentiByte> val) where T:IConvertible {
        return new Quantity<double, MebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E2)) * (1d/1048576))
        );
    }
	/// <summary>
    /// Extension method to convert CentiByte to KibiByte
    /// </summary>
    /// <param name="val">quantity measured in CentiByte</param>
    /// <returns>quantity measured in KibiByte</returns>
    public static Quantity<double, KibiByte> ToKibiByte<T>(this BaseQuantity<T, CentiByte> val) where T:IConvertible {
        return new Quantity<double, KibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E2)) * (1d/1024))
        );
    }
	/// <summary>
    /// Extension method to convert Byte to MilliByte
    /// </summary>
    /// <param name="val">quantity measured in Byte</param>
    /// <returns>quantity measured in MilliByte</returns>
    public static Quantity<double, MilliByte> ToMilliByte<T>(this BaseQuantity<T, Byte> val) where T:IConvertible {
        return new Quantity<double, MilliByte>(
            Convert.ToDouble(val.Value) * (1E3)
        );
    }
	/// <summary>
    /// Extension method to convert MilliByte to Byte
    /// </summary>
    /// <param name="val">quantity measured in MilliByte</param>
    /// <returns>quantity measured in Byte</returns>
    public static Quantity<double, Byte> ToByte<T>(this BaseQuantity<T, MilliByte> val) where T:IConvertible {
        return new Quantity<double, Byte>(
            Convert.ToDouble(val.Value) * (1d/(1E3))
        );
    }
	/// <summary>
    /// Extension method to convert MilliByte to Bit
    /// </summary>
    /// <param name="val">quantity measured in MilliByte</param>
    /// <returns>quantity measured in Bit</returns>
    public static Quantity<double, Bit> ToBit<T>(this BaseQuantity<T, MilliByte> val) where T:IConvertible {
        return new Quantity<double, Bit>(
            Convert.ToDouble(val.Value) * ((1d/(1E3)) * (8))
        );
    }
	/// <summary>
    /// Extension method to convert MilliByte to YottaBit
    /// </summary>
    /// <param name="val">quantity measured in MilliByte</param>
    /// <returns>quantity measured in YottaBit</returns>
    public static Quantity<double, YottaBit> ToYottaBit<T>(this BaseQuantity<T, MilliByte> val) where T:IConvertible {
        return new Quantity<double, YottaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E3)) * (8*1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert MilliByte to ZettaBit
    /// </summary>
    /// <param name="val">quantity measured in MilliByte</param>
    /// <returns>quantity measured in ZettaBit</returns>
    public static Quantity<double, ZettaBit> ToZettaBit<T>(this BaseQuantity<T, MilliByte> val) where T:IConvertible {
        return new Quantity<double, ZettaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E3)) * (8*1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert MilliByte to ExaBit
    /// </summary>
    /// <param name="val">quantity measured in MilliByte</param>
    /// <returns>quantity measured in ExaBit</returns>
    public static Quantity<double, ExaBit> ToExaBit<T>(this BaseQuantity<T, MilliByte> val) where T:IConvertible {
        return new Quantity<double, ExaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E3)) * (8*1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert MilliByte to PetaBit
    /// </summary>
    /// <param name="val">quantity measured in MilliByte</param>
    /// <returns>quantity measured in PetaBit</returns>
    public static Quantity<double, PetaBit> ToPetaBit<T>(this BaseQuantity<T, MilliByte> val) where T:IConvertible {
        return new Quantity<double, PetaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E3)) * (8*1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert MilliByte to TeraBit
    /// </summary>
    /// <param name="val">quantity measured in MilliByte</param>
    /// <returns>quantity measured in TeraBit</returns>
    public static Quantity<double, TeraBit> ToTeraBit<T>(this BaseQuantity<T, MilliByte> val) where T:IConvertible {
        return new Quantity<double, TeraBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E3)) * (8*1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert MilliByte to GigaBit
    /// </summary>
    /// <param name="val">quantity measured in MilliByte</param>
    /// <returns>quantity measured in GigaBit</returns>
    public static Quantity<double, GigaBit> ToGigaBit<T>(this BaseQuantity<T, MilliByte> val) where T:IConvertible {
        return new Quantity<double, GigaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E3)) * (8*1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert MilliByte to MegaBit
    /// </summary>
    /// <param name="val">quantity measured in MilliByte</param>
    /// <returns>quantity measured in MegaBit</returns>
    public static Quantity<double, MegaBit> ToMegaBit<T>(this BaseQuantity<T, MilliByte> val) where T:IConvertible {
        return new Quantity<double, MegaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E3)) * (8*1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert MilliByte to KiloBit
    /// </summary>
    /// <param name="val">quantity measured in MilliByte</param>
    /// <returns>quantity measured in KiloBit</returns>
    public static Quantity<double, KiloBit> ToKiloBit<T>(this BaseQuantity<T, MilliByte> val) where T:IConvertible {
        return new Quantity<double, KiloBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E3)) * (8*1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert MilliByte to HectoBit
    /// </summary>
    /// <param name="val">quantity measured in MilliByte</param>
    /// <returns>quantity measured in HectoBit</returns>
    public static Quantity<double, HectoBit> ToHectoBit<T>(this BaseQuantity<T, MilliByte> val) where T:IConvertible {
        return new Quantity<double, HectoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E3)) * (8*1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert MilliByte to DekaBit
    /// </summary>
    /// <param name="val">quantity measured in MilliByte</param>
    /// <returns>quantity measured in DekaBit</returns>
    public static Quantity<double, DekaBit> ToDekaBit<T>(this BaseQuantity<T, MilliByte> val) where T:IConvertible {
        return new Quantity<double, DekaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E3)) * (8*1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert MilliByte to DeciBit
    /// </summary>
    /// <param name="val">quantity measured in MilliByte</param>
    /// <returns>quantity measured in DeciBit</returns>
    public static Quantity<double, DeciBit> ToDeciBit<T>(this BaseQuantity<T, MilliByte> val) where T:IConvertible {
        return new Quantity<double, DeciBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E3)) * (8*1E1))
        );
    }
	/// <summary>
    /// Extension method to convert MilliByte to CentiBit
    /// </summary>
    /// <param name="val">quantity measured in MilliByte</param>
    /// <returns>quantity measured in CentiBit</returns>
    public static Quantity<double, CentiBit> ToCentiBit<T>(this BaseQuantity<T, MilliByte> val) where T:IConvertible {
        return new Quantity<double, CentiBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E3)) * (8*1E2))
        );
    }
	/// <summary>
    /// Extension method to convert MilliByte to MilliBit
    /// </summary>
    /// <param name="val">quantity measured in MilliByte</param>
    /// <returns>quantity measured in MilliBit</returns>
    public static Quantity<double, MilliBit> ToMilliBit<T>(this BaseQuantity<T, MilliByte> val) where T:IConvertible {
        return new Quantity<double, MilliBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E3)) * (8*1E3))
        );
    }
	/// <summary>
    /// Extension method to convert MilliByte to MicroBit
    /// </summary>
    /// <param name="val">quantity measured in MilliByte</param>
    /// <returns>quantity measured in MicroBit</returns>
    public static Quantity<double, MicroBit> ToMicroBit<T>(this BaseQuantity<T, MilliByte> val) where T:IConvertible {
        return new Quantity<double, MicroBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E3)) * (8*1E6))
        );
    }
	/// <summary>
    /// Extension method to convert MilliByte to NanoBit
    /// </summary>
    /// <param name="val">quantity measured in MilliByte</param>
    /// <returns>quantity measured in NanoBit</returns>
    public static Quantity<double, NanoBit> ToNanoBit<T>(this BaseQuantity<T, MilliByte> val) where T:IConvertible {
        return new Quantity<double, NanoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E3)) * (8*1E9))
        );
    }
	/// <summary>
    /// Extension method to convert MilliByte to PicoBit
    /// </summary>
    /// <param name="val">quantity measured in MilliByte</param>
    /// <returns>quantity measured in PicoBit</returns>
    public static Quantity<double, PicoBit> ToPicoBit<T>(this BaseQuantity<T, MilliByte> val) where T:IConvertible {
        return new Quantity<double, PicoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E3)) * (8*1E12))
        );
    }
	/// <summary>
    /// Extension method to convert MilliByte to FemtoBit
    /// </summary>
    /// <param name="val">quantity measured in MilliByte</param>
    /// <returns>quantity measured in FemtoBit</returns>
    public static Quantity<double, FemtoBit> ToFemtoBit<T>(this BaseQuantity<T, MilliByte> val) where T:IConvertible {
        return new Quantity<double, FemtoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E3)) * (8*1E15))
        );
    }
	/// <summary>
    /// Extension method to convert MilliByte to AttoBit
    /// </summary>
    /// <param name="val">quantity measured in MilliByte</param>
    /// <returns>quantity measured in AttoBit</returns>
    public static Quantity<double, AttoBit> ToAttoBit<T>(this BaseQuantity<T, MilliByte> val) where T:IConvertible {
        return new Quantity<double, AttoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E3)) * (8*1E18))
        );
    }
	/// <summary>
    /// Extension method to convert MilliByte to ZeptoBit
    /// </summary>
    /// <param name="val">quantity measured in MilliByte</param>
    /// <returns>quantity measured in ZeptoBit</returns>
    public static Quantity<double, ZeptoBit> ToZeptoBit<T>(this BaseQuantity<T, MilliByte> val) where T:IConvertible {
        return new Quantity<double, ZeptoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E3)) * (8*1E21))
        );
    }
	/// <summary>
    /// Extension method to convert MilliByte to YoctoBit
    /// </summary>
    /// <param name="val">quantity measured in MilliByte</param>
    /// <returns>quantity measured in YoctoBit</returns>
    public static Quantity<double, YoctoBit> ToYoctoBit<T>(this BaseQuantity<T, MilliByte> val) where T:IConvertible {
        return new Quantity<double, YoctoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E3)) * (8*1E24))
        );
    }
	/// <summary>
    /// Extension method to convert MilliByte to YottaByte
    /// </summary>
    /// <param name="val">quantity measured in MilliByte</param>
    /// <returns>quantity measured in YottaByte</returns>
    public static Quantity<double, YottaByte> ToYottaByte<T>(this BaseQuantity<T, MilliByte> val) where T:IConvertible {
        return new Quantity<double, YottaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E3)) * (1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert MilliByte to ZettaByte
    /// </summary>
    /// <param name="val">quantity measured in MilliByte</param>
    /// <returns>quantity measured in ZettaByte</returns>
    public static Quantity<double, ZettaByte> ToZettaByte<T>(this BaseQuantity<T, MilliByte> val) where T:IConvertible {
        return new Quantity<double, ZettaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E3)) * (1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert MilliByte to ExaByte
    /// </summary>
    /// <param name="val">quantity measured in MilliByte</param>
    /// <returns>quantity measured in ExaByte</returns>
    public static Quantity<double, ExaByte> ToExaByte<T>(this BaseQuantity<T, MilliByte> val) where T:IConvertible {
        return new Quantity<double, ExaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E3)) * (1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert MilliByte to PetaByte
    /// </summary>
    /// <param name="val">quantity measured in MilliByte</param>
    /// <returns>quantity measured in PetaByte</returns>
    public static Quantity<double, PetaByte> ToPetaByte<T>(this BaseQuantity<T, MilliByte> val) where T:IConvertible {
        return new Quantity<double, PetaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E3)) * (1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert MilliByte to TeraByte
    /// </summary>
    /// <param name="val">quantity measured in MilliByte</param>
    /// <returns>quantity measured in TeraByte</returns>
    public static Quantity<double, TeraByte> ToTeraByte<T>(this BaseQuantity<T, MilliByte> val) where T:IConvertible {
        return new Quantity<double, TeraByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E3)) * (1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert MilliByte to GigaByte
    /// </summary>
    /// <param name="val">quantity measured in MilliByte</param>
    /// <returns>quantity measured in GigaByte</returns>
    public static Quantity<double, GigaByte> ToGigaByte<T>(this BaseQuantity<T, MilliByte> val) where T:IConvertible {
        return new Quantity<double, GigaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E3)) * (1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert MilliByte to MegaByte
    /// </summary>
    /// <param name="val">quantity measured in MilliByte</param>
    /// <returns>quantity measured in MegaByte</returns>
    public static Quantity<double, MegaByte> ToMegaByte<T>(this BaseQuantity<T, MilliByte> val) where T:IConvertible {
        return new Quantity<double, MegaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E3)) * (1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert MilliByte to KiloByte
    /// </summary>
    /// <param name="val">quantity measured in MilliByte</param>
    /// <returns>quantity measured in KiloByte</returns>
    public static Quantity<double, KiloByte> ToKiloByte<T>(this BaseQuantity<T, MilliByte> val) where T:IConvertible {
        return new Quantity<double, KiloByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E3)) * (1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert MilliByte to HectoByte
    /// </summary>
    /// <param name="val">quantity measured in MilliByte</param>
    /// <returns>quantity measured in HectoByte</returns>
    public static Quantity<double, HectoByte> ToHectoByte<T>(this BaseQuantity<T, MilliByte> val) where T:IConvertible {
        return new Quantity<double, HectoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E3)) * (1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert MilliByte to DekaByte
    /// </summary>
    /// <param name="val">quantity measured in MilliByte</param>
    /// <returns>quantity measured in DekaByte</returns>
    public static Quantity<double, DekaByte> ToDekaByte<T>(this BaseQuantity<T, MilliByte> val) where T:IConvertible {
        return new Quantity<double, DekaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E3)) * (1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert MilliByte to DeciByte
    /// </summary>
    /// <param name="val">quantity measured in MilliByte</param>
    /// <returns>quantity measured in DeciByte</returns>
    public static Quantity<double, DeciByte> ToDeciByte<T>(this BaseQuantity<T, MilliByte> val) where T:IConvertible {
        return new Quantity<double, DeciByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E3)) * (1E1))
        );
    }
	/// <summary>
    /// Extension method to convert MilliByte to CentiByte
    /// </summary>
    /// <param name="val">quantity measured in MilliByte</param>
    /// <returns>quantity measured in CentiByte</returns>
    public static Quantity<double, CentiByte> ToCentiByte<T>(this BaseQuantity<T, MilliByte> val) where T:IConvertible {
        return new Quantity<double, CentiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E3)) * (1E2))
        );
    }
	/// <summary>
    /// Extension method to convert MilliByte to MicroByte
    /// </summary>
    /// <param name="val">quantity measured in MilliByte</param>
    /// <returns>quantity measured in MicroByte</returns>
    public static Quantity<double, MicroByte> ToMicroByte<T>(this BaseQuantity<T, MilliByte> val) where T:IConvertible {
        return new Quantity<double, MicroByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E3)) * (1E6))
        );
    }
	/// <summary>
    /// Extension method to convert MilliByte to NanoByte
    /// </summary>
    /// <param name="val">quantity measured in MilliByte</param>
    /// <returns>quantity measured in NanoByte</returns>
    public static Quantity<double, NanoByte> ToNanoByte<T>(this BaseQuantity<T, MilliByte> val) where T:IConvertible {
        return new Quantity<double, NanoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E3)) * (1E9))
        );
    }
	/// <summary>
    /// Extension method to convert MilliByte to PicoByte
    /// </summary>
    /// <param name="val">quantity measured in MilliByte</param>
    /// <returns>quantity measured in PicoByte</returns>
    public static Quantity<double, PicoByte> ToPicoByte<T>(this BaseQuantity<T, MilliByte> val) where T:IConvertible {
        return new Quantity<double, PicoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E3)) * (1E12))
        );
    }
	/// <summary>
    /// Extension method to convert MilliByte to FemtoByte
    /// </summary>
    /// <param name="val">quantity measured in MilliByte</param>
    /// <returns>quantity measured in FemtoByte</returns>
    public static Quantity<double, FemtoByte> ToFemtoByte<T>(this BaseQuantity<T, MilliByte> val) where T:IConvertible {
        return new Quantity<double, FemtoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E3)) * (1E15))
        );
    }
	/// <summary>
    /// Extension method to convert MilliByte to AttoByte
    /// </summary>
    /// <param name="val">quantity measured in MilliByte</param>
    /// <returns>quantity measured in AttoByte</returns>
    public static Quantity<double, AttoByte> ToAttoByte<T>(this BaseQuantity<T, MilliByte> val) where T:IConvertible {
        return new Quantity<double, AttoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E3)) * (1E18))
        );
    }
	/// <summary>
    /// Extension method to convert MilliByte to ZeptoByte
    /// </summary>
    /// <param name="val">quantity measured in MilliByte</param>
    /// <returns>quantity measured in ZeptoByte</returns>
    public static Quantity<double, ZeptoByte> ToZeptoByte<T>(this BaseQuantity<T, MilliByte> val) where T:IConvertible {
        return new Quantity<double, ZeptoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E3)) * (1E21))
        );
    }
	/// <summary>
    /// Extension method to convert MilliByte to YoctoByte
    /// </summary>
    /// <param name="val">quantity measured in MilliByte</param>
    /// <returns>quantity measured in YoctoByte</returns>
    public static Quantity<double, YoctoByte> ToYoctoByte<T>(this BaseQuantity<T, MilliByte> val) where T:IConvertible {
        return new Quantity<double, YoctoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E3)) * (1E24))
        );
    }
	/// <summary>
    /// Extension method to convert MilliByte to YobiByte
    /// </summary>
    /// <param name="val">quantity measured in MilliByte</param>
    /// <returns>quantity measured in YobiByte</returns>
    public static Quantity<double, YobiByte> ToYobiByte<T>(this BaseQuantity<T, MilliByte> val) where T:IConvertible {
        return new Quantity<double, YobiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E3)) * (1.2089258e-24))
        );
    }
	/// <summary>
    /// Extension method to convert MilliByte to ZebiByte
    /// </summary>
    /// <param name="val">quantity measured in MilliByte</param>
    /// <returns>quantity measured in ZebiByte</returns>
    public static Quantity<double, ZebiByte> ToZebiByte<T>(this BaseQuantity<T, MilliByte> val) where T:IConvertible {
        return new Quantity<double, ZebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E3)) * (1.1805916e-21))
        );
    }
	/// <summary>
    /// Extension method to convert MilliByte to ExbiByte
    /// </summary>
    /// <param name="val">quantity measured in MilliByte</param>
    /// <returns>quantity measured in ExbiByte</returns>
    public static Quantity<double, ExbiByte> ToExbiByte<T>(this BaseQuantity<T, MilliByte> val) where T:IConvertible {
        return new Quantity<double, ExbiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E3)) * (1.1529215e-18))
        );
    }
	/// <summary>
    /// Extension method to convert MilliByte to PebiByte
    /// </summary>
    /// <param name="val">quantity measured in MilliByte</param>
    /// <returns>quantity measured in PebiByte</returns>
    public static Quantity<double, PebiByte> ToPebiByte<T>(this BaseQuantity<T, MilliByte> val) where T:IConvertible {
        return new Quantity<double, PebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E3)) * (1.1258999e-15))
        );
    }
	/// <summary>
    /// Extension method to convert MilliByte to TebiByte
    /// </summary>
    /// <param name="val">quantity measured in MilliByte</param>
    /// <returns>quantity measured in TebiByte</returns>
    public static Quantity<double, TebiByte> ToTebiByte<T>(this BaseQuantity<T, MilliByte> val) where T:IConvertible {
        return new Quantity<double, TebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E3)) * (1.0995116e-12))
        );
    }
	/// <summary>
    /// Extension method to convert MilliByte to GibiByte
    /// </summary>
    /// <param name="val">quantity measured in MilliByte</param>
    /// <returns>quantity measured in GibiByte</returns>
    public static Quantity<double, GibiByte> ToGibiByte<T>(this BaseQuantity<T, MilliByte> val) where T:IConvertible {
        return new Quantity<double, GibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E3)) * (1d/1073741824))
        );
    }
	/// <summary>
    /// Extension method to convert MilliByte to MebiByte
    /// </summary>
    /// <param name="val">quantity measured in MilliByte</param>
    /// <returns>quantity measured in MebiByte</returns>
    public static Quantity<double, MebiByte> ToMebiByte<T>(this BaseQuantity<T, MilliByte> val) where T:IConvertible {
        return new Quantity<double, MebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E3)) * (1d/1048576))
        );
    }
	/// <summary>
    /// Extension method to convert MilliByte to KibiByte
    /// </summary>
    /// <param name="val">quantity measured in MilliByte</param>
    /// <returns>quantity measured in KibiByte</returns>
    public static Quantity<double, KibiByte> ToKibiByte<T>(this BaseQuantity<T, MilliByte> val) where T:IConvertible {
        return new Quantity<double, KibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E3)) * (1d/1024))
        );
    }
	/// <summary>
    /// Extension method to convert Byte to MicroByte
    /// </summary>
    /// <param name="val">quantity measured in Byte</param>
    /// <returns>quantity measured in MicroByte</returns>
    public static Quantity<double, MicroByte> ToMicroByte<T>(this BaseQuantity<T, Byte> val) where T:IConvertible {
        return new Quantity<double, MicroByte>(
            Convert.ToDouble(val.Value) * (1E6)
        );
    }
	/// <summary>
    /// Extension method to convert MicroByte to Byte
    /// </summary>
    /// <param name="val">quantity measured in MicroByte</param>
    /// <returns>quantity measured in Byte</returns>
    public static Quantity<double, Byte> ToByte<T>(this BaseQuantity<T, MicroByte> val) where T:IConvertible {
        return new Quantity<double, Byte>(
            Convert.ToDouble(val.Value) * (1d/(1E6))
        );
    }
	/// <summary>
    /// Extension method to convert MicroByte to Bit
    /// </summary>
    /// <param name="val">quantity measured in MicroByte</param>
    /// <returns>quantity measured in Bit</returns>
    public static Quantity<double, Bit> ToBit<T>(this BaseQuantity<T, MicroByte> val) where T:IConvertible {
        return new Quantity<double, Bit>(
            Convert.ToDouble(val.Value) * ((1d/(1E6)) * (8))
        );
    }
	/// <summary>
    /// Extension method to convert MicroByte to YottaBit
    /// </summary>
    /// <param name="val">quantity measured in MicroByte</param>
    /// <returns>quantity measured in YottaBit</returns>
    public static Quantity<double, YottaBit> ToYottaBit<T>(this BaseQuantity<T, MicroByte> val) where T:IConvertible {
        return new Quantity<double, YottaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E6)) * (8*1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert MicroByte to ZettaBit
    /// </summary>
    /// <param name="val">quantity measured in MicroByte</param>
    /// <returns>quantity measured in ZettaBit</returns>
    public static Quantity<double, ZettaBit> ToZettaBit<T>(this BaseQuantity<T, MicroByte> val) where T:IConvertible {
        return new Quantity<double, ZettaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E6)) * (8*1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert MicroByte to ExaBit
    /// </summary>
    /// <param name="val">quantity measured in MicroByte</param>
    /// <returns>quantity measured in ExaBit</returns>
    public static Quantity<double, ExaBit> ToExaBit<T>(this BaseQuantity<T, MicroByte> val) where T:IConvertible {
        return new Quantity<double, ExaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E6)) * (8*1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert MicroByte to PetaBit
    /// </summary>
    /// <param name="val">quantity measured in MicroByte</param>
    /// <returns>quantity measured in PetaBit</returns>
    public static Quantity<double, PetaBit> ToPetaBit<T>(this BaseQuantity<T, MicroByte> val) where T:IConvertible {
        return new Quantity<double, PetaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E6)) * (8*1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert MicroByte to TeraBit
    /// </summary>
    /// <param name="val">quantity measured in MicroByte</param>
    /// <returns>quantity measured in TeraBit</returns>
    public static Quantity<double, TeraBit> ToTeraBit<T>(this BaseQuantity<T, MicroByte> val) where T:IConvertible {
        return new Quantity<double, TeraBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E6)) * (8*1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert MicroByte to GigaBit
    /// </summary>
    /// <param name="val">quantity measured in MicroByte</param>
    /// <returns>quantity measured in GigaBit</returns>
    public static Quantity<double, GigaBit> ToGigaBit<T>(this BaseQuantity<T, MicroByte> val) where T:IConvertible {
        return new Quantity<double, GigaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E6)) * (8*1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert MicroByte to MegaBit
    /// </summary>
    /// <param name="val">quantity measured in MicroByte</param>
    /// <returns>quantity measured in MegaBit</returns>
    public static Quantity<double, MegaBit> ToMegaBit<T>(this BaseQuantity<T, MicroByte> val) where T:IConvertible {
        return new Quantity<double, MegaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E6)) * (8*1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert MicroByte to KiloBit
    /// </summary>
    /// <param name="val">quantity measured in MicroByte</param>
    /// <returns>quantity measured in KiloBit</returns>
    public static Quantity<double, KiloBit> ToKiloBit<T>(this BaseQuantity<T, MicroByte> val) where T:IConvertible {
        return new Quantity<double, KiloBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E6)) * (8*1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert MicroByte to HectoBit
    /// </summary>
    /// <param name="val">quantity measured in MicroByte</param>
    /// <returns>quantity measured in HectoBit</returns>
    public static Quantity<double, HectoBit> ToHectoBit<T>(this BaseQuantity<T, MicroByte> val) where T:IConvertible {
        return new Quantity<double, HectoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E6)) * (8*1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert MicroByte to DekaBit
    /// </summary>
    /// <param name="val">quantity measured in MicroByte</param>
    /// <returns>quantity measured in DekaBit</returns>
    public static Quantity<double, DekaBit> ToDekaBit<T>(this BaseQuantity<T, MicroByte> val) where T:IConvertible {
        return new Quantity<double, DekaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E6)) * (8*1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert MicroByte to DeciBit
    /// </summary>
    /// <param name="val">quantity measured in MicroByte</param>
    /// <returns>quantity measured in DeciBit</returns>
    public static Quantity<double, DeciBit> ToDeciBit<T>(this BaseQuantity<T, MicroByte> val) where T:IConvertible {
        return new Quantity<double, DeciBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E6)) * (8*1E1))
        );
    }
	/// <summary>
    /// Extension method to convert MicroByte to CentiBit
    /// </summary>
    /// <param name="val">quantity measured in MicroByte</param>
    /// <returns>quantity measured in CentiBit</returns>
    public static Quantity<double, CentiBit> ToCentiBit<T>(this BaseQuantity<T, MicroByte> val) where T:IConvertible {
        return new Quantity<double, CentiBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E6)) * (8*1E2))
        );
    }
	/// <summary>
    /// Extension method to convert MicroByte to MilliBit
    /// </summary>
    /// <param name="val">quantity measured in MicroByte</param>
    /// <returns>quantity measured in MilliBit</returns>
    public static Quantity<double, MilliBit> ToMilliBit<T>(this BaseQuantity<T, MicroByte> val) where T:IConvertible {
        return new Quantity<double, MilliBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E6)) * (8*1E3))
        );
    }
	/// <summary>
    /// Extension method to convert MicroByte to MicroBit
    /// </summary>
    /// <param name="val">quantity measured in MicroByte</param>
    /// <returns>quantity measured in MicroBit</returns>
    public static Quantity<double, MicroBit> ToMicroBit<T>(this BaseQuantity<T, MicroByte> val) where T:IConvertible {
        return new Quantity<double, MicroBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E6)) * (8*1E6))
        );
    }
	/// <summary>
    /// Extension method to convert MicroByte to NanoBit
    /// </summary>
    /// <param name="val">quantity measured in MicroByte</param>
    /// <returns>quantity measured in NanoBit</returns>
    public static Quantity<double, NanoBit> ToNanoBit<T>(this BaseQuantity<T, MicroByte> val) where T:IConvertible {
        return new Quantity<double, NanoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E6)) * (8*1E9))
        );
    }
	/// <summary>
    /// Extension method to convert MicroByte to PicoBit
    /// </summary>
    /// <param name="val">quantity measured in MicroByte</param>
    /// <returns>quantity measured in PicoBit</returns>
    public static Quantity<double, PicoBit> ToPicoBit<T>(this BaseQuantity<T, MicroByte> val) where T:IConvertible {
        return new Quantity<double, PicoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E6)) * (8*1E12))
        );
    }
	/// <summary>
    /// Extension method to convert MicroByte to FemtoBit
    /// </summary>
    /// <param name="val">quantity measured in MicroByte</param>
    /// <returns>quantity measured in FemtoBit</returns>
    public static Quantity<double, FemtoBit> ToFemtoBit<T>(this BaseQuantity<T, MicroByte> val) where T:IConvertible {
        return new Quantity<double, FemtoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E6)) * (8*1E15))
        );
    }
	/// <summary>
    /// Extension method to convert MicroByte to AttoBit
    /// </summary>
    /// <param name="val">quantity measured in MicroByte</param>
    /// <returns>quantity measured in AttoBit</returns>
    public static Quantity<double, AttoBit> ToAttoBit<T>(this BaseQuantity<T, MicroByte> val) where T:IConvertible {
        return new Quantity<double, AttoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E6)) * (8*1E18))
        );
    }
	/// <summary>
    /// Extension method to convert MicroByte to ZeptoBit
    /// </summary>
    /// <param name="val">quantity measured in MicroByte</param>
    /// <returns>quantity measured in ZeptoBit</returns>
    public static Quantity<double, ZeptoBit> ToZeptoBit<T>(this BaseQuantity<T, MicroByte> val) where T:IConvertible {
        return new Quantity<double, ZeptoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E6)) * (8*1E21))
        );
    }
	/// <summary>
    /// Extension method to convert MicroByte to YoctoBit
    /// </summary>
    /// <param name="val">quantity measured in MicroByte</param>
    /// <returns>quantity measured in YoctoBit</returns>
    public static Quantity<double, YoctoBit> ToYoctoBit<T>(this BaseQuantity<T, MicroByte> val) where T:IConvertible {
        return new Quantity<double, YoctoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E6)) * (8*1E24))
        );
    }
	/// <summary>
    /// Extension method to convert MicroByte to YottaByte
    /// </summary>
    /// <param name="val">quantity measured in MicroByte</param>
    /// <returns>quantity measured in YottaByte</returns>
    public static Quantity<double, YottaByte> ToYottaByte<T>(this BaseQuantity<T, MicroByte> val) where T:IConvertible {
        return new Quantity<double, YottaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E6)) * (1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert MicroByte to ZettaByte
    /// </summary>
    /// <param name="val">quantity measured in MicroByte</param>
    /// <returns>quantity measured in ZettaByte</returns>
    public static Quantity<double, ZettaByte> ToZettaByte<T>(this BaseQuantity<T, MicroByte> val) where T:IConvertible {
        return new Quantity<double, ZettaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E6)) * (1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert MicroByte to ExaByte
    /// </summary>
    /// <param name="val">quantity measured in MicroByte</param>
    /// <returns>quantity measured in ExaByte</returns>
    public static Quantity<double, ExaByte> ToExaByte<T>(this BaseQuantity<T, MicroByte> val) where T:IConvertible {
        return new Quantity<double, ExaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E6)) * (1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert MicroByte to PetaByte
    /// </summary>
    /// <param name="val">quantity measured in MicroByte</param>
    /// <returns>quantity measured in PetaByte</returns>
    public static Quantity<double, PetaByte> ToPetaByte<T>(this BaseQuantity<T, MicroByte> val) where T:IConvertible {
        return new Quantity<double, PetaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E6)) * (1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert MicroByte to TeraByte
    /// </summary>
    /// <param name="val">quantity measured in MicroByte</param>
    /// <returns>quantity measured in TeraByte</returns>
    public static Quantity<double, TeraByte> ToTeraByte<T>(this BaseQuantity<T, MicroByte> val) where T:IConvertible {
        return new Quantity<double, TeraByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E6)) * (1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert MicroByte to GigaByte
    /// </summary>
    /// <param name="val">quantity measured in MicroByte</param>
    /// <returns>quantity measured in GigaByte</returns>
    public static Quantity<double, GigaByte> ToGigaByte<T>(this BaseQuantity<T, MicroByte> val) where T:IConvertible {
        return new Quantity<double, GigaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E6)) * (1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert MicroByte to MegaByte
    /// </summary>
    /// <param name="val">quantity measured in MicroByte</param>
    /// <returns>quantity measured in MegaByte</returns>
    public static Quantity<double, MegaByte> ToMegaByte<T>(this BaseQuantity<T, MicroByte> val) where T:IConvertible {
        return new Quantity<double, MegaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E6)) * (1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert MicroByte to KiloByte
    /// </summary>
    /// <param name="val">quantity measured in MicroByte</param>
    /// <returns>quantity measured in KiloByte</returns>
    public static Quantity<double, KiloByte> ToKiloByte<T>(this BaseQuantity<T, MicroByte> val) where T:IConvertible {
        return new Quantity<double, KiloByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E6)) * (1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert MicroByte to HectoByte
    /// </summary>
    /// <param name="val">quantity measured in MicroByte</param>
    /// <returns>quantity measured in HectoByte</returns>
    public static Quantity<double, HectoByte> ToHectoByte<T>(this BaseQuantity<T, MicroByte> val) where T:IConvertible {
        return new Quantity<double, HectoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E6)) * (1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert MicroByte to DekaByte
    /// </summary>
    /// <param name="val">quantity measured in MicroByte</param>
    /// <returns>quantity measured in DekaByte</returns>
    public static Quantity<double, DekaByte> ToDekaByte<T>(this BaseQuantity<T, MicroByte> val) where T:IConvertible {
        return new Quantity<double, DekaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E6)) * (1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert MicroByte to DeciByte
    /// </summary>
    /// <param name="val">quantity measured in MicroByte</param>
    /// <returns>quantity measured in DeciByte</returns>
    public static Quantity<double, DeciByte> ToDeciByte<T>(this BaseQuantity<T, MicroByte> val) where T:IConvertible {
        return new Quantity<double, DeciByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E6)) * (1E1))
        );
    }
	/// <summary>
    /// Extension method to convert MicroByte to CentiByte
    /// </summary>
    /// <param name="val">quantity measured in MicroByte</param>
    /// <returns>quantity measured in CentiByte</returns>
    public static Quantity<double, CentiByte> ToCentiByte<T>(this BaseQuantity<T, MicroByte> val) where T:IConvertible {
        return new Quantity<double, CentiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E6)) * (1E2))
        );
    }
	/// <summary>
    /// Extension method to convert MicroByte to MilliByte
    /// </summary>
    /// <param name="val">quantity measured in MicroByte</param>
    /// <returns>quantity measured in MilliByte</returns>
    public static Quantity<double, MilliByte> ToMilliByte<T>(this BaseQuantity<T, MicroByte> val) where T:IConvertible {
        return new Quantity<double, MilliByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E6)) * (1E3))
        );
    }
	/// <summary>
    /// Extension method to convert MicroByte to NanoByte
    /// </summary>
    /// <param name="val">quantity measured in MicroByte</param>
    /// <returns>quantity measured in NanoByte</returns>
    public static Quantity<double, NanoByte> ToNanoByte<T>(this BaseQuantity<T, MicroByte> val) where T:IConvertible {
        return new Quantity<double, NanoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E6)) * (1E9))
        );
    }
	/// <summary>
    /// Extension method to convert MicroByte to PicoByte
    /// </summary>
    /// <param name="val">quantity measured in MicroByte</param>
    /// <returns>quantity measured in PicoByte</returns>
    public static Quantity<double, PicoByte> ToPicoByte<T>(this BaseQuantity<T, MicroByte> val) where T:IConvertible {
        return new Quantity<double, PicoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E6)) * (1E12))
        );
    }
	/// <summary>
    /// Extension method to convert MicroByte to FemtoByte
    /// </summary>
    /// <param name="val">quantity measured in MicroByte</param>
    /// <returns>quantity measured in FemtoByte</returns>
    public static Quantity<double, FemtoByte> ToFemtoByte<T>(this BaseQuantity<T, MicroByte> val) where T:IConvertible {
        return new Quantity<double, FemtoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E6)) * (1E15))
        );
    }
	/// <summary>
    /// Extension method to convert MicroByte to AttoByte
    /// </summary>
    /// <param name="val">quantity measured in MicroByte</param>
    /// <returns>quantity measured in AttoByte</returns>
    public static Quantity<double, AttoByte> ToAttoByte<T>(this BaseQuantity<T, MicroByte> val) where T:IConvertible {
        return new Quantity<double, AttoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E6)) * (1E18))
        );
    }
	/// <summary>
    /// Extension method to convert MicroByte to ZeptoByte
    /// </summary>
    /// <param name="val">quantity measured in MicroByte</param>
    /// <returns>quantity measured in ZeptoByte</returns>
    public static Quantity<double, ZeptoByte> ToZeptoByte<T>(this BaseQuantity<T, MicroByte> val) where T:IConvertible {
        return new Quantity<double, ZeptoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E6)) * (1E21))
        );
    }
	/// <summary>
    /// Extension method to convert MicroByte to YoctoByte
    /// </summary>
    /// <param name="val">quantity measured in MicroByte</param>
    /// <returns>quantity measured in YoctoByte</returns>
    public static Quantity<double, YoctoByte> ToYoctoByte<T>(this BaseQuantity<T, MicroByte> val) where T:IConvertible {
        return new Quantity<double, YoctoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E6)) * (1E24))
        );
    }
	/// <summary>
    /// Extension method to convert MicroByte to YobiByte
    /// </summary>
    /// <param name="val">quantity measured in MicroByte</param>
    /// <returns>quantity measured in YobiByte</returns>
    public static Quantity<double, YobiByte> ToYobiByte<T>(this BaseQuantity<T, MicroByte> val) where T:IConvertible {
        return new Quantity<double, YobiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E6)) * (1.2089258e-24))
        );
    }
	/// <summary>
    /// Extension method to convert MicroByte to ZebiByte
    /// </summary>
    /// <param name="val">quantity measured in MicroByte</param>
    /// <returns>quantity measured in ZebiByte</returns>
    public static Quantity<double, ZebiByte> ToZebiByte<T>(this BaseQuantity<T, MicroByte> val) where T:IConvertible {
        return new Quantity<double, ZebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E6)) * (1.1805916e-21))
        );
    }
	/// <summary>
    /// Extension method to convert MicroByte to ExbiByte
    /// </summary>
    /// <param name="val">quantity measured in MicroByte</param>
    /// <returns>quantity measured in ExbiByte</returns>
    public static Quantity<double, ExbiByte> ToExbiByte<T>(this BaseQuantity<T, MicroByte> val) where T:IConvertible {
        return new Quantity<double, ExbiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E6)) * (1.1529215e-18))
        );
    }
	/// <summary>
    /// Extension method to convert MicroByte to PebiByte
    /// </summary>
    /// <param name="val">quantity measured in MicroByte</param>
    /// <returns>quantity measured in PebiByte</returns>
    public static Quantity<double, PebiByte> ToPebiByte<T>(this BaseQuantity<T, MicroByte> val) where T:IConvertible {
        return new Quantity<double, PebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E6)) * (1.1258999e-15))
        );
    }
	/// <summary>
    /// Extension method to convert MicroByte to TebiByte
    /// </summary>
    /// <param name="val">quantity measured in MicroByte</param>
    /// <returns>quantity measured in TebiByte</returns>
    public static Quantity<double, TebiByte> ToTebiByte<T>(this BaseQuantity<T, MicroByte> val) where T:IConvertible {
        return new Quantity<double, TebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E6)) * (1.0995116e-12))
        );
    }
	/// <summary>
    /// Extension method to convert MicroByte to GibiByte
    /// </summary>
    /// <param name="val">quantity measured in MicroByte</param>
    /// <returns>quantity measured in GibiByte</returns>
    public static Quantity<double, GibiByte> ToGibiByte<T>(this BaseQuantity<T, MicroByte> val) where T:IConvertible {
        return new Quantity<double, GibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E6)) * (1d/1073741824))
        );
    }
	/// <summary>
    /// Extension method to convert MicroByte to MebiByte
    /// </summary>
    /// <param name="val">quantity measured in MicroByte</param>
    /// <returns>quantity measured in MebiByte</returns>
    public static Quantity<double, MebiByte> ToMebiByte<T>(this BaseQuantity<T, MicroByte> val) where T:IConvertible {
        return new Quantity<double, MebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E6)) * (1d/1048576))
        );
    }
	/// <summary>
    /// Extension method to convert MicroByte to KibiByte
    /// </summary>
    /// <param name="val">quantity measured in MicroByte</param>
    /// <returns>quantity measured in KibiByte</returns>
    public static Quantity<double, KibiByte> ToKibiByte<T>(this BaseQuantity<T, MicroByte> val) where T:IConvertible {
        return new Quantity<double, KibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E6)) * (1d/1024))
        );
    }
	/// <summary>
    /// Extension method to convert Byte to NanoByte
    /// </summary>
    /// <param name="val">quantity measured in Byte</param>
    /// <returns>quantity measured in NanoByte</returns>
    public static Quantity<double, NanoByte> ToNanoByte<T>(this BaseQuantity<T, Byte> val) where T:IConvertible {
        return new Quantity<double, NanoByte>(
            Convert.ToDouble(val.Value) * (1E9)
        );
    }
	/// <summary>
    /// Extension method to convert NanoByte to Byte
    /// </summary>
    /// <param name="val">quantity measured in NanoByte</param>
    /// <returns>quantity measured in Byte</returns>
    public static Quantity<double, Byte> ToByte<T>(this BaseQuantity<T, NanoByte> val) where T:IConvertible {
        return new Quantity<double, Byte>(
            Convert.ToDouble(val.Value) * (1d/(1E9))
        );
    }
	/// <summary>
    /// Extension method to convert NanoByte to Bit
    /// </summary>
    /// <param name="val">quantity measured in NanoByte</param>
    /// <returns>quantity measured in Bit</returns>
    public static Quantity<double, Bit> ToBit<T>(this BaseQuantity<T, NanoByte> val) where T:IConvertible {
        return new Quantity<double, Bit>(
            Convert.ToDouble(val.Value) * ((1d/(1E9)) * (8))
        );
    }
	/// <summary>
    /// Extension method to convert NanoByte to YottaBit
    /// </summary>
    /// <param name="val">quantity measured in NanoByte</param>
    /// <returns>quantity measured in YottaBit</returns>
    public static Quantity<double, YottaBit> ToYottaBit<T>(this BaseQuantity<T, NanoByte> val) where T:IConvertible {
        return new Quantity<double, YottaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E9)) * (8*1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert NanoByte to ZettaBit
    /// </summary>
    /// <param name="val">quantity measured in NanoByte</param>
    /// <returns>quantity measured in ZettaBit</returns>
    public static Quantity<double, ZettaBit> ToZettaBit<T>(this BaseQuantity<T, NanoByte> val) where T:IConvertible {
        return new Quantity<double, ZettaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E9)) * (8*1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert NanoByte to ExaBit
    /// </summary>
    /// <param name="val">quantity measured in NanoByte</param>
    /// <returns>quantity measured in ExaBit</returns>
    public static Quantity<double, ExaBit> ToExaBit<T>(this BaseQuantity<T, NanoByte> val) where T:IConvertible {
        return new Quantity<double, ExaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E9)) * (8*1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert NanoByte to PetaBit
    /// </summary>
    /// <param name="val">quantity measured in NanoByte</param>
    /// <returns>quantity measured in PetaBit</returns>
    public static Quantity<double, PetaBit> ToPetaBit<T>(this BaseQuantity<T, NanoByte> val) where T:IConvertible {
        return new Quantity<double, PetaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E9)) * (8*1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert NanoByte to TeraBit
    /// </summary>
    /// <param name="val">quantity measured in NanoByte</param>
    /// <returns>quantity measured in TeraBit</returns>
    public static Quantity<double, TeraBit> ToTeraBit<T>(this BaseQuantity<T, NanoByte> val) where T:IConvertible {
        return new Quantity<double, TeraBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E9)) * (8*1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert NanoByte to GigaBit
    /// </summary>
    /// <param name="val">quantity measured in NanoByte</param>
    /// <returns>quantity measured in GigaBit</returns>
    public static Quantity<double, GigaBit> ToGigaBit<T>(this BaseQuantity<T, NanoByte> val) where T:IConvertible {
        return new Quantity<double, GigaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E9)) * (8*1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert NanoByte to MegaBit
    /// </summary>
    /// <param name="val">quantity measured in NanoByte</param>
    /// <returns>quantity measured in MegaBit</returns>
    public static Quantity<double, MegaBit> ToMegaBit<T>(this BaseQuantity<T, NanoByte> val) where T:IConvertible {
        return new Quantity<double, MegaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E9)) * (8*1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert NanoByte to KiloBit
    /// </summary>
    /// <param name="val">quantity measured in NanoByte</param>
    /// <returns>quantity measured in KiloBit</returns>
    public static Quantity<double, KiloBit> ToKiloBit<T>(this BaseQuantity<T, NanoByte> val) where T:IConvertible {
        return new Quantity<double, KiloBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E9)) * (8*1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert NanoByte to HectoBit
    /// </summary>
    /// <param name="val">quantity measured in NanoByte</param>
    /// <returns>quantity measured in HectoBit</returns>
    public static Quantity<double, HectoBit> ToHectoBit<T>(this BaseQuantity<T, NanoByte> val) where T:IConvertible {
        return new Quantity<double, HectoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E9)) * (8*1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert NanoByte to DekaBit
    /// </summary>
    /// <param name="val">quantity measured in NanoByte</param>
    /// <returns>quantity measured in DekaBit</returns>
    public static Quantity<double, DekaBit> ToDekaBit<T>(this BaseQuantity<T, NanoByte> val) where T:IConvertible {
        return new Quantity<double, DekaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E9)) * (8*1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert NanoByte to DeciBit
    /// </summary>
    /// <param name="val">quantity measured in NanoByte</param>
    /// <returns>quantity measured in DeciBit</returns>
    public static Quantity<double, DeciBit> ToDeciBit<T>(this BaseQuantity<T, NanoByte> val) where T:IConvertible {
        return new Quantity<double, DeciBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E9)) * (8*1E1))
        );
    }
	/// <summary>
    /// Extension method to convert NanoByte to CentiBit
    /// </summary>
    /// <param name="val">quantity measured in NanoByte</param>
    /// <returns>quantity measured in CentiBit</returns>
    public static Quantity<double, CentiBit> ToCentiBit<T>(this BaseQuantity<T, NanoByte> val) where T:IConvertible {
        return new Quantity<double, CentiBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E9)) * (8*1E2))
        );
    }
	/// <summary>
    /// Extension method to convert NanoByte to MilliBit
    /// </summary>
    /// <param name="val">quantity measured in NanoByte</param>
    /// <returns>quantity measured in MilliBit</returns>
    public static Quantity<double, MilliBit> ToMilliBit<T>(this BaseQuantity<T, NanoByte> val) where T:IConvertible {
        return new Quantity<double, MilliBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E9)) * (8*1E3))
        );
    }
	/// <summary>
    /// Extension method to convert NanoByte to MicroBit
    /// </summary>
    /// <param name="val">quantity measured in NanoByte</param>
    /// <returns>quantity measured in MicroBit</returns>
    public static Quantity<double, MicroBit> ToMicroBit<T>(this BaseQuantity<T, NanoByte> val) where T:IConvertible {
        return new Quantity<double, MicroBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E9)) * (8*1E6))
        );
    }
	/// <summary>
    /// Extension method to convert NanoByte to NanoBit
    /// </summary>
    /// <param name="val">quantity measured in NanoByte</param>
    /// <returns>quantity measured in NanoBit</returns>
    public static Quantity<double, NanoBit> ToNanoBit<T>(this BaseQuantity<T, NanoByte> val) where T:IConvertible {
        return new Quantity<double, NanoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E9)) * (8*1E9))
        );
    }
	/// <summary>
    /// Extension method to convert NanoByte to PicoBit
    /// </summary>
    /// <param name="val">quantity measured in NanoByte</param>
    /// <returns>quantity measured in PicoBit</returns>
    public static Quantity<double, PicoBit> ToPicoBit<T>(this BaseQuantity<T, NanoByte> val) where T:IConvertible {
        return new Quantity<double, PicoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E9)) * (8*1E12))
        );
    }
	/// <summary>
    /// Extension method to convert NanoByte to FemtoBit
    /// </summary>
    /// <param name="val">quantity measured in NanoByte</param>
    /// <returns>quantity measured in FemtoBit</returns>
    public static Quantity<double, FemtoBit> ToFemtoBit<T>(this BaseQuantity<T, NanoByte> val) where T:IConvertible {
        return new Quantity<double, FemtoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E9)) * (8*1E15))
        );
    }
	/// <summary>
    /// Extension method to convert NanoByte to AttoBit
    /// </summary>
    /// <param name="val">quantity measured in NanoByte</param>
    /// <returns>quantity measured in AttoBit</returns>
    public static Quantity<double, AttoBit> ToAttoBit<T>(this BaseQuantity<T, NanoByte> val) where T:IConvertible {
        return new Quantity<double, AttoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E9)) * (8*1E18))
        );
    }
	/// <summary>
    /// Extension method to convert NanoByte to ZeptoBit
    /// </summary>
    /// <param name="val">quantity measured in NanoByte</param>
    /// <returns>quantity measured in ZeptoBit</returns>
    public static Quantity<double, ZeptoBit> ToZeptoBit<T>(this BaseQuantity<T, NanoByte> val) where T:IConvertible {
        return new Quantity<double, ZeptoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E9)) * (8*1E21))
        );
    }
	/// <summary>
    /// Extension method to convert NanoByte to YoctoBit
    /// </summary>
    /// <param name="val">quantity measured in NanoByte</param>
    /// <returns>quantity measured in YoctoBit</returns>
    public static Quantity<double, YoctoBit> ToYoctoBit<T>(this BaseQuantity<T, NanoByte> val) where T:IConvertible {
        return new Quantity<double, YoctoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E9)) * (8*1E24))
        );
    }
	/// <summary>
    /// Extension method to convert NanoByte to YottaByte
    /// </summary>
    /// <param name="val">quantity measured in NanoByte</param>
    /// <returns>quantity measured in YottaByte</returns>
    public static Quantity<double, YottaByte> ToYottaByte<T>(this BaseQuantity<T, NanoByte> val) where T:IConvertible {
        return new Quantity<double, YottaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E9)) * (1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert NanoByte to ZettaByte
    /// </summary>
    /// <param name="val">quantity measured in NanoByte</param>
    /// <returns>quantity measured in ZettaByte</returns>
    public static Quantity<double, ZettaByte> ToZettaByte<T>(this BaseQuantity<T, NanoByte> val) where T:IConvertible {
        return new Quantity<double, ZettaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E9)) * (1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert NanoByte to ExaByte
    /// </summary>
    /// <param name="val">quantity measured in NanoByte</param>
    /// <returns>quantity measured in ExaByte</returns>
    public static Quantity<double, ExaByte> ToExaByte<T>(this BaseQuantity<T, NanoByte> val) where T:IConvertible {
        return new Quantity<double, ExaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E9)) * (1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert NanoByte to PetaByte
    /// </summary>
    /// <param name="val">quantity measured in NanoByte</param>
    /// <returns>quantity measured in PetaByte</returns>
    public static Quantity<double, PetaByte> ToPetaByte<T>(this BaseQuantity<T, NanoByte> val) where T:IConvertible {
        return new Quantity<double, PetaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E9)) * (1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert NanoByte to TeraByte
    /// </summary>
    /// <param name="val">quantity measured in NanoByte</param>
    /// <returns>quantity measured in TeraByte</returns>
    public static Quantity<double, TeraByte> ToTeraByte<T>(this BaseQuantity<T, NanoByte> val) where T:IConvertible {
        return new Quantity<double, TeraByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E9)) * (1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert NanoByte to GigaByte
    /// </summary>
    /// <param name="val">quantity measured in NanoByte</param>
    /// <returns>quantity measured in GigaByte</returns>
    public static Quantity<double, GigaByte> ToGigaByte<T>(this BaseQuantity<T, NanoByte> val) where T:IConvertible {
        return new Quantity<double, GigaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E9)) * (1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert NanoByte to MegaByte
    /// </summary>
    /// <param name="val">quantity measured in NanoByte</param>
    /// <returns>quantity measured in MegaByte</returns>
    public static Quantity<double, MegaByte> ToMegaByte<T>(this BaseQuantity<T, NanoByte> val) where T:IConvertible {
        return new Quantity<double, MegaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E9)) * (1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert NanoByte to KiloByte
    /// </summary>
    /// <param name="val">quantity measured in NanoByte</param>
    /// <returns>quantity measured in KiloByte</returns>
    public static Quantity<double, KiloByte> ToKiloByte<T>(this BaseQuantity<T, NanoByte> val) where T:IConvertible {
        return new Quantity<double, KiloByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E9)) * (1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert NanoByte to HectoByte
    /// </summary>
    /// <param name="val">quantity measured in NanoByte</param>
    /// <returns>quantity measured in HectoByte</returns>
    public static Quantity<double, HectoByte> ToHectoByte<T>(this BaseQuantity<T, NanoByte> val) where T:IConvertible {
        return new Quantity<double, HectoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E9)) * (1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert NanoByte to DekaByte
    /// </summary>
    /// <param name="val">quantity measured in NanoByte</param>
    /// <returns>quantity measured in DekaByte</returns>
    public static Quantity<double, DekaByte> ToDekaByte<T>(this BaseQuantity<T, NanoByte> val) where T:IConvertible {
        return new Quantity<double, DekaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E9)) * (1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert NanoByte to DeciByte
    /// </summary>
    /// <param name="val">quantity measured in NanoByte</param>
    /// <returns>quantity measured in DeciByte</returns>
    public static Quantity<double, DeciByte> ToDeciByte<T>(this BaseQuantity<T, NanoByte> val) where T:IConvertible {
        return new Quantity<double, DeciByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E9)) * (1E1))
        );
    }
	/// <summary>
    /// Extension method to convert NanoByte to CentiByte
    /// </summary>
    /// <param name="val">quantity measured in NanoByte</param>
    /// <returns>quantity measured in CentiByte</returns>
    public static Quantity<double, CentiByte> ToCentiByte<T>(this BaseQuantity<T, NanoByte> val) where T:IConvertible {
        return new Quantity<double, CentiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E9)) * (1E2))
        );
    }
	/// <summary>
    /// Extension method to convert NanoByte to MilliByte
    /// </summary>
    /// <param name="val">quantity measured in NanoByte</param>
    /// <returns>quantity measured in MilliByte</returns>
    public static Quantity<double, MilliByte> ToMilliByte<T>(this BaseQuantity<T, NanoByte> val) where T:IConvertible {
        return new Quantity<double, MilliByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E9)) * (1E3))
        );
    }
	/// <summary>
    /// Extension method to convert NanoByte to MicroByte
    /// </summary>
    /// <param name="val">quantity measured in NanoByte</param>
    /// <returns>quantity measured in MicroByte</returns>
    public static Quantity<double, MicroByte> ToMicroByte<T>(this BaseQuantity<T, NanoByte> val) where T:IConvertible {
        return new Quantity<double, MicroByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E9)) * (1E6))
        );
    }
	/// <summary>
    /// Extension method to convert NanoByte to PicoByte
    /// </summary>
    /// <param name="val">quantity measured in NanoByte</param>
    /// <returns>quantity measured in PicoByte</returns>
    public static Quantity<double, PicoByte> ToPicoByte<T>(this BaseQuantity<T, NanoByte> val) where T:IConvertible {
        return new Quantity<double, PicoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E9)) * (1E12))
        );
    }
	/// <summary>
    /// Extension method to convert NanoByte to FemtoByte
    /// </summary>
    /// <param name="val">quantity measured in NanoByte</param>
    /// <returns>quantity measured in FemtoByte</returns>
    public static Quantity<double, FemtoByte> ToFemtoByte<T>(this BaseQuantity<T, NanoByte> val) where T:IConvertible {
        return new Quantity<double, FemtoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E9)) * (1E15))
        );
    }
	/// <summary>
    /// Extension method to convert NanoByte to AttoByte
    /// </summary>
    /// <param name="val">quantity measured in NanoByte</param>
    /// <returns>quantity measured in AttoByte</returns>
    public static Quantity<double, AttoByte> ToAttoByte<T>(this BaseQuantity<T, NanoByte> val) where T:IConvertible {
        return new Quantity<double, AttoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E9)) * (1E18))
        );
    }
	/// <summary>
    /// Extension method to convert NanoByte to ZeptoByte
    /// </summary>
    /// <param name="val">quantity measured in NanoByte</param>
    /// <returns>quantity measured in ZeptoByte</returns>
    public static Quantity<double, ZeptoByte> ToZeptoByte<T>(this BaseQuantity<T, NanoByte> val) where T:IConvertible {
        return new Quantity<double, ZeptoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E9)) * (1E21))
        );
    }
	/// <summary>
    /// Extension method to convert NanoByte to YoctoByte
    /// </summary>
    /// <param name="val">quantity measured in NanoByte</param>
    /// <returns>quantity measured in YoctoByte</returns>
    public static Quantity<double, YoctoByte> ToYoctoByte<T>(this BaseQuantity<T, NanoByte> val) where T:IConvertible {
        return new Quantity<double, YoctoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E9)) * (1E24))
        );
    }
	/// <summary>
    /// Extension method to convert NanoByte to YobiByte
    /// </summary>
    /// <param name="val">quantity measured in NanoByte</param>
    /// <returns>quantity measured in YobiByte</returns>
    public static Quantity<double, YobiByte> ToYobiByte<T>(this BaseQuantity<T, NanoByte> val) where T:IConvertible {
        return new Quantity<double, YobiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E9)) * (1.2089258e-24))
        );
    }
	/// <summary>
    /// Extension method to convert NanoByte to ZebiByte
    /// </summary>
    /// <param name="val">quantity measured in NanoByte</param>
    /// <returns>quantity measured in ZebiByte</returns>
    public static Quantity<double, ZebiByte> ToZebiByte<T>(this BaseQuantity<T, NanoByte> val) where T:IConvertible {
        return new Quantity<double, ZebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E9)) * (1.1805916e-21))
        );
    }
	/// <summary>
    /// Extension method to convert NanoByte to ExbiByte
    /// </summary>
    /// <param name="val">quantity measured in NanoByte</param>
    /// <returns>quantity measured in ExbiByte</returns>
    public static Quantity<double, ExbiByte> ToExbiByte<T>(this BaseQuantity<T, NanoByte> val) where T:IConvertible {
        return new Quantity<double, ExbiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E9)) * (1.1529215e-18))
        );
    }
	/// <summary>
    /// Extension method to convert NanoByte to PebiByte
    /// </summary>
    /// <param name="val">quantity measured in NanoByte</param>
    /// <returns>quantity measured in PebiByte</returns>
    public static Quantity<double, PebiByte> ToPebiByte<T>(this BaseQuantity<T, NanoByte> val) where T:IConvertible {
        return new Quantity<double, PebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E9)) * (1.1258999e-15))
        );
    }
	/// <summary>
    /// Extension method to convert NanoByte to TebiByte
    /// </summary>
    /// <param name="val">quantity measured in NanoByte</param>
    /// <returns>quantity measured in TebiByte</returns>
    public static Quantity<double, TebiByte> ToTebiByte<T>(this BaseQuantity<T, NanoByte> val) where T:IConvertible {
        return new Quantity<double, TebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E9)) * (1.0995116e-12))
        );
    }
	/// <summary>
    /// Extension method to convert NanoByte to GibiByte
    /// </summary>
    /// <param name="val">quantity measured in NanoByte</param>
    /// <returns>quantity measured in GibiByte</returns>
    public static Quantity<double, GibiByte> ToGibiByte<T>(this BaseQuantity<T, NanoByte> val) where T:IConvertible {
        return new Quantity<double, GibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E9)) * (1d/1073741824))
        );
    }
	/// <summary>
    /// Extension method to convert NanoByte to MebiByte
    /// </summary>
    /// <param name="val">quantity measured in NanoByte</param>
    /// <returns>quantity measured in MebiByte</returns>
    public static Quantity<double, MebiByte> ToMebiByte<T>(this BaseQuantity<T, NanoByte> val) where T:IConvertible {
        return new Quantity<double, MebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E9)) * (1d/1048576))
        );
    }
	/// <summary>
    /// Extension method to convert NanoByte to KibiByte
    /// </summary>
    /// <param name="val">quantity measured in NanoByte</param>
    /// <returns>quantity measured in KibiByte</returns>
    public static Quantity<double, KibiByte> ToKibiByte<T>(this BaseQuantity<T, NanoByte> val) where T:IConvertible {
        return new Quantity<double, KibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E9)) * (1d/1024))
        );
    }
	/// <summary>
    /// Extension method to convert Byte to PicoByte
    /// </summary>
    /// <param name="val">quantity measured in Byte</param>
    /// <returns>quantity measured in PicoByte</returns>
    public static Quantity<double, PicoByte> ToPicoByte<T>(this BaseQuantity<T, Byte> val) where T:IConvertible {
        return new Quantity<double, PicoByte>(
            Convert.ToDouble(val.Value) * (1E12)
        );
    }
	/// <summary>
    /// Extension method to convert PicoByte to Byte
    /// </summary>
    /// <param name="val">quantity measured in PicoByte</param>
    /// <returns>quantity measured in Byte</returns>
    public static Quantity<double, Byte> ToByte<T>(this BaseQuantity<T, PicoByte> val) where T:IConvertible {
        return new Quantity<double, Byte>(
            Convert.ToDouble(val.Value) * (1d/(1E12))
        );
    }
	/// <summary>
    /// Extension method to convert PicoByte to Bit
    /// </summary>
    /// <param name="val">quantity measured in PicoByte</param>
    /// <returns>quantity measured in Bit</returns>
    public static Quantity<double, Bit> ToBit<T>(this BaseQuantity<T, PicoByte> val) where T:IConvertible {
        return new Quantity<double, Bit>(
            Convert.ToDouble(val.Value) * ((1d/(1E12)) * (8))
        );
    }
	/// <summary>
    /// Extension method to convert PicoByte to YottaBit
    /// </summary>
    /// <param name="val">quantity measured in PicoByte</param>
    /// <returns>quantity measured in YottaBit</returns>
    public static Quantity<double, YottaBit> ToYottaBit<T>(this BaseQuantity<T, PicoByte> val) where T:IConvertible {
        return new Quantity<double, YottaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E12)) * (8*1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert PicoByte to ZettaBit
    /// </summary>
    /// <param name="val">quantity measured in PicoByte</param>
    /// <returns>quantity measured in ZettaBit</returns>
    public static Quantity<double, ZettaBit> ToZettaBit<T>(this BaseQuantity<T, PicoByte> val) where T:IConvertible {
        return new Quantity<double, ZettaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E12)) * (8*1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert PicoByte to ExaBit
    /// </summary>
    /// <param name="val">quantity measured in PicoByte</param>
    /// <returns>quantity measured in ExaBit</returns>
    public static Quantity<double, ExaBit> ToExaBit<T>(this BaseQuantity<T, PicoByte> val) where T:IConvertible {
        return new Quantity<double, ExaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E12)) * (8*1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert PicoByte to PetaBit
    /// </summary>
    /// <param name="val">quantity measured in PicoByte</param>
    /// <returns>quantity measured in PetaBit</returns>
    public static Quantity<double, PetaBit> ToPetaBit<T>(this BaseQuantity<T, PicoByte> val) where T:IConvertible {
        return new Quantity<double, PetaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E12)) * (8*1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert PicoByte to TeraBit
    /// </summary>
    /// <param name="val">quantity measured in PicoByte</param>
    /// <returns>quantity measured in TeraBit</returns>
    public static Quantity<double, TeraBit> ToTeraBit<T>(this BaseQuantity<T, PicoByte> val) where T:IConvertible {
        return new Quantity<double, TeraBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E12)) * (8*1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert PicoByte to GigaBit
    /// </summary>
    /// <param name="val">quantity measured in PicoByte</param>
    /// <returns>quantity measured in GigaBit</returns>
    public static Quantity<double, GigaBit> ToGigaBit<T>(this BaseQuantity<T, PicoByte> val) where T:IConvertible {
        return new Quantity<double, GigaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E12)) * (8*1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert PicoByte to MegaBit
    /// </summary>
    /// <param name="val">quantity measured in PicoByte</param>
    /// <returns>quantity measured in MegaBit</returns>
    public static Quantity<double, MegaBit> ToMegaBit<T>(this BaseQuantity<T, PicoByte> val) where T:IConvertible {
        return new Quantity<double, MegaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E12)) * (8*1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert PicoByte to KiloBit
    /// </summary>
    /// <param name="val">quantity measured in PicoByte</param>
    /// <returns>quantity measured in KiloBit</returns>
    public static Quantity<double, KiloBit> ToKiloBit<T>(this BaseQuantity<T, PicoByte> val) where T:IConvertible {
        return new Quantity<double, KiloBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E12)) * (8*1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert PicoByte to HectoBit
    /// </summary>
    /// <param name="val">quantity measured in PicoByte</param>
    /// <returns>quantity measured in HectoBit</returns>
    public static Quantity<double, HectoBit> ToHectoBit<T>(this BaseQuantity<T, PicoByte> val) where T:IConvertible {
        return new Quantity<double, HectoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E12)) * (8*1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert PicoByte to DekaBit
    /// </summary>
    /// <param name="val">quantity measured in PicoByte</param>
    /// <returns>quantity measured in DekaBit</returns>
    public static Quantity<double, DekaBit> ToDekaBit<T>(this BaseQuantity<T, PicoByte> val) where T:IConvertible {
        return new Quantity<double, DekaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E12)) * (8*1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert PicoByte to DeciBit
    /// </summary>
    /// <param name="val">quantity measured in PicoByte</param>
    /// <returns>quantity measured in DeciBit</returns>
    public static Quantity<double, DeciBit> ToDeciBit<T>(this BaseQuantity<T, PicoByte> val) where T:IConvertible {
        return new Quantity<double, DeciBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E12)) * (8*1E1))
        );
    }
	/// <summary>
    /// Extension method to convert PicoByte to CentiBit
    /// </summary>
    /// <param name="val">quantity measured in PicoByte</param>
    /// <returns>quantity measured in CentiBit</returns>
    public static Quantity<double, CentiBit> ToCentiBit<T>(this BaseQuantity<T, PicoByte> val) where T:IConvertible {
        return new Quantity<double, CentiBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E12)) * (8*1E2))
        );
    }
	/// <summary>
    /// Extension method to convert PicoByte to MilliBit
    /// </summary>
    /// <param name="val">quantity measured in PicoByte</param>
    /// <returns>quantity measured in MilliBit</returns>
    public static Quantity<double, MilliBit> ToMilliBit<T>(this BaseQuantity<T, PicoByte> val) where T:IConvertible {
        return new Quantity<double, MilliBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E12)) * (8*1E3))
        );
    }
	/// <summary>
    /// Extension method to convert PicoByte to MicroBit
    /// </summary>
    /// <param name="val">quantity measured in PicoByte</param>
    /// <returns>quantity measured in MicroBit</returns>
    public static Quantity<double, MicroBit> ToMicroBit<T>(this BaseQuantity<T, PicoByte> val) where T:IConvertible {
        return new Quantity<double, MicroBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E12)) * (8*1E6))
        );
    }
	/// <summary>
    /// Extension method to convert PicoByte to NanoBit
    /// </summary>
    /// <param name="val">quantity measured in PicoByte</param>
    /// <returns>quantity measured in NanoBit</returns>
    public static Quantity<double, NanoBit> ToNanoBit<T>(this BaseQuantity<T, PicoByte> val) where T:IConvertible {
        return new Quantity<double, NanoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E12)) * (8*1E9))
        );
    }
	/// <summary>
    /// Extension method to convert PicoByte to PicoBit
    /// </summary>
    /// <param name="val">quantity measured in PicoByte</param>
    /// <returns>quantity measured in PicoBit</returns>
    public static Quantity<double, PicoBit> ToPicoBit<T>(this BaseQuantity<T, PicoByte> val) where T:IConvertible {
        return new Quantity<double, PicoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E12)) * (8*1E12))
        );
    }
	/// <summary>
    /// Extension method to convert PicoByte to FemtoBit
    /// </summary>
    /// <param name="val">quantity measured in PicoByte</param>
    /// <returns>quantity measured in FemtoBit</returns>
    public static Quantity<double, FemtoBit> ToFemtoBit<T>(this BaseQuantity<T, PicoByte> val) where T:IConvertible {
        return new Quantity<double, FemtoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E12)) * (8*1E15))
        );
    }
	/// <summary>
    /// Extension method to convert PicoByte to AttoBit
    /// </summary>
    /// <param name="val">quantity measured in PicoByte</param>
    /// <returns>quantity measured in AttoBit</returns>
    public static Quantity<double, AttoBit> ToAttoBit<T>(this BaseQuantity<T, PicoByte> val) where T:IConvertible {
        return new Quantity<double, AttoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E12)) * (8*1E18))
        );
    }
	/// <summary>
    /// Extension method to convert PicoByte to ZeptoBit
    /// </summary>
    /// <param name="val">quantity measured in PicoByte</param>
    /// <returns>quantity measured in ZeptoBit</returns>
    public static Quantity<double, ZeptoBit> ToZeptoBit<T>(this BaseQuantity<T, PicoByte> val) where T:IConvertible {
        return new Quantity<double, ZeptoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E12)) * (8*1E21))
        );
    }
	/// <summary>
    /// Extension method to convert PicoByte to YoctoBit
    /// </summary>
    /// <param name="val">quantity measured in PicoByte</param>
    /// <returns>quantity measured in YoctoBit</returns>
    public static Quantity<double, YoctoBit> ToYoctoBit<T>(this BaseQuantity<T, PicoByte> val) where T:IConvertible {
        return new Quantity<double, YoctoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E12)) * (8*1E24))
        );
    }
	/// <summary>
    /// Extension method to convert PicoByte to YottaByte
    /// </summary>
    /// <param name="val">quantity measured in PicoByte</param>
    /// <returns>quantity measured in YottaByte</returns>
    public static Quantity<double, YottaByte> ToYottaByte<T>(this BaseQuantity<T, PicoByte> val) where T:IConvertible {
        return new Quantity<double, YottaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E12)) * (1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert PicoByte to ZettaByte
    /// </summary>
    /// <param name="val">quantity measured in PicoByte</param>
    /// <returns>quantity measured in ZettaByte</returns>
    public static Quantity<double, ZettaByte> ToZettaByte<T>(this BaseQuantity<T, PicoByte> val) where T:IConvertible {
        return new Quantity<double, ZettaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E12)) * (1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert PicoByte to ExaByte
    /// </summary>
    /// <param name="val">quantity measured in PicoByte</param>
    /// <returns>quantity measured in ExaByte</returns>
    public static Quantity<double, ExaByte> ToExaByte<T>(this BaseQuantity<T, PicoByte> val) where T:IConvertible {
        return new Quantity<double, ExaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E12)) * (1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert PicoByte to PetaByte
    /// </summary>
    /// <param name="val">quantity measured in PicoByte</param>
    /// <returns>quantity measured in PetaByte</returns>
    public static Quantity<double, PetaByte> ToPetaByte<T>(this BaseQuantity<T, PicoByte> val) where T:IConvertible {
        return new Quantity<double, PetaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E12)) * (1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert PicoByte to TeraByte
    /// </summary>
    /// <param name="val">quantity measured in PicoByte</param>
    /// <returns>quantity measured in TeraByte</returns>
    public static Quantity<double, TeraByte> ToTeraByte<T>(this BaseQuantity<T, PicoByte> val) where T:IConvertible {
        return new Quantity<double, TeraByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E12)) * (1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert PicoByte to GigaByte
    /// </summary>
    /// <param name="val">quantity measured in PicoByte</param>
    /// <returns>quantity measured in GigaByte</returns>
    public static Quantity<double, GigaByte> ToGigaByte<T>(this BaseQuantity<T, PicoByte> val) where T:IConvertible {
        return new Quantity<double, GigaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E12)) * (1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert PicoByte to MegaByte
    /// </summary>
    /// <param name="val">quantity measured in PicoByte</param>
    /// <returns>quantity measured in MegaByte</returns>
    public static Quantity<double, MegaByte> ToMegaByte<T>(this BaseQuantity<T, PicoByte> val) where T:IConvertible {
        return new Quantity<double, MegaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E12)) * (1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert PicoByte to KiloByte
    /// </summary>
    /// <param name="val">quantity measured in PicoByte</param>
    /// <returns>quantity measured in KiloByte</returns>
    public static Quantity<double, KiloByte> ToKiloByte<T>(this BaseQuantity<T, PicoByte> val) where T:IConvertible {
        return new Quantity<double, KiloByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E12)) * (1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert PicoByte to HectoByte
    /// </summary>
    /// <param name="val">quantity measured in PicoByte</param>
    /// <returns>quantity measured in HectoByte</returns>
    public static Quantity<double, HectoByte> ToHectoByte<T>(this BaseQuantity<T, PicoByte> val) where T:IConvertible {
        return new Quantity<double, HectoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E12)) * (1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert PicoByte to DekaByte
    /// </summary>
    /// <param name="val">quantity measured in PicoByte</param>
    /// <returns>quantity measured in DekaByte</returns>
    public static Quantity<double, DekaByte> ToDekaByte<T>(this BaseQuantity<T, PicoByte> val) where T:IConvertible {
        return new Quantity<double, DekaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E12)) * (1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert PicoByte to DeciByte
    /// </summary>
    /// <param name="val">quantity measured in PicoByte</param>
    /// <returns>quantity measured in DeciByte</returns>
    public static Quantity<double, DeciByte> ToDeciByte<T>(this BaseQuantity<T, PicoByte> val) where T:IConvertible {
        return new Quantity<double, DeciByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E12)) * (1E1))
        );
    }
	/// <summary>
    /// Extension method to convert PicoByte to CentiByte
    /// </summary>
    /// <param name="val">quantity measured in PicoByte</param>
    /// <returns>quantity measured in CentiByte</returns>
    public static Quantity<double, CentiByte> ToCentiByte<T>(this BaseQuantity<T, PicoByte> val) where T:IConvertible {
        return new Quantity<double, CentiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E12)) * (1E2))
        );
    }
	/// <summary>
    /// Extension method to convert PicoByte to MilliByte
    /// </summary>
    /// <param name="val">quantity measured in PicoByte</param>
    /// <returns>quantity measured in MilliByte</returns>
    public static Quantity<double, MilliByte> ToMilliByte<T>(this BaseQuantity<T, PicoByte> val) where T:IConvertible {
        return new Quantity<double, MilliByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E12)) * (1E3))
        );
    }
	/// <summary>
    /// Extension method to convert PicoByte to MicroByte
    /// </summary>
    /// <param name="val">quantity measured in PicoByte</param>
    /// <returns>quantity measured in MicroByte</returns>
    public static Quantity<double, MicroByte> ToMicroByte<T>(this BaseQuantity<T, PicoByte> val) where T:IConvertible {
        return new Quantity<double, MicroByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E12)) * (1E6))
        );
    }
	/// <summary>
    /// Extension method to convert PicoByte to NanoByte
    /// </summary>
    /// <param name="val">quantity measured in PicoByte</param>
    /// <returns>quantity measured in NanoByte</returns>
    public static Quantity<double, NanoByte> ToNanoByte<T>(this BaseQuantity<T, PicoByte> val) where T:IConvertible {
        return new Quantity<double, NanoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E12)) * (1E9))
        );
    }
	/// <summary>
    /// Extension method to convert PicoByte to FemtoByte
    /// </summary>
    /// <param name="val">quantity measured in PicoByte</param>
    /// <returns>quantity measured in FemtoByte</returns>
    public static Quantity<double, FemtoByte> ToFemtoByte<T>(this BaseQuantity<T, PicoByte> val) where T:IConvertible {
        return new Quantity<double, FemtoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E12)) * (1E15))
        );
    }
	/// <summary>
    /// Extension method to convert PicoByte to AttoByte
    /// </summary>
    /// <param name="val">quantity measured in PicoByte</param>
    /// <returns>quantity measured in AttoByte</returns>
    public static Quantity<double, AttoByte> ToAttoByte<T>(this BaseQuantity<T, PicoByte> val) where T:IConvertible {
        return new Quantity<double, AttoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E12)) * (1E18))
        );
    }
	/// <summary>
    /// Extension method to convert PicoByte to ZeptoByte
    /// </summary>
    /// <param name="val">quantity measured in PicoByte</param>
    /// <returns>quantity measured in ZeptoByte</returns>
    public static Quantity<double, ZeptoByte> ToZeptoByte<T>(this BaseQuantity<T, PicoByte> val) where T:IConvertible {
        return new Quantity<double, ZeptoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E12)) * (1E21))
        );
    }
	/// <summary>
    /// Extension method to convert PicoByte to YoctoByte
    /// </summary>
    /// <param name="val">quantity measured in PicoByte</param>
    /// <returns>quantity measured in YoctoByte</returns>
    public static Quantity<double, YoctoByte> ToYoctoByte<T>(this BaseQuantity<T, PicoByte> val) where T:IConvertible {
        return new Quantity<double, YoctoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E12)) * (1E24))
        );
    }
	/// <summary>
    /// Extension method to convert PicoByte to YobiByte
    /// </summary>
    /// <param name="val">quantity measured in PicoByte</param>
    /// <returns>quantity measured in YobiByte</returns>
    public static Quantity<double, YobiByte> ToYobiByte<T>(this BaseQuantity<T, PicoByte> val) where T:IConvertible {
        return new Quantity<double, YobiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E12)) * (1.2089258e-24))
        );
    }
	/// <summary>
    /// Extension method to convert PicoByte to ZebiByte
    /// </summary>
    /// <param name="val">quantity measured in PicoByte</param>
    /// <returns>quantity measured in ZebiByte</returns>
    public static Quantity<double, ZebiByte> ToZebiByte<T>(this BaseQuantity<T, PicoByte> val) where T:IConvertible {
        return new Quantity<double, ZebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E12)) * (1.1805916e-21))
        );
    }
	/// <summary>
    /// Extension method to convert PicoByte to ExbiByte
    /// </summary>
    /// <param name="val">quantity measured in PicoByte</param>
    /// <returns>quantity measured in ExbiByte</returns>
    public static Quantity<double, ExbiByte> ToExbiByte<T>(this BaseQuantity<T, PicoByte> val) where T:IConvertible {
        return new Quantity<double, ExbiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E12)) * (1.1529215e-18))
        );
    }
	/// <summary>
    /// Extension method to convert PicoByte to PebiByte
    /// </summary>
    /// <param name="val">quantity measured in PicoByte</param>
    /// <returns>quantity measured in PebiByte</returns>
    public static Quantity<double, PebiByte> ToPebiByte<T>(this BaseQuantity<T, PicoByte> val) where T:IConvertible {
        return new Quantity<double, PebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E12)) * (1.1258999e-15))
        );
    }
	/// <summary>
    /// Extension method to convert PicoByte to TebiByte
    /// </summary>
    /// <param name="val">quantity measured in PicoByte</param>
    /// <returns>quantity measured in TebiByte</returns>
    public static Quantity<double, TebiByte> ToTebiByte<T>(this BaseQuantity<T, PicoByte> val) where T:IConvertible {
        return new Quantity<double, TebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E12)) * (1.0995116e-12))
        );
    }
	/// <summary>
    /// Extension method to convert PicoByte to GibiByte
    /// </summary>
    /// <param name="val">quantity measured in PicoByte</param>
    /// <returns>quantity measured in GibiByte</returns>
    public static Quantity<double, GibiByte> ToGibiByte<T>(this BaseQuantity<T, PicoByte> val) where T:IConvertible {
        return new Quantity<double, GibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E12)) * (1d/1073741824))
        );
    }
	/// <summary>
    /// Extension method to convert PicoByte to MebiByte
    /// </summary>
    /// <param name="val">quantity measured in PicoByte</param>
    /// <returns>quantity measured in MebiByte</returns>
    public static Quantity<double, MebiByte> ToMebiByte<T>(this BaseQuantity<T, PicoByte> val) where T:IConvertible {
        return new Quantity<double, MebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E12)) * (1d/1048576))
        );
    }
	/// <summary>
    /// Extension method to convert PicoByte to KibiByte
    /// </summary>
    /// <param name="val">quantity measured in PicoByte</param>
    /// <returns>quantity measured in KibiByte</returns>
    public static Quantity<double, KibiByte> ToKibiByte<T>(this BaseQuantity<T, PicoByte> val) where T:IConvertible {
        return new Quantity<double, KibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E12)) * (1d/1024))
        );
    }
	/// <summary>
    /// Extension method to convert Byte to FemtoByte
    /// </summary>
    /// <param name="val">quantity measured in Byte</param>
    /// <returns>quantity measured in FemtoByte</returns>
    public static Quantity<double, FemtoByte> ToFemtoByte<T>(this BaseQuantity<T, Byte> val) where T:IConvertible {
        return new Quantity<double, FemtoByte>(
            Convert.ToDouble(val.Value) * (1E15)
        );
    }
	/// <summary>
    /// Extension method to convert FemtoByte to Byte
    /// </summary>
    /// <param name="val">quantity measured in FemtoByte</param>
    /// <returns>quantity measured in Byte</returns>
    public static Quantity<double, Byte> ToByte<T>(this BaseQuantity<T, FemtoByte> val) where T:IConvertible {
        return new Quantity<double, Byte>(
            Convert.ToDouble(val.Value) * (1d/(1E15))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoByte to Bit
    /// </summary>
    /// <param name="val">quantity measured in FemtoByte</param>
    /// <returns>quantity measured in Bit</returns>
    public static Quantity<double, Bit> ToBit<T>(this BaseQuantity<T, FemtoByte> val) where T:IConvertible {
        return new Quantity<double, Bit>(
            Convert.ToDouble(val.Value) * ((1d/(1E15)) * (8))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoByte to YottaBit
    /// </summary>
    /// <param name="val">quantity measured in FemtoByte</param>
    /// <returns>quantity measured in YottaBit</returns>
    public static Quantity<double, YottaBit> ToYottaBit<T>(this BaseQuantity<T, FemtoByte> val) where T:IConvertible {
        return new Quantity<double, YottaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E15)) * (8*1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoByte to ZettaBit
    /// </summary>
    /// <param name="val">quantity measured in FemtoByte</param>
    /// <returns>quantity measured in ZettaBit</returns>
    public static Quantity<double, ZettaBit> ToZettaBit<T>(this BaseQuantity<T, FemtoByte> val) where T:IConvertible {
        return new Quantity<double, ZettaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E15)) * (8*1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoByte to ExaBit
    /// </summary>
    /// <param name="val">quantity measured in FemtoByte</param>
    /// <returns>quantity measured in ExaBit</returns>
    public static Quantity<double, ExaBit> ToExaBit<T>(this BaseQuantity<T, FemtoByte> val) where T:IConvertible {
        return new Quantity<double, ExaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E15)) * (8*1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoByte to PetaBit
    /// </summary>
    /// <param name="val">quantity measured in FemtoByte</param>
    /// <returns>quantity measured in PetaBit</returns>
    public static Quantity<double, PetaBit> ToPetaBit<T>(this BaseQuantity<T, FemtoByte> val) where T:IConvertible {
        return new Quantity<double, PetaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E15)) * (8*1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoByte to TeraBit
    /// </summary>
    /// <param name="val">quantity measured in FemtoByte</param>
    /// <returns>quantity measured in TeraBit</returns>
    public static Quantity<double, TeraBit> ToTeraBit<T>(this BaseQuantity<T, FemtoByte> val) where T:IConvertible {
        return new Quantity<double, TeraBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E15)) * (8*1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoByte to GigaBit
    /// </summary>
    /// <param name="val">quantity measured in FemtoByte</param>
    /// <returns>quantity measured in GigaBit</returns>
    public static Quantity<double, GigaBit> ToGigaBit<T>(this BaseQuantity<T, FemtoByte> val) where T:IConvertible {
        return new Quantity<double, GigaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E15)) * (8*1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoByte to MegaBit
    /// </summary>
    /// <param name="val">quantity measured in FemtoByte</param>
    /// <returns>quantity measured in MegaBit</returns>
    public static Quantity<double, MegaBit> ToMegaBit<T>(this BaseQuantity<T, FemtoByte> val) where T:IConvertible {
        return new Quantity<double, MegaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E15)) * (8*1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoByte to KiloBit
    /// </summary>
    /// <param name="val">quantity measured in FemtoByte</param>
    /// <returns>quantity measured in KiloBit</returns>
    public static Quantity<double, KiloBit> ToKiloBit<T>(this BaseQuantity<T, FemtoByte> val) where T:IConvertible {
        return new Quantity<double, KiloBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E15)) * (8*1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoByte to HectoBit
    /// </summary>
    /// <param name="val">quantity measured in FemtoByte</param>
    /// <returns>quantity measured in HectoBit</returns>
    public static Quantity<double, HectoBit> ToHectoBit<T>(this BaseQuantity<T, FemtoByte> val) where T:IConvertible {
        return new Quantity<double, HectoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E15)) * (8*1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoByte to DekaBit
    /// </summary>
    /// <param name="val">quantity measured in FemtoByte</param>
    /// <returns>quantity measured in DekaBit</returns>
    public static Quantity<double, DekaBit> ToDekaBit<T>(this BaseQuantity<T, FemtoByte> val) where T:IConvertible {
        return new Quantity<double, DekaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E15)) * (8*1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoByte to DeciBit
    /// </summary>
    /// <param name="val">quantity measured in FemtoByte</param>
    /// <returns>quantity measured in DeciBit</returns>
    public static Quantity<double, DeciBit> ToDeciBit<T>(this BaseQuantity<T, FemtoByte> val) where T:IConvertible {
        return new Quantity<double, DeciBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E15)) * (8*1E1))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoByte to CentiBit
    /// </summary>
    /// <param name="val">quantity measured in FemtoByte</param>
    /// <returns>quantity measured in CentiBit</returns>
    public static Quantity<double, CentiBit> ToCentiBit<T>(this BaseQuantity<T, FemtoByte> val) where T:IConvertible {
        return new Quantity<double, CentiBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E15)) * (8*1E2))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoByte to MilliBit
    /// </summary>
    /// <param name="val">quantity measured in FemtoByte</param>
    /// <returns>quantity measured in MilliBit</returns>
    public static Quantity<double, MilliBit> ToMilliBit<T>(this BaseQuantity<T, FemtoByte> val) where T:IConvertible {
        return new Quantity<double, MilliBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E15)) * (8*1E3))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoByte to MicroBit
    /// </summary>
    /// <param name="val">quantity measured in FemtoByte</param>
    /// <returns>quantity measured in MicroBit</returns>
    public static Quantity<double, MicroBit> ToMicroBit<T>(this BaseQuantity<T, FemtoByte> val) where T:IConvertible {
        return new Quantity<double, MicroBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E15)) * (8*1E6))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoByte to NanoBit
    /// </summary>
    /// <param name="val">quantity measured in FemtoByte</param>
    /// <returns>quantity measured in NanoBit</returns>
    public static Quantity<double, NanoBit> ToNanoBit<T>(this BaseQuantity<T, FemtoByte> val) where T:IConvertible {
        return new Quantity<double, NanoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E15)) * (8*1E9))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoByte to PicoBit
    /// </summary>
    /// <param name="val">quantity measured in FemtoByte</param>
    /// <returns>quantity measured in PicoBit</returns>
    public static Quantity<double, PicoBit> ToPicoBit<T>(this BaseQuantity<T, FemtoByte> val) where T:IConvertible {
        return new Quantity<double, PicoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E15)) * (8*1E12))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoByte to FemtoBit
    /// </summary>
    /// <param name="val">quantity measured in FemtoByte</param>
    /// <returns>quantity measured in FemtoBit</returns>
    public static Quantity<double, FemtoBit> ToFemtoBit<T>(this BaseQuantity<T, FemtoByte> val) where T:IConvertible {
        return new Quantity<double, FemtoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E15)) * (8*1E15))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoByte to AttoBit
    /// </summary>
    /// <param name="val">quantity measured in FemtoByte</param>
    /// <returns>quantity measured in AttoBit</returns>
    public static Quantity<double, AttoBit> ToAttoBit<T>(this BaseQuantity<T, FemtoByte> val) where T:IConvertible {
        return new Quantity<double, AttoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E15)) * (8*1E18))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoByte to ZeptoBit
    /// </summary>
    /// <param name="val">quantity measured in FemtoByte</param>
    /// <returns>quantity measured in ZeptoBit</returns>
    public static Quantity<double, ZeptoBit> ToZeptoBit<T>(this BaseQuantity<T, FemtoByte> val) where T:IConvertible {
        return new Quantity<double, ZeptoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E15)) * (8*1E21))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoByte to YoctoBit
    /// </summary>
    /// <param name="val">quantity measured in FemtoByte</param>
    /// <returns>quantity measured in YoctoBit</returns>
    public static Quantity<double, YoctoBit> ToYoctoBit<T>(this BaseQuantity<T, FemtoByte> val) where T:IConvertible {
        return new Quantity<double, YoctoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E15)) * (8*1E24))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoByte to YottaByte
    /// </summary>
    /// <param name="val">quantity measured in FemtoByte</param>
    /// <returns>quantity measured in YottaByte</returns>
    public static Quantity<double, YottaByte> ToYottaByte<T>(this BaseQuantity<T, FemtoByte> val) where T:IConvertible {
        return new Quantity<double, YottaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E15)) * (1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoByte to ZettaByte
    /// </summary>
    /// <param name="val">quantity measured in FemtoByte</param>
    /// <returns>quantity measured in ZettaByte</returns>
    public static Quantity<double, ZettaByte> ToZettaByte<T>(this BaseQuantity<T, FemtoByte> val) where T:IConvertible {
        return new Quantity<double, ZettaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E15)) * (1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoByte to ExaByte
    /// </summary>
    /// <param name="val">quantity measured in FemtoByte</param>
    /// <returns>quantity measured in ExaByte</returns>
    public static Quantity<double, ExaByte> ToExaByte<T>(this BaseQuantity<T, FemtoByte> val) where T:IConvertible {
        return new Quantity<double, ExaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E15)) * (1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoByte to PetaByte
    /// </summary>
    /// <param name="val">quantity measured in FemtoByte</param>
    /// <returns>quantity measured in PetaByte</returns>
    public static Quantity<double, PetaByte> ToPetaByte<T>(this BaseQuantity<T, FemtoByte> val) where T:IConvertible {
        return new Quantity<double, PetaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E15)) * (1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoByte to TeraByte
    /// </summary>
    /// <param name="val">quantity measured in FemtoByte</param>
    /// <returns>quantity measured in TeraByte</returns>
    public static Quantity<double, TeraByte> ToTeraByte<T>(this BaseQuantity<T, FemtoByte> val) where T:IConvertible {
        return new Quantity<double, TeraByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E15)) * (1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoByte to GigaByte
    /// </summary>
    /// <param name="val">quantity measured in FemtoByte</param>
    /// <returns>quantity measured in GigaByte</returns>
    public static Quantity<double, GigaByte> ToGigaByte<T>(this BaseQuantity<T, FemtoByte> val) where T:IConvertible {
        return new Quantity<double, GigaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E15)) * (1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoByte to MegaByte
    /// </summary>
    /// <param name="val">quantity measured in FemtoByte</param>
    /// <returns>quantity measured in MegaByte</returns>
    public static Quantity<double, MegaByte> ToMegaByte<T>(this BaseQuantity<T, FemtoByte> val) where T:IConvertible {
        return new Quantity<double, MegaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E15)) * (1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoByte to KiloByte
    /// </summary>
    /// <param name="val">quantity measured in FemtoByte</param>
    /// <returns>quantity measured in KiloByte</returns>
    public static Quantity<double, KiloByte> ToKiloByte<T>(this BaseQuantity<T, FemtoByte> val) where T:IConvertible {
        return new Quantity<double, KiloByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E15)) * (1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoByte to HectoByte
    /// </summary>
    /// <param name="val">quantity measured in FemtoByte</param>
    /// <returns>quantity measured in HectoByte</returns>
    public static Quantity<double, HectoByte> ToHectoByte<T>(this BaseQuantity<T, FemtoByte> val) where T:IConvertible {
        return new Quantity<double, HectoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E15)) * (1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoByte to DekaByte
    /// </summary>
    /// <param name="val">quantity measured in FemtoByte</param>
    /// <returns>quantity measured in DekaByte</returns>
    public static Quantity<double, DekaByte> ToDekaByte<T>(this BaseQuantity<T, FemtoByte> val) where T:IConvertible {
        return new Quantity<double, DekaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E15)) * (1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoByte to DeciByte
    /// </summary>
    /// <param name="val">quantity measured in FemtoByte</param>
    /// <returns>quantity measured in DeciByte</returns>
    public static Quantity<double, DeciByte> ToDeciByte<T>(this BaseQuantity<T, FemtoByte> val) where T:IConvertible {
        return new Quantity<double, DeciByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E15)) * (1E1))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoByte to CentiByte
    /// </summary>
    /// <param name="val">quantity measured in FemtoByte</param>
    /// <returns>quantity measured in CentiByte</returns>
    public static Quantity<double, CentiByte> ToCentiByte<T>(this BaseQuantity<T, FemtoByte> val) where T:IConvertible {
        return new Quantity<double, CentiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E15)) * (1E2))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoByte to MilliByte
    /// </summary>
    /// <param name="val">quantity measured in FemtoByte</param>
    /// <returns>quantity measured in MilliByte</returns>
    public static Quantity<double, MilliByte> ToMilliByte<T>(this BaseQuantity<T, FemtoByte> val) where T:IConvertible {
        return new Quantity<double, MilliByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E15)) * (1E3))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoByte to MicroByte
    /// </summary>
    /// <param name="val">quantity measured in FemtoByte</param>
    /// <returns>quantity measured in MicroByte</returns>
    public static Quantity<double, MicroByte> ToMicroByte<T>(this BaseQuantity<T, FemtoByte> val) where T:IConvertible {
        return new Quantity<double, MicroByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E15)) * (1E6))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoByte to NanoByte
    /// </summary>
    /// <param name="val">quantity measured in FemtoByte</param>
    /// <returns>quantity measured in NanoByte</returns>
    public static Quantity<double, NanoByte> ToNanoByte<T>(this BaseQuantity<T, FemtoByte> val) where T:IConvertible {
        return new Quantity<double, NanoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E15)) * (1E9))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoByte to PicoByte
    /// </summary>
    /// <param name="val">quantity measured in FemtoByte</param>
    /// <returns>quantity measured in PicoByte</returns>
    public static Quantity<double, PicoByte> ToPicoByte<T>(this BaseQuantity<T, FemtoByte> val) where T:IConvertible {
        return new Quantity<double, PicoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E15)) * (1E12))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoByte to AttoByte
    /// </summary>
    /// <param name="val">quantity measured in FemtoByte</param>
    /// <returns>quantity measured in AttoByte</returns>
    public static Quantity<double, AttoByte> ToAttoByte<T>(this BaseQuantity<T, FemtoByte> val) where T:IConvertible {
        return new Quantity<double, AttoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E15)) * (1E18))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoByte to ZeptoByte
    /// </summary>
    /// <param name="val">quantity measured in FemtoByte</param>
    /// <returns>quantity measured in ZeptoByte</returns>
    public static Quantity<double, ZeptoByte> ToZeptoByte<T>(this BaseQuantity<T, FemtoByte> val) where T:IConvertible {
        return new Quantity<double, ZeptoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E15)) * (1E21))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoByte to YoctoByte
    /// </summary>
    /// <param name="val">quantity measured in FemtoByte</param>
    /// <returns>quantity measured in YoctoByte</returns>
    public static Quantity<double, YoctoByte> ToYoctoByte<T>(this BaseQuantity<T, FemtoByte> val) where T:IConvertible {
        return new Quantity<double, YoctoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E15)) * (1E24))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoByte to YobiByte
    /// </summary>
    /// <param name="val">quantity measured in FemtoByte</param>
    /// <returns>quantity measured in YobiByte</returns>
    public static Quantity<double, YobiByte> ToYobiByte<T>(this BaseQuantity<T, FemtoByte> val) where T:IConvertible {
        return new Quantity<double, YobiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E15)) * (1.2089258e-24))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoByte to ZebiByte
    /// </summary>
    /// <param name="val">quantity measured in FemtoByte</param>
    /// <returns>quantity measured in ZebiByte</returns>
    public static Quantity<double, ZebiByte> ToZebiByte<T>(this BaseQuantity<T, FemtoByte> val) where T:IConvertible {
        return new Quantity<double, ZebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E15)) * (1.1805916e-21))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoByte to ExbiByte
    /// </summary>
    /// <param name="val">quantity measured in FemtoByte</param>
    /// <returns>quantity measured in ExbiByte</returns>
    public static Quantity<double, ExbiByte> ToExbiByte<T>(this BaseQuantity<T, FemtoByte> val) where T:IConvertible {
        return new Quantity<double, ExbiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E15)) * (1.1529215e-18))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoByte to PebiByte
    /// </summary>
    /// <param name="val">quantity measured in FemtoByte</param>
    /// <returns>quantity measured in PebiByte</returns>
    public static Quantity<double, PebiByte> ToPebiByte<T>(this BaseQuantity<T, FemtoByte> val) where T:IConvertible {
        return new Quantity<double, PebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E15)) * (1.1258999e-15))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoByte to TebiByte
    /// </summary>
    /// <param name="val">quantity measured in FemtoByte</param>
    /// <returns>quantity measured in TebiByte</returns>
    public static Quantity<double, TebiByte> ToTebiByte<T>(this BaseQuantity<T, FemtoByte> val) where T:IConvertible {
        return new Quantity<double, TebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E15)) * (1.0995116e-12))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoByte to GibiByte
    /// </summary>
    /// <param name="val">quantity measured in FemtoByte</param>
    /// <returns>quantity measured in GibiByte</returns>
    public static Quantity<double, GibiByte> ToGibiByte<T>(this BaseQuantity<T, FemtoByte> val) where T:IConvertible {
        return new Quantity<double, GibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E15)) * (1d/1073741824))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoByte to MebiByte
    /// </summary>
    /// <param name="val">quantity measured in FemtoByte</param>
    /// <returns>quantity measured in MebiByte</returns>
    public static Quantity<double, MebiByte> ToMebiByte<T>(this BaseQuantity<T, FemtoByte> val) where T:IConvertible {
        return new Quantity<double, MebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E15)) * (1d/1048576))
        );
    }
	/// <summary>
    /// Extension method to convert FemtoByte to KibiByte
    /// </summary>
    /// <param name="val">quantity measured in FemtoByte</param>
    /// <returns>quantity measured in KibiByte</returns>
    public static Quantity<double, KibiByte> ToKibiByte<T>(this BaseQuantity<T, FemtoByte> val) where T:IConvertible {
        return new Quantity<double, KibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E15)) * (1d/1024))
        );
    }
	/// <summary>
    /// Extension method to convert Byte to AttoByte
    /// </summary>
    /// <param name="val">quantity measured in Byte</param>
    /// <returns>quantity measured in AttoByte</returns>
    public static Quantity<double, AttoByte> ToAttoByte<T>(this BaseQuantity<T, Byte> val) where T:IConvertible {
        return new Quantity<double, AttoByte>(
            Convert.ToDouble(val.Value) * (1E18)
        );
    }
	/// <summary>
    /// Extension method to convert AttoByte to Byte
    /// </summary>
    /// <param name="val">quantity measured in AttoByte</param>
    /// <returns>quantity measured in Byte</returns>
    public static Quantity<double, Byte> ToByte<T>(this BaseQuantity<T, AttoByte> val) where T:IConvertible {
        return new Quantity<double, Byte>(
            Convert.ToDouble(val.Value) * (1d/(1E18))
        );
    }
	/// <summary>
    /// Extension method to convert AttoByte to Bit
    /// </summary>
    /// <param name="val">quantity measured in AttoByte</param>
    /// <returns>quantity measured in Bit</returns>
    public static Quantity<double, Bit> ToBit<T>(this BaseQuantity<T, AttoByte> val) where T:IConvertible {
        return new Quantity<double, Bit>(
            Convert.ToDouble(val.Value) * ((1d/(1E18)) * (8))
        );
    }
	/// <summary>
    /// Extension method to convert AttoByte to YottaBit
    /// </summary>
    /// <param name="val">quantity measured in AttoByte</param>
    /// <returns>quantity measured in YottaBit</returns>
    public static Quantity<double, YottaBit> ToYottaBit<T>(this BaseQuantity<T, AttoByte> val) where T:IConvertible {
        return new Quantity<double, YottaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E18)) * (8*1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert AttoByte to ZettaBit
    /// </summary>
    /// <param name="val">quantity measured in AttoByte</param>
    /// <returns>quantity measured in ZettaBit</returns>
    public static Quantity<double, ZettaBit> ToZettaBit<T>(this BaseQuantity<T, AttoByte> val) where T:IConvertible {
        return new Quantity<double, ZettaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E18)) * (8*1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert AttoByte to ExaBit
    /// </summary>
    /// <param name="val">quantity measured in AttoByte</param>
    /// <returns>quantity measured in ExaBit</returns>
    public static Quantity<double, ExaBit> ToExaBit<T>(this BaseQuantity<T, AttoByte> val) where T:IConvertible {
        return new Quantity<double, ExaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E18)) * (8*1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert AttoByte to PetaBit
    /// </summary>
    /// <param name="val">quantity measured in AttoByte</param>
    /// <returns>quantity measured in PetaBit</returns>
    public static Quantity<double, PetaBit> ToPetaBit<T>(this BaseQuantity<T, AttoByte> val) where T:IConvertible {
        return new Quantity<double, PetaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E18)) * (8*1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert AttoByte to TeraBit
    /// </summary>
    /// <param name="val">quantity measured in AttoByte</param>
    /// <returns>quantity measured in TeraBit</returns>
    public static Quantity<double, TeraBit> ToTeraBit<T>(this BaseQuantity<T, AttoByte> val) where T:IConvertible {
        return new Quantity<double, TeraBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E18)) * (8*1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert AttoByte to GigaBit
    /// </summary>
    /// <param name="val">quantity measured in AttoByte</param>
    /// <returns>quantity measured in GigaBit</returns>
    public static Quantity<double, GigaBit> ToGigaBit<T>(this BaseQuantity<T, AttoByte> val) where T:IConvertible {
        return new Quantity<double, GigaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E18)) * (8*1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert AttoByte to MegaBit
    /// </summary>
    /// <param name="val">quantity measured in AttoByte</param>
    /// <returns>quantity measured in MegaBit</returns>
    public static Quantity<double, MegaBit> ToMegaBit<T>(this BaseQuantity<T, AttoByte> val) where T:IConvertible {
        return new Quantity<double, MegaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E18)) * (8*1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert AttoByte to KiloBit
    /// </summary>
    /// <param name="val">quantity measured in AttoByte</param>
    /// <returns>quantity measured in KiloBit</returns>
    public static Quantity<double, KiloBit> ToKiloBit<T>(this BaseQuantity<T, AttoByte> val) where T:IConvertible {
        return new Quantity<double, KiloBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E18)) * (8*1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert AttoByte to HectoBit
    /// </summary>
    /// <param name="val">quantity measured in AttoByte</param>
    /// <returns>quantity measured in HectoBit</returns>
    public static Quantity<double, HectoBit> ToHectoBit<T>(this BaseQuantity<T, AttoByte> val) where T:IConvertible {
        return new Quantity<double, HectoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E18)) * (8*1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert AttoByte to DekaBit
    /// </summary>
    /// <param name="val">quantity measured in AttoByte</param>
    /// <returns>quantity measured in DekaBit</returns>
    public static Quantity<double, DekaBit> ToDekaBit<T>(this BaseQuantity<T, AttoByte> val) where T:IConvertible {
        return new Quantity<double, DekaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E18)) * (8*1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert AttoByte to DeciBit
    /// </summary>
    /// <param name="val">quantity measured in AttoByte</param>
    /// <returns>quantity measured in DeciBit</returns>
    public static Quantity<double, DeciBit> ToDeciBit<T>(this BaseQuantity<T, AttoByte> val) where T:IConvertible {
        return new Quantity<double, DeciBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E18)) * (8*1E1))
        );
    }
	/// <summary>
    /// Extension method to convert AttoByte to CentiBit
    /// </summary>
    /// <param name="val">quantity measured in AttoByte</param>
    /// <returns>quantity measured in CentiBit</returns>
    public static Quantity<double, CentiBit> ToCentiBit<T>(this BaseQuantity<T, AttoByte> val) where T:IConvertible {
        return new Quantity<double, CentiBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E18)) * (8*1E2))
        );
    }
	/// <summary>
    /// Extension method to convert AttoByte to MilliBit
    /// </summary>
    /// <param name="val">quantity measured in AttoByte</param>
    /// <returns>quantity measured in MilliBit</returns>
    public static Quantity<double, MilliBit> ToMilliBit<T>(this BaseQuantity<T, AttoByte> val) where T:IConvertible {
        return new Quantity<double, MilliBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E18)) * (8*1E3))
        );
    }
	/// <summary>
    /// Extension method to convert AttoByte to MicroBit
    /// </summary>
    /// <param name="val">quantity measured in AttoByte</param>
    /// <returns>quantity measured in MicroBit</returns>
    public static Quantity<double, MicroBit> ToMicroBit<T>(this BaseQuantity<T, AttoByte> val) where T:IConvertible {
        return new Quantity<double, MicroBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E18)) * (8*1E6))
        );
    }
	/// <summary>
    /// Extension method to convert AttoByte to NanoBit
    /// </summary>
    /// <param name="val">quantity measured in AttoByte</param>
    /// <returns>quantity measured in NanoBit</returns>
    public static Quantity<double, NanoBit> ToNanoBit<T>(this BaseQuantity<T, AttoByte> val) where T:IConvertible {
        return new Quantity<double, NanoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E18)) * (8*1E9))
        );
    }
	/// <summary>
    /// Extension method to convert AttoByte to PicoBit
    /// </summary>
    /// <param name="val">quantity measured in AttoByte</param>
    /// <returns>quantity measured in PicoBit</returns>
    public static Quantity<double, PicoBit> ToPicoBit<T>(this BaseQuantity<T, AttoByte> val) where T:IConvertible {
        return new Quantity<double, PicoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E18)) * (8*1E12))
        );
    }
	/// <summary>
    /// Extension method to convert AttoByte to FemtoBit
    /// </summary>
    /// <param name="val">quantity measured in AttoByte</param>
    /// <returns>quantity measured in FemtoBit</returns>
    public static Quantity<double, FemtoBit> ToFemtoBit<T>(this BaseQuantity<T, AttoByte> val) where T:IConvertible {
        return new Quantity<double, FemtoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E18)) * (8*1E15))
        );
    }
	/// <summary>
    /// Extension method to convert AttoByte to AttoBit
    /// </summary>
    /// <param name="val">quantity measured in AttoByte</param>
    /// <returns>quantity measured in AttoBit</returns>
    public static Quantity<double, AttoBit> ToAttoBit<T>(this BaseQuantity<T, AttoByte> val) where T:IConvertible {
        return new Quantity<double, AttoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E18)) * (8*1E18))
        );
    }
	/// <summary>
    /// Extension method to convert AttoByte to ZeptoBit
    /// </summary>
    /// <param name="val">quantity measured in AttoByte</param>
    /// <returns>quantity measured in ZeptoBit</returns>
    public static Quantity<double, ZeptoBit> ToZeptoBit<T>(this BaseQuantity<T, AttoByte> val) where T:IConvertible {
        return new Quantity<double, ZeptoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E18)) * (8*1E21))
        );
    }
	/// <summary>
    /// Extension method to convert AttoByte to YoctoBit
    /// </summary>
    /// <param name="val">quantity measured in AttoByte</param>
    /// <returns>quantity measured in YoctoBit</returns>
    public static Quantity<double, YoctoBit> ToYoctoBit<T>(this BaseQuantity<T, AttoByte> val) where T:IConvertible {
        return new Quantity<double, YoctoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E18)) * (8*1E24))
        );
    }
	/// <summary>
    /// Extension method to convert AttoByte to YottaByte
    /// </summary>
    /// <param name="val">quantity measured in AttoByte</param>
    /// <returns>quantity measured in YottaByte</returns>
    public static Quantity<double, YottaByte> ToYottaByte<T>(this BaseQuantity<T, AttoByte> val) where T:IConvertible {
        return new Quantity<double, YottaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E18)) * (1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert AttoByte to ZettaByte
    /// </summary>
    /// <param name="val">quantity measured in AttoByte</param>
    /// <returns>quantity measured in ZettaByte</returns>
    public static Quantity<double, ZettaByte> ToZettaByte<T>(this BaseQuantity<T, AttoByte> val) where T:IConvertible {
        return new Quantity<double, ZettaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E18)) * (1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert AttoByte to ExaByte
    /// </summary>
    /// <param name="val">quantity measured in AttoByte</param>
    /// <returns>quantity measured in ExaByte</returns>
    public static Quantity<double, ExaByte> ToExaByte<T>(this BaseQuantity<T, AttoByte> val) where T:IConvertible {
        return new Quantity<double, ExaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E18)) * (1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert AttoByte to PetaByte
    /// </summary>
    /// <param name="val">quantity measured in AttoByte</param>
    /// <returns>quantity measured in PetaByte</returns>
    public static Quantity<double, PetaByte> ToPetaByte<T>(this BaseQuantity<T, AttoByte> val) where T:IConvertible {
        return new Quantity<double, PetaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E18)) * (1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert AttoByte to TeraByte
    /// </summary>
    /// <param name="val">quantity measured in AttoByte</param>
    /// <returns>quantity measured in TeraByte</returns>
    public static Quantity<double, TeraByte> ToTeraByte<T>(this BaseQuantity<T, AttoByte> val) where T:IConvertible {
        return new Quantity<double, TeraByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E18)) * (1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert AttoByte to GigaByte
    /// </summary>
    /// <param name="val">quantity measured in AttoByte</param>
    /// <returns>quantity measured in GigaByte</returns>
    public static Quantity<double, GigaByte> ToGigaByte<T>(this BaseQuantity<T, AttoByte> val) where T:IConvertible {
        return new Quantity<double, GigaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E18)) * (1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert AttoByte to MegaByte
    /// </summary>
    /// <param name="val">quantity measured in AttoByte</param>
    /// <returns>quantity measured in MegaByte</returns>
    public static Quantity<double, MegaByte> ToMegaByte<T>(this BaseQuantity<T, AttoByte> val) where T:IConvertible {
        return new Quantity<double, MegaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E18)) * (1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert AttoByte to KiloByte
    /// </summary>
    /// <param name="val">quantity measured in AttoByte</param>
    /// <returns>quantity measured in KiloByte</returns>
    public static Quantity<double, KiloByte> ToKiloByte<T>(this BaseQuantity<T, AttoByte> val) where T:IConvertible {
        return new Quantity<double, KiloByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E18)) * (1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert AttoByte to HectoByte
    /// </summary>
    /// <param name="val">quantity measured in AttoByte</param>
    /// <returns>quantity measured in HectoByte</returns>
    public static Quantity<double, HectoByte> ToHectoByte<T>(this BaseQuantity<T, AttoByte> val) where T:IConvertible {
        return new Quantity<double, HectoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E18)) * (1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert AttoByte to DekaByte
    /// </summary>
    /// <param name="val">quantity measured in AttoByte</param>
    /// <returns>quantity measured in DekaByte</returns>
    public static Quantity<double, DekaByte> ToDekaByte<T>(this BaseQuantity<T, AttoByte> val) where T:IConvertible {
        return new Quantity<double, DekaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E18)) * (1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert AttoByte to DeciByte
    /// </summary>
    /// <param name="val">quantity measured in AttoByte</param>
    /// <returns>quantity measured in DeciByte</returns>
    public static Quantity<double, DeciByte> ToDeciByte<T>(this BaseQuantity<T, AttoByte> val) where T:IConvertible {
        return new Quantity<double, DeciByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E18)) * (1E1))
        );
    }
	/// <summary>
    /// Extension method to convert AttoByte to CentiByte
    /// </summary>
    /// <param name="val">quantity measured in AttoByte</param>
    /// <returns>quantity measured in CentiByte</returns>
    public static Quantity<double, CentiByte> ToCentiByte<T>(this BaseQuantity<T, AttoByte> val) where T:IConvertible {
        return new Quantity<double, CentiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E18)) * (1E2))
        );
    }
	/// <summary>
    /// Extension method to convert AttoByte to MilliByte
    /// </summary>
    /// <param name="val">quantity measured in AttoByte</param>
    /// <returns>quantity measured in MilliByte</returns>
    public static Quantity<double, MilliByte> ToMilliByte<T>(this BaseQuantity<T, AttoByte> val) where T:IConvertible {
        return new Quantity<double, MilliByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E18)) * (1E3))
        );
    }
	/// <summary>
    /// Extension method to convert AttoByte to MicroByte
    /// </summary>
    /// <param name="val">quantity measured in AttoByte</param>
    /// <returns>quantity measured in MicroByte</returns>
    public static Quantity<double, MicroByte> ToMicroByte<T>(this BaseQuantity<T, AttoByte> val) where T:IConvertible {
        return new Quantity<double, MicroByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E18)) * (1E6))
        );
    }
	/// <summary>
    /// Extension method to convert AttoByte to NanoByte
    /// </summary>
    /// <param name="val">quantity measured in AttoByte</param>
    /// <returns>quantity measured in NanoByte</returns>
    public static Quantity<double, NanoByte> ToNanoByte<T>(this BaseQuantity<T, AttoByte> val) where T:IConvertible {
        return new Quantity<double, NanoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E18)) * (1E9))
        );
    }
	/// <summary>
    /// Extension method to convert AttoByte to PicoByte
    /// </summary>
    /// <param name="val">quantity measured in AttoByte</param>
    /// <returns>quantity measured in PicoByte</returns>
    public static Quantity<double, PicoByte> ToPicoByte<T>(this BaseQuantity<T, AttoByte> val) where T:IConvertible {
        return new Quantity<double, PicoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E18)) * (1E12))
        );
    }
	/// <summary>
    /// Extension method to convert AttoByte to FemtoByte
    /// </summary>
    /// <param name="val">quantity measured in AttoByte</param>
    /// <returns>quantity measured in FemtoByte</returns>
    public static Quantity<double, FemtoByte> ToFemtoByte<T>(this BaseQuantity<T, AttoByte> val) where T:IConvertible {
        return new Quantity<double, FemtoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E18)) * (1E15))
        );
    }
	/// <summary>
    /// Extension method to convert AttoByte to ZeptoByte
    /// </summary>
    /// <param name="val">quantity measured in AttoByte</param>
    /// <returns>quantity measured in ZeptoByte</returns>
    public static Quantity<double, ZeptoByte> ToZeptoByte<T>(this BaseQuantity<T, AttoByte> val) where T:IConvertible {
        return new Quantity<double, ZeptoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E18)) * (1E21))
        );
    }
	/// <summary>
    /// Extension method to convert AttoByte to YoctoByte
    /// </summary>
    /// <param name="val">quantity measured in AttoByte</param>
    /// <returns>quantity measured in YoctoByte</returns>
    public static Quantity<double, YoctoByte> ToYoctoByte<T>(this BaseQuantity<T, AttoByte> val) where T:IConvertible {
        return new Quantity<double, YoctoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E18)) * (1E24))
        );
    }
	/// <summary>
    /// Extension method to convert AttoByte to YobiByte
    /// </summary>
    /// <param name="val">quantity measured in AttoByte</param>
    /// <returns>quantity measured in YobiByte</returns>
    public static Quantity<double, YobiByte> ToYobiByte<T>(this BaseQuantity<T, AttoByte> val) where T:IConvertible {
        return new Quantity<double, YobiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E18)) * (1.2089258e-24))
        );
    }
	/// <summary>
    /// Extension method to convert AttoByte to ZebiByte
    /// </summary>
    /// <param name="val">quantity measured in AttoByte</param>
    /// <returns>quantity measured in ZebiByte</returns>
    public static Quantity<double, ZebiByte> ToZebiByte<T>(this BaseQuantity<T, AttoByte> val) where T:IConvertible {
        return new Quantity<double, ZebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E18)) * (1.1805916e-21))
        );
    }
	/// <summary>
    /// Extension method to convert AttoByte to ExbiByte
    /// </summary>
    /// <param name="val">quantity measured in AttoByte</param>
    /// <returns>quantity measured in ExbiByte</returns>
    public static Quantity<double, ExbiByte> ToExbiByte<T>(this BaseQuantity<T, AttoByte> val) where T:IConvertible {
        return new Quantity<double, ExbiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E18)) * (1.1529215e-18))
        );
    }
	/// <summary>
    /// Extension method to convert AttoByte to PebiByte
    /// </summary>
    /// <param name="val">quantity measured in AttoByte</param>
    /// <returns>quantity measured in PebiByte</returns>
    public static Quantity<double, PebiByte> ToPebiByte<T>(this BaseQuantity<T, AttoByte> val) where T:IConvertible {
        return new Quantity<double, PebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E18)) * (1.1258999e-15))
        );
    }
	/// <summary>
    /// Extension method to convert AttoByte to TebiByte
    /// </summary>
    /// <param name="val">quantity measured in AttoByte</param>
    /// <returns>quantity measured in TebiByte</returns>
    public static Quantity<double, TebiByte> ToTebiByte<T>(this BaseQuantity<T, AttoByte> val) where T:IConvertible {
        return new Quantity<double, TebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E18)) * (1.0995116e-12))
        );
    }
	/// <summary>
    /// Extension method to convert AttoByte to GibiByte
    /// </summary>
    /// <param name="val">quantity measured in AttoByte</param>
    /// <returns>quantity measured in GibiByte</returns>
    public static Quantity<double, GibiByte> ToGibiByte<T>(this BaseQuantity<T, AttoByte> val) where T:IConvertible {
        return new Quantity<double, GibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E18)) * (1d/1073741824))
        );
    }
	/// <summary>
    /// Extension method to convert AttoByte to MebiByte
    /// </summary>
    /// <param name="val">quantity measured in AttoByte</param>
    /// <returns>quantity measured in MebiByte</returns>
    public static Quantity<double, MebiByte> ToMebiByte<T>(this BaseQuantity<T, AttoByte> val) where T:IConvertible {
        return new Quantity<double, MebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E18)) * (1d/1048576))
        );
    }
	/// <summary>
    /// Extension method to convert AttoByte to KibiByte
    /// </summary>
    /// <param name="val">quantity measured in AttoByte</param>
    /// <returns>quantity measured in KibiByte</returns>
    public static Quantity<double, KibiByte> ToKibiByte<T>(this BaseQuantity<T, AttoByte> val) where T:IConvertible {
        return new Quantity<double, KibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E18)) * (1d/1024))
        );
    }
	/// <summary>
    /// Extension method to convert Byte to ZeptoByte
    /// </summary>
    /// <param name="val">quantity measured in Byte</param>
    /// <returns>quantity measured in ZeptoByte</returns>
    public static Quantity<double, ZeptoByte> ToZeptoByte<T>(this BaseQuantity<T, Byte> val) where T:IConvertible {
        return new Quantity<double, ZeptoByte>(
            Convert.ToDouble(val.Value) * (1E21)
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoByte to Byte
    /// </summary>
    /// <param name="val">quantity measured in ZeptoByte</param>
    /// <returns>quantity measured in Byte</returns>
    public static Quantity<double, Byte> ToByte<T>(this BaseQuantity<T, ZeptoByte> val) where T:IConvertible {
        return new Quantity<double, Byte>(
            Convert.ToDouble(val.Value) * (1d/(1E21))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoByte to Bit
    /// </summary>
    /// <param name="val">quantity measured in ZeptoByte</param>
    /// <returns>quantity measured in Bit</returns>
    public static Quantity<double, Bit> ToBit<T>(this BaseQuantity<T, ZeptoByte> val) where T:IConvertible {
        return new Quantity<double, Bit>(
            Convert.ToDouble(val.Value) * ((1d/(1E21)) * (8))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoByte to YottaBit
    /// </summary>
    /// <param name="val">quantity measured in ZeptoByte</param>
    /// <returns>quantity measured in YottaBit</returns>
    public static Quantity<double, YottaBit> ToYottaBit<T>(this BaseQuantity<T, ZeptoByte> val) where T:IConvertible {
        return new Quantity<double, YottaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E21)) * (8*1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoByte to ZettaBit
    /// </summary>
    /// <param name="val">quantity measured in ZeptoByte</param>
    /// <returns>quantity measured in ZettaBit</returns>
    public static Quantity<double, ZettaBit> ToZettaBit<T>(this BaseQuantity<T, ZeptoByte> val) where T:IConvertible {
        return new Quantity<double, ZettaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E21)) * (8*1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoByte to ExaBit
    /// </summary>
    /// <param name="val">quantity measured in ZeptoByte</param>
    /// <returns>quantity measured in ExaBit</returns>
    public static Quantity<double, ExaBit> ToExaBit<T>(this BaseQuantity<T, ZeptoByte> val) where T:IConvertible {
        return new Quantity<double, ExaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E21)) * (8*1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoByte to PetaBit
    /// </summary>
    /// <param name="val">quantity measured in ZeptoByte</param>
    /// <returns>quantity measured in PetaBit</returns>
    public static Quantity<double, PetaBit> ToPetaBit<T>(this BaseQuantity<T, ZeptoByte> val) where T:IConvertible {
        return new Quantity<double, PetaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E21)) * (8*1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoByte to TeraBit
    /// </summary>
    /// <param name="val">quantity measured in ZeptoByte</param>
    /// <returns>quantity measured in TeraBit</returns>
    public static Quantity<double, TeraBit> ToTeraBit<T>(this BaseQuantity<T, ZeptoByte> val) where T:IConvertible {
        return new Quantity<double, TeraBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E21)) * (8*1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoByte to GigaBit
    /// </summary>
    /// <param name="val">quantity measured in ZeptoByte</param>
    /// <returns>quantity measured in GigaBit</returns>
    public static Quantity<double, GigaBit> ToGigaBit<T>(this BaseQuantity<T, ZeptoByte> val) where T:IConvertible {
        return new Quantity<double, GigaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E21)) * (8*1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoByte to MegaBit
    /// </summary>
    /// <param name="val">quantity measured in ZeptoByte</param>
    /// <returns>quantity measured in MegaBit</returns>
    public static Quantity<double, MegaBit> ToMegaBit<T>(this BaseQuantity<T, ZeptoByte> val) where T:IConvertible {
        return new Quantity<double, MegaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E21)) * (8*1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoByte to KiloBit
    /// </summary>
    /// <param name="val">quantity measured in ZeptoByte</param>
    /// <returns>quantity measured in KiloBit</returns>
    public static Quantity<double, KiloBit> ToKiloBit<T>(this BaseQuantity<T, ZeptoByte> val) where T:IConvertible {
        return new Quantity<double, KiloBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E21)) * (8*1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoByte to HectoBit
    /// </summary>
    /// <param name="val">quantity measured in ZeptoByte</param>
    /// <returns>quantity measured in HectoBit</returns>
    public static Quantity<double, HectoBit> ToHectoBit<T>(this BaseQuantity<T, ZeptoByte> val) where T:IConvertible {
        return new Quantity<double, HectoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E21)) * (8*1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoByte to DekaBit
    /// </summary>
    /// <param name="val">quantity measured in ZeptoByte</param>
    /// <returns>quantity measured in DekaBit</returns>
    public static Quantity<double, DekaBit> ToDekaBit<T>(this BaseQuantity<T, ZeptoByte> val) where T:IConvertible {
        return new Quantity<double, DekaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E21)) * (8*1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoByte to DeciBit
    /// </summary>
    /// <param name="val">quantity measured in ZeptoByte</param>
    /// <returns>quantity measured in DeciBit</returns>
    public static Quantity<double, DeciBit> ToDeciBit<T>(this BaseQuantity<T, ZeptoByte> val) where T:IConvertible {
        return new Quantity<double, DeciBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E21)) * (8*1E1))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoByte to CentiBit
    /// </summary>
    /// <param name="val">quantity measured in ZeptoByte</param>
    /// <returns>quantity measured in CentiBit</returns>
    public static Quantity<double, CentiBit> ToCentiBit<T>(this BaseQuantity<T, ZeptoByte> val) where T:IConvertible {
        return new Quantity<double, CentiBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E21)) * (8*1E2))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoByte to MilliBit
    /// </summary>
    /// <param name="val">quantity measured in ZeptoByte</param>
    /// <returns>quantity measured in MilliBit</returns>
    public static Quantity<double, MilliBit> ToMilliBit<T>(this BaseQuantity<T, ZeptoByte> val) where T:IConvertible {
        return new Quantity<double, MilliBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E21)) * (8*1E3))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoByte to MicroBit
    /// </summary>
    /// <param name="val">quantity measured in ZeptoByte</param>
    /// <returns>quantity measured in MicroBit</returns>
    public static Quantity<double, MicroBit> ToMicroBit<T>(this BaseQuantity<T, ZeptoByte> val) where T:IConvertible {
        return new Quantity<double, MicroBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E21)) * (8*1E6))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoByte to NanoBit
    /// </summary>
    /// <param name="val">quantity measured in ZeptoByte</param>
    /// <returns>quantity measured in NanoBit</returns>
    public static Quantity<double, NanoBit> ToNanoBit<T>(this BaseQuantity<T, ZeptoByte> val) where T:IConvertible {
        return new Quantity<double, NanoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E21)) * (8*1E9))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoByte to PicoBit
    /// </summary>
    /// <param name="val">quantity measured in ZeptoByte</param>
    /// <returns>quantity measured in PicoBit</returns>
    public static Quantity<double, PicoBit> ToPicoBit<T>(this BaseQuantity<T, ZeptoByte> val) where T:IConvertible {
        return new Quantity<double, PicoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E21)) * (8*1E12))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoByte to FemtoBit
    /// </summary>
    /// <param name="val">quantity measured in ZeptoByte</param>
    /// <returns>quantity measured in FemtoBit</returns>
    public static Quantity<double, FemtoBit> ToFemtoBit<T>(this BaseQuantity<T, ZeptoByte> val) where T:IConvertible {
        return new Quantity<double, FemtoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E21)) * (8*1E15))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoByte to AttoBit
    /// </summary>
    /// <param name="val">quantity measured in ZeptoByte</param>
    /// <returns>quantity measured in AttoBit</returns>
    public static Quantity<double, AttoBit> ToAttoBit<T>(this BaseQuantity<T, ZeptoByte> val) where T:IConvertible {
        return new Quantity<double, AttoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E21)) * (8*1E18))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoByte to ZeptoBit
    /// </summary>
    /// <param name="val">quantity measured in ZeptoByte</param>
    /// <returns>quantity measured in ZeptoBit</returns>
    public static Quantity<double, ZeptoBit> ToZeptoBit<T>(this BaseQuantity<T, ZeptoByte> val) where T:IConvertible {
        return new Quantity<double, ZeptoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E21)) * (8*1E21))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoByte to YoctoBit
    /// </summary>
    /// <param name="val">quantity measured in ZeptoByte</param>
    /// <returns>quantity measured in YoctoBit</returns>
    public static Quantity<double, YoctoBit> ToYoctoBit<T>(this BaseQuantity<T, ZeptoByte> val) where T:IConvertible {
        return new Quantity<double, YoctoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E21)) * (8*1E24))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoByte to YottaByte
    /// </summary>
    /// <param name="val">quantity measured in ZeptoByte</param>
    /// <returns>quantity measured in YottaByte</returns>
    public static Quantity<double, YottaByte> ToYottaByte<T>(this BaseQuantity<T, ZeptoByte> val) where T:IConvertible {
        return new Quantity<double, YottaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E21)) * (1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoByte to ZettaByte
    /// </summary>
    /// <param name="val">quantity measured in ZeptoByte</param>
    /// <returns>quantity measured in ZettaByte</returns>
    public static Quantity<double, ZettaByte> ToZettaByte<T>(this BaseQuantity<T, ZeptoByte> val) where T:IConvertible {
        return new Quantity<double, ZettaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E21)) * (1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoByte to ExaByte
    /// </summary>
    /// <param name="val">quantity measured in ZeptoByte</param>
    /// <returns>quantity measured in ExaByte</returns>
    public static Quantity<double, ExaByte> ToExaByte<T>(this BaseQuantity<T, ZeptoByte> val) where T:IConvertible {
        return new Quantity<double, ExaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E21)) * (1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoByte to PetaByte
    /// </summary>
    /// <param name="val">quantity measured in ZeptoByte</param>
    /// <returns>quantity measured in PetaByte</returns>
    public static Quantity<double, PetaByte> ToPetaByte<T>(this BaseQuantity<T, ZeptoByte> val) where T:IConvertible {
        return new Quantity<double, PetaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E21)) * (1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoByte to TeraByte
    /// </summary>
    /// <param name="val">quantity measured in ZeptoByte</param>
    /// <returns>quantity measured in TeraByte</returns>
    public static Quantity<double, TeraByte> ToTeraByte<T>(this BaseQuantity<T, ZeptoByte> val) where T:IConvertible {
        return new Quantity<double, TeraByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E21)) * (1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoByte to GigaByte
    /// </summary>
    /// <param name="val">quantity measured in ZeptoByte</param>
    /// <returns>quantity measured in GigaByte</returns>
    public static Quantity<double, GigaByte> ToGigaByte<T>(this BaseQuantity<T, ZeptoByte> val) where T:IConvertible {
        return new Quantity<double, GigaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E21)) * (1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoByte to MegaByte
    /// </summary>
    /// <param name="val">quantity measured in ZeptoByte</param>
    /// <returns>quantity measured in MegaByte</returns>
    public static Quantity<double, MegaByte> ToMegaByte<T>(this BaseQuantity<T, ZeptoByte> val) where T:IConvertible {
        return new Quantity<double, MegaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E21)) * (1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoByte to KiloByte
    /// </summary>
    /// <param name="val">quantity measured in ZeptoByte</param>
    /// <returns>quantity measured in KiloByte</returns>
    public static Quantity<double, KiloByte> ToKiloByte<T>(this BaseQuantity<T, ZeptoByte> val) where T:IConvertible {
        return new Quantity<double, KiloByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E21)) * (1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoByte to HectoByte
    /// </summary>
    /// <param name="val">quantity measured in ZeptoByte</param>
    /// <returns>quantity measured in HectoByte</returns>
    public static Quantity<double, HectoByte> ToHectoByte<T>(this BaseQuantity<T, ZeptoByte> val) where T:IConvertible {
        return new Quantity<double, HectoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E21)) * (1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoByte to DekaByte
    /// </summary>
    /// <param name="val">quantity measured in ZeptoByte</param>
    /// <returns>quantity measured in DekaByte</returns>
    public static Quantity<double, DekaByte> ToDekaByte<T>(this BaseQuantity<T, ZeptoByte> val) where T:IConvertible {
        return new Quantity<double, DekaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E21)) * (1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoByte to DeciByte
    /// </summary>
    /// <param name="val">quantity measured in ZeptoByte</param>
    /// <returns>quantity measured in DeciByte</returns>
    public static Quantity<double, DeciByte> ToDeciByte<T>(this BaseQuantity<T, ZeptoByte> val) where T:IConvertible {
        return new Quantity<double, DeciByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E21)) * (1E1))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoByte to CentiByte
    /// </summary>
    /// <param name="val">quantity measured in ZeptoByte</param>
    /// <returns>quantity measured in CentiByte</returns>
    public static Quantity<double, CentiByte> ToCentiByte<T>(this BaseQuantity<T, ZeptoByte> val) where T:IConvertible {
        return new Quantity<double, CentiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E21)) * (1E2))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoByte to MilliByte
    /// </summary>
    /// <param name="val">quantity measured in ZeptoByte</param>
    /// <returns>quantity measured in MilliByte</returns>
    public static Quantity<double, MilliByte> ToMilliByte<T>(this BaseQuantity<T, ZeptoByte> val) where T:IConvertible {
        return new Quantity<double, MilliByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E21)) * (1E3))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoByte to MicroByte
    /// </summary>
    /// <param name="val">quantity measured in ZeptoByte</param>
    /// <returns>quantity measured in MicroByte</returns>
    public static Quantity<double, MicroByte> ToMicroByte<T>(this BaseQuantity<T, ZeptoByte> val) where T:IConvertible {
        return new Quantity<double, MicroByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E21)) * (1E6))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoByte to NanoByte
    /// </summary>
    /// <param name="val">quantity measured in ZeptoByte</param>
    /// <returns>quantity measured in NanoByte</returns>
    public static Quantity<double, NanoByte> ToNanoByte<T>(this BaseQuantity<T, ZeptoByte> val) where T:IConvertible {
        return new Quantity<double, NanoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E21)) * (1E9))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoByte to PicoByte
    /// </summary>
    /// <param name="val">quantity measured in ZeptoByte</param>
    /// <returns>quantity measured in PicoByte</returns>
    public static Quantity<double, PicoByte> ToPicoByte<T>(this BaseQuantity<T, ZeptoByte> val) where T:IConvertible {
        return new Quantity<double, PicoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E21)) * (1E12))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoByte to FemtoByte
    /// </summary>
    /// <param name="val">quantity measured in ZeptoByte</param>
    /// <returns>quantity measured in FemtoByte</returns>
    public static Quantity<double, FemtoByte> ToFemtoByte<T>(this BaseQuantity<T, ZeptoByte> val) where T:IConvertible {
        return new Quantity<double, FemtoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E21)) * (1E15))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoByte to AttoByte
    /// </summary>
    /// <param name="val">quantity measured in ZeptoByte</param>
    /// <returns>quantity measured in AttoByte</returns>
    public static Quantity<double, AttoByte> ToAttoByte<T>(this BaseQuantity<T, ZeptoByte> val) where T:IConvertible {
        return new Quantity<double, AttoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E21)) * (1E18))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoByte to YoctoByte
    /// </summary>
    /// <param name="val">quantity measured in ZeptoByte</param>
    /// <returns>quantity measured in YoctoByte</returns>
    public static Quantity<double, YoctoByte> ToYoctoByte<T>(this BaseQuantity<T, ZeptoByte> val) where T:IConvertible {
        return new Quantity<double, YoctoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E21)) * (1E24))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoByte to YobiByte
    /// </summary>
    /// <param name="val">quantity measured in ZeptoByte</param>
    /// <returns>quantity measured in YobiByte</returns>
    public static Quantity<double, YobiByte> ToYobiByte<T>(this BaseQuantity<T, ZeptoByte> val) where T:IConvertible {
        return new Quantity<double, YobiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E21)) * (1.2089258e-24))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoByte to ZebiByte
    /// </summary>
    /// <param name="val">quantity measured in ZeptoByte</param>
    /// <returns>quantity measured in ZebiByte</returns>
    public static Quantity<double, ZebiByte> ToZebiByte<T>(this BaseQuantity<T, ZeptoByte> val) where T:IConvertible {
        return new Quantity<double, ZebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E21)) * (1.1805916e-21))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoByte to ExbiByte
    /// </summary>
    /// <param name="val">quantity measured in ZeptoByte</param>
    /// <returns>quantity measured in ExbiByte</returns>
    public static Quantity<double, ExbiByte> ToExbiByte<T>(this BaseQuantity<T, ZeptoByte> val) where T:IConvertible {
        return new Quantity<double, ExbiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E21)) * (1.1529215e-18))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoByte to PebiByte
    /// </summary>
    /// <param name="val">quantity measured in ZeptoByte</param>
    /// <returns>quantity measured in PebiByte</returns>
    public static Quantity<double, PebiByte> ToPebiByte<T>(this BaseQuantity<T, ZeptoByte> val) where T:IConvertible {
        return new Quantity<double, PebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E21)) * (1.1258999e-15))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoByte to TebiByte
    /// </summary>
    /// <param name="val">quantity measured in ZeptoByte</param>
    /// <returns>quantity measured in TebiByte</returns>
    public static Quantity<double, TebiByte> ToTebiByte<T>(this BaseQuantity<T, ZeptoByte> val) where T:IConvertible {
        return new Quantity<double, TebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E21)) * (1.0995116e-12))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoByte to GibiByte
    /// </summary>
    /// <param name="val">quantity measured in ZeptoByte</param>
    /// <returns>quantity measured in GibiByte</returns>
    public static Quantity<double, GibiByte> ToGibiByte<T>(this BaseQuantity<T, ZeptoByte> val) where T:IConvertible {
        return new Quantity<double, GibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E21)) * (1d/1073741824))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoByte to MebiByte
    /// </summary>
    /// <param name="val">quantity measured in ZeptoByte</param>
    /// <returns>quantity measured in MebiByte</returns>
    public static Quantity<double, MebiByte> ToMebiByte<T>(this BaseQuantity<T, ZeptoByte> val) where T:IConvertible {
        return new Quantity<double, MebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E21)) * (1d/1048576))
        );
    }
	/// <summary>
    /// Extension method to convert ZeptoByte to KibiByte
    /// </summary>
    /// <param name="val">quantity measured in ZeptoByte</param>
    /// <returns>quantity measured in KibiByte</returns>
    public static Quantity<double, KibiByte> ToKibiByte<T>(this BaseQuantity<T, ZeptoByte> val) where T:IConvertible {
        return new Quantity<double, KibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E21)) * (1d/1024))
        );
    }
	/// <summary>
    /// Extension method to convert Byte to YoctoByte
    /// </summary>
    /// <param name="val">quantity measured in Byte</param>
    /// <returns>quantity measured in YoctoByte</returns>
    public static Quantity<double, YoctoByte> ToYoctoByte<T>(this BaseQuantity<T, Byte> val) where T:IConvertible {
        return new Quantity<double, YoctoByte>(
            Convert.ToDouble(val.Value) * (1E24)
        );
    }
	/// <summary>
    /// Extension method to convert YoctoByte to Byte
    /// </summary>
    /// <param name="val">quantity measured in YoctoByte</param>
    /// <returns>quantity measured in Byte</returns>
    public static Quantity<double, Byte> ToByte<T>(this BaseQuantity<T, YoctoByte> val) where T:IConvertible {
        return new Quantity<double, Byte>(
            Convert.ToDouble(val.Value) * (1d/(1E24))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoByte to Bit
    /// </summary>
    /// <param name="val">quantity measured in YoctoByte</param>
    /// <returns>quantity measured in Bit</returns>
    public static Quantity<double, Bit> ToBit<T>(this BaseQuantity<T, YoctoByte> val) where T:IConvertible {
        return new Quantity<double, Bit>(
            Convert.ToDouble(val.Value) * ((1d/(1E24)) * (8))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoByte to YottaBit
    /// </summary>
    /// <param name="val">quantity measured in YoctoByte</param>
    /// <returns>quantity measured in YottaBit</returns>
    public static Quantity<double, YottaBit> ToYottaBit<T>(this BaseQuantity<T, YoctoByte> val) where T:IConvertible {
        return new Quantity<double, YottaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E24)) * (8*1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoByte to ZettaBit
    /// </summary>
    /// <param name="val">quantity measured in YoctoByte</param>
    /// <returns>quantity measured in ZettaBit</returns>
    public static Quantity<double, ZettaBit> ToZettaBit<T>(this BaseQuantity<T, YoctoByte> val) where T:IConvertible {
        return new Quantity<double, ZettaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E24)) * (8*1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoByte to ExaBit
    /// </summary>
    /// <param name="val">quantity measured in YoctoByte</param>
    /// <returns>quantity measured in ExaBit</returns>
    public static Quantity<double, ExaBit> ToExaBit<T>(this BaseQuantity<T, YoctoByte> val) where T:IConvertible {
        return new Quantity<double, ExaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E24)) * (8*1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoByte to PetaBit
    /// </summary>
    /// <param name="val">quantity measured in YoctoByte</param>
    /// <returns>quantity measured in PetaBit</returns>
    public static Quantity<double, PetaBit> ToPetaBit<T>(this BaseQuantity<T, YoctoByte> val) where T:IConvertible {
        return new Quantity<double, PetaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E24)) * (8*1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoByte to TeraBit
    /// </summary>
    /// <param name="val">quantity measured in YoctoByte</param>
    /// <returns>quantity measured in TeraBit</returns>
    public static Quantity<double, TeraBit> ToTeraBit<T>(this BaseQuantity<T, YoctoByte> val) where T:IConvertible {
        return new Quantity<double, TeraBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E24)) * (8*1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoByte to GigaBit
    /// </summary>
    /// <param name="val">quantity measured in YoctoByte</param>
    /// <returns>quantity measured in GigaBit</returns>
    public static Quantity<double, GigaBit> ToGigaBit<T>(this BaseQuantity<T, YoctoByte> val) where T:IConvertible {
        return new Quantity<double, GigaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E24)) * (8*1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoByte to MegaBit
    /// </summary>
    /// <param name="val">quantity measured in YoctoByte</param>
    /// <returns>quantity measured in MegaBit</returns>
    public static Quantity<double, MegaBit> ToMegaBit<T>(this BaseQuantity<T, YoctoByte> val) where T:IConvertible {
        return new Quantity<double, MegaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E24)) * (8*1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoByte to KiloBit
    /// </summary>
    /// <param name="val">quantity measured in YoctoByte</param>
    /// <returns>quantity measured in KiloBit</returns>
    public static Quantity<double, KiloBit> ToKiloBit<T>(this BaseQuantity<T, YoctoByte> val) where T:IConvertible {
        return new Quantity<double, KiloBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E24)) * (8*1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoByte to HectoBit
    /// </summary>
    /// <param name="val">quantity measured in YoctoByte</param>
    /// <returns>quantity measured in HectoBit</returns>
    public static Quantity<double, HectoBit> ToHectoBit<T>(this BaseQuantity<T, YoctoByte> val) where T:IConvertible {
        return new Quantity<double, HectoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E24)) * (8*1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoByte to DekaBit
    /// </summary>
    /// <param name="val">quantity measured in YoctoByte</param>
    /// <returns>quantity measured in DekaBit</returns>
    public static Quantity<double, DekaBit> ToDekaBit<T>(this BaseQuantity<T, YoctoByte> val) where T:IConvertible {
        return new Quantity<double, DekaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E24)) * (8*1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoByte to DeciBit
    /// </summary>
    /// <param name="val">quantity measured in YoctoByte</param>
    /// <returns>quantity measured in DeciBit</returns>
    public static Quantity<double, DeciBit> ToDeciBit<T>(this BaseQuantity<T, YoctoByte> val) where T:IConvertible {
        return new Quantity<double, DeciBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E24)) * (8*1E1))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoByte to CentiBit
    /// </summary>
    /// <param name="val">quantity measured in YoctoByte</param>
    /// <returns>quantity measured in CentiBit</returns>
    public static Quantity<double, CentiBit> ToCentiBit<T>(this BaseQuantity<T, YoctoByte> val) where T:IConvertible {
        return new Quantity<double, CentiBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E24)) * (8*1E2))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoByte to MilliBit
    /// </summary>
    /// <param name="val">quantity measured in YoctoByte</param>
    /// <returns>quantity measured in MilliBit</returns>
    public static Quantity<double, MilliBit> ToMilliBit<T>(this BaseQuantity<T, YoctoByte> val) where T:IConvertible {
        return new Quantity<double, MilliBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E24)) * (8*1E3))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoByte to MicroBit
    /// </summary>
    /// <param name="val">quantity measured in YoctoByte</param>
    /// <returns>quantity measured in MicroBit</returns>
    public static Quantity<double, MicroBit> ToMicroBit<T>(this BaseQuantity<T, YoctoByte> val) where T:IConvertible {
        return new Quantity<double, MicroBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E24)) * (8*1E6))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoByte to NanoBit
    /// </summary>
    /// <param name="val">quantity measured in YoctoByte</param>
    /// <returns>quantity measured in NanoBit</returns>
    public static Quantity<double, NanoBit> ToNanoBit<T>(this BaseQuantity<T, YoctoByte> val) where T:IConvertible {
        return new Quantity<double, NanoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E24)) * (8*1E9))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoByte to PicoBit
    /// </summary>
    /// <param name="val">quantity measured in YoctoByte</param>
    /// <returns>quantity measured in PicoBit</returns>
    public static Quantity<double, PicoBit> ToPicoBit<T>(this BaseQuantity<T, YoctoByte> val) where T:IConvertible {
        return new Quantity<double, PicoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E24)) * (8*1E12))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoByte to FemtoBit
    /// </summary>
    /// <param name="val">quantity measured in YoctoByte</param>
    /// <returns>quantity measured in FemtoBit</returns>
    public static Quantity<double, FemtoBit> ToFemtoBit<T>(this BaseQuantity<T, YoctoByte> val) where T:IConvertible {
        return new Quantity<double, FemtoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E24)) * (8*1E15))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoByte to AttoBit
    /// </summary>
    /// <param name="val">quantity measured in YoctoByte</param>
    /// <returns>quantity measured in AttoBit</returns>
    public static Quantity<double, AttoBit> ToAttoBit<T>(this BaseQuantity<T, YoctoByte> val) where T:IConvertible {
        return new Quantity<double, AttoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E24)) * (8*1E18))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoByte to ZeptoBit
    /// </summary>
    /// <param name="val">quantity measured in YoctoByte</param>
    /// <returns>quantity measured in ZeptoBit</returns>
    public static Quantity<double, ZeptoBit> ToZeptoBit<T>(this BaseQuantity<T, YoctoByte> val) where T:IConvertible {
        return new Quantity<double, ZeptoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E24)) * (8*1E21))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoByte to YoctoBit
    /// </summary>
    /// <param name="val">quantity measured in YoctoByte</param>
    /// <returns>quantity measured in YoctoBit</returns>
    public static Quantity<double, YoctoBit> ToYoctoBit<T>(this BaseQuantity<T, YoctoByte> val) where T:IConvertible {
        return new Quantity<double, YoctoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1E24)) * (8*1E24))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoByte to YottaByte
    /// </summary>
    /// <param name="val">quantity measured in YoctoByte</param>
    /// <returns>quantity measured in YottaByte</returns>
    public static Quantity<double, YottaByte> ToYottaByte<T>(this BaseQuantity<T, YoctoByte> val) where T:IConvertible {
        return new Quantity<double, YottaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E24)) * (1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoByte to ZettaByte
    /// </summary>
    /// <param name="val">quantity measured in YoctoByte</param>
    /// <returns>quantity measured in ZettaByte</returns>
    public static Quantity<double, ZettaByte> ToZettaByte<T>(this BaseQuantity<T, YoctoByte> val) where T:IConvertible {
        return new Quantity<double, ZettaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E24)) * (1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoByte to ExaByte
    /// </summary>
    /// <param name="val">quantity measured in YoctoByte</param>
    /// <returns>quantity measured in ExaByte</returns>
    public static Quantity<double, ExaByte> ToExaByte<T>(this BaseQuantity<T, YoctoByte> val) where T:IConvertible {
        return new Quantity<double, ExaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E24)) * (1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoByte to PetaByte
    /// </summary>
    /// <param name="val">quantity measured in YoctoByte</param>
    /// <returns>quantity measured in PetaByte</returns>
    public static Quantity<double, PetaByte> ToPetaByte<T>(this BaseQuantity<T, YoctoByte> val) where T:IConvertible {
        return new Quantity<double, PetaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E24)) * (1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoByte to TeraByte
    /// </summary>
    /// <param name="val">quantity measured in YoctoByte</param>
    /// <returns>quantity measured in TeraByte</returns>
    public static Quantity<double, TeraByte> ToTeraByte<T>(this BaseQuantity<T, YoctoByte> val) where T:IConvertible {
        return new Quantity<double, TeraByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E24)) * (1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoByte to GigaByte
    /// </summary>
    /// <param name="val">quantity measured in YoctoByte</param>
    /// <returns>quantity measured in GigaByte</returns>
    public static Quantity<double, GigaByte> ToGigaByte<T>(this BaseQuantity<T, YoctoByte> val) where T:IConvertible {
        return new Quantity<double, GigaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E24)) * (1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoByte to MegaByte
    /// </summary>
    /// <param name="val">quantity measured in YoctoByte</param>
    /// <returns>quantity measured in MegaByte</returns>
    public static Quantity<double, MegaByte> ToMegaByte<T>(this BaseQuantity<T, YoctoByte> val) where T:IConvertible {
        return new Quantity<double, MegaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E24)) * (1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoByte to KiloByte
    /// </summary>
    /// <param name="val">quantity measured in YoctoByte</param>
    /// <returns>quantity measured in KiloByte</returns>
    public static Quantity<double, KiloByte> ToKiloByte<T>(this BaseQuantity<T, YoctoByte> val) where T:IConvertible {
        return new Quantity<double, KiloByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E24)) * (1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoByte to HectoByte
    /// </summary>
    /// <param name="val">quantity measured in YoctoByte</param>
    /// <returns>quantity measured in HectoByte</returns>
    public static Quantity<double, HectoByte> ToHectoByte<T>(this BaseQuantity<T, YoctoByte> val) where T:IConvertible {
        return new Quantity<double, HectoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E24)) * (1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoByte to DekaByte
    /// </summary>
    /// <param name="val">quantity measured in YoctoByte</param>
    /// <returns>quantity measured in DekaByte</returns>
    public static Quantity<double, DekaByte> ToDekaByte<T>(this BaseQuantity<T, YoctoByte> val) where T:IConvertible {
        return new Quantity<double, DekaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E24)) * (1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoByte to DeciByte
    /// </summary>
    /// <param name="val">quantity measured in YoctoByte</param>
    /// <returns>quantity measured in DeciByte</returns>
    public static Quantity<double, DeciByte> ToDeciByte<T>(this BaseQuantity<T, YoctoByte> val) where T:IConvertible {
        return new Quantity<double, DeciByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E24)) * (1E1))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoByte to CentiByte
    /// </summary>
    /// <param name="val">quantity measured in YoctoByte</param>
    /// <returns>quantity measured in CentiByte</returns>
    public static Quantity<double, CentiByte> ToCentiByte<T>(this BaseQuantity<T, YoctoByte> val) where T:IConvertible {
        return new Quantity<double, CentiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E24)) * (1E2))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoByte to MilliByte
    /// </summary>
    /// <param name="val">quantity measured in YoctoByte</param>
    /// <returns>quantity measured in MilliByte</returns>
    public static Quantity<double, MilliByte> ToMilliByte<T>(this BaseQuantity<T, YoctoByte> val) where T:IConvertible {
        return new Quantity<double, MilliByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E24)) * (1E3))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoByte to MicroByte
    /// </summary>
    /// <param name="val">quantity measured in YoctoByte</param>
    /// <returns>quantity measured in MicroByte</returns>
    public static Quantity<double, MicroByte> ToMicroByte<T>(this BaseQuantity<T, YoctoByte> val) where T:IConvertible {
        return new Quantity<double, MicroByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E24)) * (1E6))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoByte to NanoByte
    /// </summary>
    /// <param name="val">quantity measured in YoctoByte</param>
    /// <returns>quantity measured in NanoByte</returns>
    public static Quantity<double, NanoByte> ToNanoByte<T>(this BaseQuantity<T, YoctoByte> val) where T:IConvertible {
        return new Quantity<double, NanoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E24)) * (1E9))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoByte to PicoByte
    /// </summary>
    /// <param name="val">quantity measured in YoctoByte</param>
    /// <returns>quantity measured in PicoByte</returns>
    public static Quantity<double, PicoByte> ToPicoByte<T>(this BaseQuantity<T, YoctoByte> val) where T:IConvertible {
        return new Quantity<double, PicoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E24)) * (1E12))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoByte to FemtoByte
    /// </summary>
    /// <param name="val">quantity measured in YoctoByte</param>
    /// <returns>quantity measured in FemtoByte</returns>
    public static Quantity<double, FemtoByte> ToFemtoByte<T>(this BaseQuantity<T, YoctoByte> val) where T:IConvertible {
        return new Quantity<double, FemtoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E24)) * (1E15))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoByte to AttoByte
    /// </summary>
    /// <param name="val">quantity measured in YoctoByte</param>
    /// <returns>quantity measured in AttoByte</returns>
    public static Quantity<double, AttoByte> ToAttoByte<T>(this BaseQuantity<T, YoctoByte> val) where T:IConvertible {
        return new Quantity<double, AttoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E24)) * (1E18))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoByte to ZeptoByte
    /// </summary>
    /// <param name="val">quantity measured in YoctoByte</param>
    /// <returns>quantity measured in ZeptoByte</returns>
    public static Quantity<double, ZeptoByte> ToZeptoByte<T>(this BaseQuantity<T, YoctoByte> val) where T:IConvertible {
        return new Quantity<double, ZeptoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E24)) * (1E21))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoByte to YobiByte
    /// </summary>
    /// <param name="val">quantity measured in YoctoByte</param>
    /// <returns>quantity measured in YobiByte</returns>
    public static Quantity<double, YobiByte> ToYobiByte<T>(this BaseQuantity<T, YoctoByte> val) where T:IConvertible {
        return new Quantity<double, YobiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E24)) * (1.2089258e-24))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoByte to ZebiByte
    /// </summary>
    /// <param name="val">quantity measured in YoctoByte</param>
    /// <returns>quantity measured in ZebiByte</returns>
    public static Quantity<double, ZebiByte> ToZebiByte<T>(this BaseQuantity<T, YoctoByte> val) where T:IConvertible {
        return new Quantity<double, ZebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E24)) * (1.1805916e-21))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoByte to ExbiByte
    /// </summary>
    /// <param name="val">quantity measured in YoctoByte</param>
    /// <returns>quantity measured in ExbiByte</returns>
    public static Quantity<double, ExbiByte> ToExbiByte<T>(this BaseQuantity<T, YoctoByte> val) where T:IConvertible {
        return new Quantity<double, ExbiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E24)) * (1.1529215e-18))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoByte to PebiByte
    /// </summary>
    /// <param name="val">quantity measured in YoctoByte</param>
    /// <returns>quantity measured in PebiByte</returns>
    public static Quantity<double, PebiByte> ToPebiByte<T>(this BaseQuantity<T, YoctoByte> val) where T:IConvertible {
        return new Quantity<double, PebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E24)) * (1.1258999e-15))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoByte to TebiByte
    /// </summary>
    /// <param name="val">quantity measured in YoctoByte</param>
    /// <returns>quantity measured in TebiByte</returns>
    public static Quantity<double, TebiByte> ToTebiByte<T>(this BaseQuantity<T, YoctoByte> val) where T:IConvertible {
        return new Quantity<double, TebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E24)) * (1.0995116e-12))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoByte to GibiByte
    /// </summary>
    /// <param name="val">quantity measured in YoctoByte</param>
    /// <returns>quantity measured in GibiByte</returns>
    public static Quantity<double, GibiByte> ToGibiByte<T>(this BaseQuantity<T, YoctoByte> val) where T:IConvertible {
        return new Quantity<double, GibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E24)) * (1d/1073741824))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoByte to MebiByte
    /// </summary>
    /// <param name="val">quantity measured in YoctoByte</param>
    /// <returns>quantity measured in MebiByte</returns>
    public static Quantity<double, MebiByte> ToMebiByte<T>(this BaseQuantity<T, YoctoByte> val) where T:IConvertible {
        return new Quantity<double, MebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E24)) * (1d/1048576))
        );
    }
	/// <summary>
    /// Extension method to convert YoctoByte to KibiByte
    /// </summary>
    /// <param name="val">quantity measured in YoctoByte</param>
    /// <returns>quantity measured in KibiByte</returns>
    public static Quantity<double, KibiByte> ToKibiByte<T>(this BaseQuantity<T, YoctoByte> val) where T:IConvertible {
        return new Quantity<double, KibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1E24)) * (1d/1024))
        );
    }
	/// <summary>
    /// Extension method to convert Byte to YobiByte
    /// </summary>
    /// <param name="val">quantity measured in Byte</param>
    /// <returns>quantity measured in YobiByte</returns>
    public static Quantity<double, YobiByte> ToYobiByte<T>(this BaseQuantity<T, Byte> val) where T:IConvertible {
        return new Quantity<double, YobiByte>(
            Convert.ToDouble(val.Value) * (1.2089258e-24)
        );
    }
	/// <summary>
    /// Extension method to convert YobiByte to Byte
    /// </summary>
    /// <param name="val">quantity measured in YobiByte</param>
    /// <returns>quantity measured in Byte</returns>
    public static Quantity<double, Byte> ToByte<T>(this BaseQuantity<T, YobiByte> val) where T:IConvertible {
        return new Quantity<double, Byte>(
            Convert.ToDouble(val.Value) * (1d/(1.2089258e-24))
        );
    }
	/// <summary>
    /// Extension method to convert YobiByte to Bit
    /// </summary>
    /// <param name="val">quantity measured in YobiByte</param>
    /// <returns>quantity measured in Bit</returns>
    public static Quantity<double, Bit> ToBit<T>(this BaseQuantity<T, YobiByte> val) where T:IConvertible {
        return new Quantity<double, Bit>(
            Convert.ToDouble(val.Value) * ((1d/(1.2089258e-24)) * (8))
        );
    }
	/// <summary>
    /// Extension method to convert YobiByte to YottaBit
    /// </summary>
    /// <param name="val">quantity measured in YobiByte</param>
    /// <returns>quantity measured in YottaBit</returns>
    public static Quantity<double, YottaBit> ToYottaBit<T>(this BaseQuantity<T, YobiByte> val) where T:IConvertible {
        return new Quantity<double, YottaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.2089258e-24)) * (8*1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert YobiByte to ZettaBit
    /// </summary>
    /// <param name="val">quantity measured in YobiByte</param>
    /// <returns>quantity measured in ZettaBit</returns>
    public static Quantity<double, ZettaBit> ToZettaBit<T>(this BaseQuantity<T, YobiByte> val) where T:IConvertible {
        return new Quantity<double, ZettaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.2089258e-24)) * (8*1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert YobiByte to ExaBit
    /// </summary>
    /// <param name="val">quantity measured in YobiByte</param>
    /// <returns>quantity measured in ExaBit</returns>
    public static Quantity<double, ExaBit> ToExaBit<T>(this BaseQuantity<T, YobiByte> val) where T:IConvertible {
        return new Quantity<double, ExaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.2089258e-24)) * (8*1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert YobiByte to PetaBit
    /// </summary>
    /// <param name="val">quantity measured in YobiByte</param>
    /// <returns>quantity measured in PetaBit</returns>
    public static Quantity<double, PetaBit> ToPetaBit<T>(this BaseQuantity<T, YobiByte> val) where T:IConvertible {
        return new Quantity<double, PetaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.2089258e-24)) * (8*1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert YobiByte to TeraBit
    /// </summary>
    /// <param name="val">quantity measured in YobiByte</param>
    /// <returns>quantity measured in TeraBit</returns>
    public static Quantity<double, TeraBit> ToTeraBit<T>(this BaseQuantity<T, YobiByte> val) where T:IConvertible {
        return new Quantity<double, TeraBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.2089258e-24)) * (8*1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert YobiByte to GigaBit
    /// </summary>
    /// <param name="val">quantity measured in YobiByte</param>
    /// <returns>quantity measured in GigaBit</returns>
    public static Quantity<double, GigaBit> ToGigaBit<T>(this BaseQuantity<T, YobiByte> val) where T:IConvertible {
        return new Quantity<double, GigaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.2089258e-24)) * (8*1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert YobiByte to MegaBit
    /// </summary>
    /// <param name="val">quantity measured in YobiByte</param>
    /// <returns>quantity measured in MegaBit</returns>
    public static Quantity<double, MegaBit> ToMegaBit<T>(this BaseQuantity<T, YobiByte> val) where T:IConvertible {
        return new Quantity<double, MegaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.2089258e-24)) * (8*1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert YobiByte to KiloBit
    /// </summary>
    /// <param name="val">quantity measured in YobiByte</param>
    /// <returns>quantity measured in KiloBit</returns>
    public static Quantity<double, KiloBit> ToKiloBit<T>(this BaseQuantity<T, YobiByte> val) where T:IConvertible {
        return new Quantity<double, KiloBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.2089258e-24)) * (8*1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert YobiByte to HectoBit
    /// </summary>
    /// <param name="val">quantity measured in YobiByte</param>
    /// <returns>quantity measured in HectoBit</returns>
    public static Quantity<double, HectoBit> ToHectoBit<T>(this BaseQuantity<T, YobiByte> val) where T:IConvertible {
        return new Quantity<double, HectoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.2089258e-24)) * (8*1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert YobiByte to DekaBit
    /// </summary>
    /// <param name="val">quantity measured in YobiByte</param>
    /// <returns>quantity measured in DekaBit</returns>
    public static Quantity<double, DekaBit> ToDekaBit<T>(this BaseQuantity<T, YobiByte> val) where T:IConvertible {
        return new Quantity<double, DekaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.2089258e-24)) * (8*1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert YobiByte to DeciBit
    /// </summary>
    /// <param name="val">quantity measured in YobiByte</param>
    /// <returns>quantity measured in DeciBit</returns>
    public static Quantity<double, DeciBit> ToDeciBit<T>(this BaseQuantity<T, YobiByte> val) where T:IConvertible {
        return new Quantity<double, DeciBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.2089258e-24)) * (8*1E1))
        );
    }
	/// <summary>
    /// Extension method to convert YobiByte to CentiBit
    /// </summary>
    /// <param name="val">quantity measured in YobiByte</param>
    /// <returns>quantity measured in CentiBit</returns>
    public static Quantity<double, CentiBit> ToCentiBit<T>(this BaseQuantity<T, YobiByte> val) where T:IConvertible {
        return new Quantity<double, CentiBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.2089258e-24)) * (8*1E2))
        );
    }
	/// <summary>
    /// Extension method to convert YobiByte to MilliBit
    /// </summary>
    /// <param name="val">quantity measured in YobiByte</param>
    /// <returns>quantity measured in MilliBit</returns>
    public static Quantity<double, MilliBit> ToMilliBit<T>(this BaseQuantity<T, YobiByte> val) where T:IConvertible {
        return new Quantity<double, MilliBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.2089258e-24)) * (8*1E3))
        );
    }
	/// <summary>
    /// Extension method to convert YobiByte to MicroBit
    /// </summary>
    /// <param name="val">quantity measured in YobiByte</param>
    /// <returns>quantity measured in MicroBit</returns>
    public static Quantity<double, MicroBit> ToMicroBit<T>(this BaseQuantity<T, YobiByte> val) where T:IConvertible {
        return new Quantity<double, MicroBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.2089258e-24)) * (8*1E6))
        );
    }
	/// <summary>
    /// Extension method to convert YobiByte to NanoBit
    /// </summary>
    /// <param name="val">quantity measured in YobiByte</param>
    /// <returns>quantity measured in NanoBit</returns>
    public static Quantity<double, NanoBit> ToNanoBit<T>(this BaseQuantity<T, YobiByte> val) where T:IConvertible {
        return new Quantity<double, NanoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.2089258e-24)) * (8*1E9))
        );
    }
	/// <summary>
    /// Extension method to convert YobiByte to PicoBit
    /// </summary>
    /// <param name="val">quantity measured in YobiByte</param>
    /// <returns>quantity measured in PicoBit</returns>
    public static Quantity<double, PicoBit> ToPicoBit<T>(this BaseQuantity<T, YobiByte> val) where T:IConvertible {
        return new Quantity<double, PicoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.2089258e-24)) * (8*1E12))
        );
    }
	/// <summary>
    /// Extension method to convert YobiByte to FemtoBit
    /// </summary>
    /// <param name="val">quantity measured in YobiByte</param>
    /// <returns>quantity measured in FemtoBit</returns>
    public static Quantity<double, FemtoBit> ToFemtoBit<T>(this BaseQuantity<T, YobiByte> val) where T:IConvertible {
        return new Quantity<double, FemtoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.2089258e-24)) * (8*1E15))
        );
    }
	/// <summary>
    /// Extension method to convert YobiByte to AttoBit
    /// </summary>
    /// <param name="val">quantity measured in YobiByte</param>
    /// <returns>quantity measured in AttoBit</returns>
    public static Quantity<double, AttoBit> ToAttoBit<T>(this BaseQuantity<T, YobiByte> val) where T:IConvertible {
        return new Quantity<double, AttoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.2089258e-24)) * (8*1E18))
        );
    }
	/// <summary>
    /// Extension method to convert YobiByte to ZeptoBit
    /// </summary>
    /// <param name="val">quantity measured in YobiByte</param>
    /// <returns>quantity measured in ZeptoBit</returns>
    public static Quantity<double, ZeptoBit> ToZeptoBit<T>(this BaseQuantity<T, YobiByte> val) where T:IConvertible {
        return new Quantity<double, ZeptoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.2089258e-24)) * (8*1E21))
        );
    }
	/// <summary>
    /// Extension method to convert YobiByte to YoctoBit
    /// </summary>
    /// <param name="val">quantity measured in YobiByte</param>
    /// <returns>quantity measured in YoctoBit</returns>
    public static Quantity<double, YoctoBit> ToYoctoBit<T>(this BaseQuantity<T, YobiByte> val) where T:IConvertible {
        return new Quantity<double, YoctoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.2089258e-24)) * (8*1E24))
        );
    }
	/// <summary>
    /// Extension method to convert YobiByte to YottaByte
    /// </summary>
    /// <param name="val">quantity measured in YobiByte</param>
    /// <returns>quantity measured in YottaByte</returns>
    public static Quantity<double, YottaByte> ToYottaByte<T>(this BaseQuantity<T, YobiByte> val) where T:IConvertible {
        return new Quantity<double, YottaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.2089258e-24)) * (1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert YobiByte to ZettaByte
    /// </summary>
    /// <param name="val">quantity measured in YobiByte</param>
    /// <returns>quantity measured in ZettaByte</returns>
    public static Quantity<double, ZettaByte> ToZettaByte<T>(this BaseQuantity<T, YobiByte> val) where T:IConvertible {
        return new Quantity<double, ZettaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.2089258e-24)) * (1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert YobiByte to ExaByte
    /// </summary>
    /// <param name="val">quantity measured in YobiByte</param>
    /// <returns>quantity measured in ExaByte</returns>
    public static Quantity<double, ExaByte> ToExaByte<T>(this BaseQuantity<T, YobiByte> val) where T:IConvertible {
        return new Quantity<double, ExaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.2089258e-24)) * (1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert YobiByte to PetaByte
    /// </summary>
    /// <param name="val">quantity measured in YobiByte</param>
    /// <returns>quantity measured in PetaByte</returns>
    public static Quantity<double, PetaByte> ToPetaByte<T>(this BaseQuantity<T, YobiByte> val) where T:IConvertible {
        return new Quantity<double, PetaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.2089258e-24)) * (1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert YobiByte to TeraByte
    /// </summary>
    /// <param name="val">quantity measured in YobiByte</param>
    /// <returns>quantity measured in TeraByte</returns>
    public static Quantity<double, TeraByte> ToTeraByte<T>(this BaseQuantity<T, YobiByte> val) where T:IConvertible {
        return new Quantity<double, TeraByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.2089258e-24)) * (1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert YobiByte to GigaByte
    /// </summary>
    /// <param name="val">quantity measured in YobiByte</param>
    /// <returns>quantity measured in GigaByte</returns>
    public static Quantity<double, GigaByte> ToGigaByte<T>(this BaseQuantity<T, YobiByte> val) where T:IConvertible {
        return new Quantity<double, GigaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.2089258e-24)) * (1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert YobiByte to MegaByte
    /// </summary>
    /// <param name="val">quantity measured in YobiByte</param>
    /// <returns>quantity measured in MegaByte</returns>
    public static Quantity<double, MegaByte> ToMegaByte<T>(this BaseQuantity<T, YobiByte> val) where T:IConvertible {
        return new Quantity<double, MegaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.2089258e-24)) * (1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert YobiByte to KiloByte
    /// </summary>
    /// <param name="val">quantity measured in YobiByte</param>
    /// <returns>quantity measured in KiloByte</returns>
    public static Quantity<double, KiloByte> ToKiloByte<T>(this BaseQuantity<T, YobiByte> val) where T:IConvertible {
        return new Quantity<double, KiloByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.2089258e-24)) * (1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert YobiByte to HectoByte
    /// </summary>
    /// <param name="val">quantity measured in YobiByte</param>
    /// <returns>quantity measured in HectoByte</returns>
    public static Quantity<double, HectoByte> ToHectoByte<T>(this BaseQuantity<T, YobiByte> val) where T:IConvertible {
        return new Quantity<double, HectoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.2089258e-24)) * (1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert YobiByte to DekaByte
    /// </summary>
    /// <param name="val">quantity measured in YobiByte</param>
    /// <returns>quantity measured in DekaByte</returns>
    public static Quantity<double, DekaByte> ToDekaByte<T>(this BaseQuantity<T, YobiByte> val) where T:IConvertible {
        return new Quantity<double, DekaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.2089258e-24)) * (1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert YobiByte to DeciByte
    /// </summary>
    /// <param name="val">quantity measured in YobiByte</param>
    /// <returns>quantity measured in DeciByte</returns>
    public static Quantity<double, DeciByte> ToDeciByte<T>(this BaseQuantity<T, YobiByte> val) where T:IConvertible {
        return new Quantity<double, DeciByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.2089258e-24)) * (1E1))
        );
    }
	/// <summary>
    /// Extension method to convert YobiByte to CentiByte
    /// </summary>
    /// <param name="val">quantity measured in YobiByte</param>
    /// <returns>quantity measured in CentiByte</returns>
    public static Quantity<double, CentiByte> ToCentiByte<T>(this BaseQuantity<T, YobiByte> val) where T:IConvertible {
        return new Quantity<double, CentiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.2089258e-24)) * (1E2))
        );
    }
	/// <summary>
    /// Extension method to convert YobiByte to MilliByte
    /// </summary>
    /// <param name="val">quantity measured in YobiByte</param>
    /// <returns>quantity measured in MilliByte</returns>
    public static Quantity<double, MilliByte> ToMilliByte<T>(this BaseQuantity<T, YobiByte> val) where T:IConvertible {
        return new Quantity<double, MilliByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.2089258e-24)) * (1E3))
        );
    }
	/// <summary>
    /// Extension method to convert YobiByte to MicroByte
    /// </summary>
    /// <param name="val">quantity measured in YobiByte</param>
    /// <returns>quantity measured in MicroByte</returns>
    public static Quantity<double, MicroByte> ToMicroByte<T>(this BaseQuantity<T, YobiByte> val) where T:IConvertible {
        return new Quantity<double, MicroByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.2089258e-24)) * (1E6))
        );
    }
	/// <summary>
    /// Extension method to convert YobiByte to NanoByte
    /// </summary>
    /// <param name="val">quantity measured in YobiByte</param>
    /// <returns>quantity measured in NanoByte</returns>
    public static Quantity<double, NanoByte> ToNanoByte<T>(this BaseQuantity<T, YobiByte> val) where T:IConvertible {
        return new Quantity<double, NanoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.2089258e-24)) * (1E9))
        );
    }
	/// <summary>
    /// Extension method to convert YobiByte to PicoByte
    /// </summary>
    /// <param name="val">quantity measured in YobiByte</param>
    /// <returns>quantity measured in PicoByte</returns>
    public static Quantity<double, PicoByte> ToPicoByte<T>(this BaseQuantity<T, YobiByte> val) where T:IConvertible {
        return new Quantity<double, PicoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.2089258e-24)) * (1E12))
        );
    }
	/// <summary>
    /// Extension method to convert YobiByte to FemtoByte
    /// </summary>
    /// <param name="val">quantity measured in YobiByte</param>
    /// <returns>quantity measured in FemtoByte</returns>
    public static Quantity<double, FemtoByte> ToFemtoByte<T>(this BaseQuantity<T, YobiByte> val) where T:IConvertible {
        return new Quantity<double, FemtoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.2089258e-24)) * (1E15))
        );
    }
	/// <summary>
    /// Extension method to convert YobiByte to AttoByte
    /// </summary>
    /// <param name="val">quantity measured in YobiByte</param>
    /// <returns>quantity measured in AttoByte</returns>
    public static Quantity<double, AttoByte> ToAttoByte<T>(this BaseQuantity<T, YobiByte> val) where T:IConvertible {
        return new Quantity<double, AttoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.2089258e-24)) * (1E18))
        );
    }
	/// <summary>
    /// Extension method to convert YobiByte to ZeptoByte
    /// </summary>
    /// <param name="val">quantity measured in YobiByte</param>
    /// <returns>quantity measured in ZeptoByte</returns>
    public static Quantity<double, ZeptoByte> ToZeptoByte<T>(this BaseQuantity<T, YobiByte> val) where T:IConvertible {
        return new Quantity<double, ZeptoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.2089258e-24)) * (1E21))
        );
    }
	/// <summary>
    /// Extension method to convert YobiByte to YoctoByte
    /// </summary>
    /// <param name="val">quantity measured in YobiByte</param>
    /// <returns>quantity measured in YoctoByte</returns>
    public static Quantity<double, YoctoByte> ToYoctoByte<T>(this BaseQuantity<T, YobiByte> val) where T:IConvertible {
        return new Quantity<double, YoctoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.2089258e-24)) * (1E24))
        );
    }
	/// <summary>
    /// Extension method to convert YobiByte to ZebiByte
    /// </summary>
    /// <param name="val">quantity measured in YobiByte</param>
    /// <returns>quantity measured in ZebiByte</returns>
    public static Quantity<double, ZebiByte> ToZebiByte<T>(this BaseQuantity<T, YobiByte> val) where T:IConvertible {
        return new Quantity<double, ZebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.2089258e-24)) * (1.1805916e-21))
        );
    }
	/// <summary>
    /// Extension method to convert YobiByte to ExbiByte
    /// </summary>
    /// <param name="val">quantity measured in YobiByte</param>
    /// <returns>quantity measured in ExbiByte</returns>
    public static Quantity<double, ExbiByte> ToExbiByte<T>(this BaseQuantity<T, YobiByte> val) where T:IConvertible {
        return new Quantity<double, ExbiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.2089258e-24)) * (1.1529215e-18))
        );
    }
	/// <summary>
    /// Extension method to convert YobiByte to PebiByte
    /// </summary>
    /// <param name="val">quantity measured in YobiByte</param>
    /// <returns>quantity measured in PebiByte</returns>
    public static Quantity<double, PebiByte> ToPebiByte<T>(this BaseQuantity<T, YobiByte> val) where T:IConvertible {
        return new Quantity<double, PebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.2089258e-24)) * (1.1258999e-15))
        );
    }
	/// <summary>
    /// Extension method to convert YobiByte to TebiByte
    /// </summary>
    /// <param name="val">quantity measured in YobiByte</param>
    /// <returns>quantity measured in TebiByte</returns>
    public static Quantity<double, TebiByte> ToTebiByte<T>(this BaseQuantity<T, YobiByte> val) where T:IConvertible {
        return new Quantity<double, TebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.2089258e-24)) * (1.0995116e-12))
        );
    }
	/// <summary>
    /// Extension method to convert YobiByte to GibiByte
    /// </summary>
    /// <param name="val">quantity measured in YobiByte</param>
    /// <returns>quantity measured in GibiByte</returns>
    public static Quantity<double, GibiByte> ToGibiByte<T>(this BaseQuantity<T, YobiByte> val) where T:IConvertible {
        return new Quantity<double, GibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.2089258e-24)) * (1d/1073741824))
        );
    }
	/// <summary>
    /// Extension method to convert YobiByte to MebiByte
    /// </summary>
    /// <param name="val">quantity measured in YobiByte</param>
    /// <returns>quantity measured in MebiByte</returns>
    public static Quantity<double, MebiByte> ToMebiByte<T>(this BaseQuantity<T, YobiByte> val) where T:IConvertible {
        return new Quantity<double, MebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.2089258e-24)) * (1d/1048576))
        );
    }
	/// <summary>
    /// Extension method to convert YobiByte to KibiByte
    /// </summary>
    /// <param name="val">quantity measured in YobiByte</param>
    /// <returns>quantity measured in KibiByte</returns>
    public static Quantity<double, KibiByte> ToKibiByte<T>(this BaseQuantity<T, YobiByte> val) where T:IConvertible {
        return new Quantity<double, KibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.2089258e-24)) * (1d/1024))
        );
    }
	/// <summary>
    /// Extension method to convert Byte to ZebiByte
    /// </summary>
    /// <param name="val">quantity measured in Byte</param>
    /// <returns>quantity measured in ZebiByte</returns>
    public static Quantity<double, ZebiByte> ToZebiByte<T>(this BaseQuantity<T, Byte> val) where T:IConvertible {
        return new Quantity<double, ZebiByte>(
            Convert.ToDouble(val.Value) * (1.1805916e-21)
        );
    }
	/// <summary>
    /// Extension method to convert ZebiByte to Byte
    /// </summary>
    /// <param name="val">quantity measured in ZebiByte</param>
    /// <returns>quantity measured in Byte</returns>
    public static Quantity<double, Byte> ToByte<T>(this BaseQuantity<T, ZebiByte> val) where T:IConvertible {
        return new Quantity<double, Byte>(
            Convert.ToDouble(val.Value) * (1d/(1.1805916e-21))
        );
    }
	/// <summary>
    /// Extension method to convert ZebiByte to Bit
    /// </summary>
    /// <param name="val">quantity measured in ZebiByte</param>
    /// <returns>quantity measured in Bit</returns>
    public static Quantity<double, Bit> ToBit<T>(this BaseQuantity<T, ZebiByte> val) where T:IConvertible {
        return new Quantity<double, Bit>(
            Convert.ToDouble(val.Value) * ((1d/(1.1805916e-21)) * (8))
        );
    }
	/// <summary>
    /// Extension method to convert ZebiByte to YottaBit
    /// </summary>
    /// <param name="val">quantity measured in ZebiByte</param>
    /// <returns>quantity measured in YottaBit</returns>
    public static Quantity<double, YottaBit> ToYottaBit<T>(this BaseQuantity<T, ZebiByte> val) where T:IConvertible {
        return new Quantity<double, YottaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.1805916e-21)) * (8*1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert ZebiByte to ZettaBit
    /// </summary>
    /// <param name="val">quantity measured in ZebiByte</param>
    /// <returns>quantity measured in ZettaBit</returns>
    public static Quantity<double, ZettaBit> ToZettaBit<T>(this BaseQuantity<T, ZebiByte> val) where T:IConvertible {
        return new Quantity<double, ZettaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.1805916e-21)) * (8*1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert ZebiByte to ExaBit
    /// </summary>
    /// <param name="val">quantity measured in ZebiByte</param>
    /// <returns>quantity measured in ExaBit</returns>
    public static Quantity<double, ExaBit> ToExaBit<T>(this BaseQuantity<T, ZebiByte> val) where T:IConvertible {
        return new Quantity<double, ExaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.1805916e-21)) * (8*1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert ZebiByte to PetaBit
    /// </summary>
    /// <param name="val">quantity measured in ZebiByte</param>
    /// <returns>quantity measured in PetaBit</returns>
    public static Quantity<double, PetaBit> ToPetaBit<T>(this BaseQuantity<T, ZebiByte> val) where T:IConvertible {
        return new Quantity<double, PetaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.1805916e-21)) * (8*1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert ZebiByte to TeraBit
    /// </summary>
    /// <param name="val">quantity measured in ZebiByte</param>
    /// <returns>quantity measured in TeraBit</returns>
    public static Quantity<double, TeraBit> ToTeraBit<T>(this BaseQuantity<T, ZebiByte> val) where T:IConvertible {
        return new Quantity<double, TeraBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.1805916e-21)) * (8*1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert ZebiByte to GigaBit
    /// </summary>
    /// <param name="val">quantity measured in ZebiByte</param>
    /// <returns>quantity measured in GigaBit</returns>
    public static Quantity<double, GigaBit> ToGigaBit<T>(this BaseQuantity<T, ZebiByte> val) where T:IConvertible {
        return new Quantity<double, GigaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.1805916e-21)) * (8*1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert ZebiByte to MegaBit
    /// </summary>
    /// <param name="val">quantity measured in ZebiByte</param>
    /// <returns>quantity measured in MegaBit</returns>
    public static Quantity<double, MegaBit> ToMegaBit<T>(this BaseQuantity<T, ZebiByte> val) where T:IConvertible {
        return new Quantity<double, MegaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.1805916e-21)) * (8*1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert ZebiByte to KiloBit
    /// </summary>
    /// <param name="val">quantity measured in ZebiByte</param>
    /// <returns>quantity measured in KiloBit</returns>
    public static Quantity<double, KiloBit> ToKiloBit<T>(this BaseQuantity<T, ZebiByte> val) where T:IConvertible {
        return new Quantity<double, KiloBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.1805916e-21)) * (8*1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert ZebiByte to HectoBit
    /// </summary>
    /// <param name="val">quantity measured in ZebiByte</param>
    /// <returns>quantity measured in HectoBit</returns>
    public static Quantity<double, HectoBit> ToHectoBit<T>(this BaseQuantity<T, ZebiByte> val) where T:IConvertible {
        return new Quantity<double, HectoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.1805916e-21)) * (8*1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert ZebiByte to DekaBit
    /// </summary>
    /// <param name="val">quantity measured in ZebiByte</param>
    /// <returns>quantity measured in DekaBit</returns>
    public static Quantity<double, DekaBit> ToDekaBit<T>(this BaseQuantity<T, ZebiByte> val) where T:IConvertible {
        return new Quantity<double, DekaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.1805916e-21)) * (8*1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert ZebiByte to DeciBit
    /// </summary>
    /// <param name="val">quantity measured in ZebiByte</param>
    /// <returns>quantity measured in DeciBit</returns>
    public static Quantity<double, DeciBit> ToDeciBit<T>(this BaseQuantity<T, ZebiByte> val) where T:IConvertible {
        return new Quantity<double, DeciBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.1805916e-21)) * (8*1E1))
        );
    }
	/// <summary>
    /// Extension method to convert ZebiByte to CentiBit
    /// </summary>
    /// <param name="val">quantity measured in ZebiByte</param>
    /// <returns>quantity measured in CentiBit</returns>
    public static Quantity<double, CentiBit> ToCentiBit<T>(this BaseQuantity<T, ZebiByte> val) where T:IConvertible {
        return new Quantity<double, CentiBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.1805916e-21)) * (8*1E2))
        );
    }
	/// <summary>
    /// Extension method to convert ZebiByte to MilliBit
    /// </summary>
    /// <param name="val">quantity measured in ZebiByte</param>
    /// <returns>quantity measured in MilliBit</returns>
    public static Quantity<double, MilliBit> ToMilliBit<T>(this BaseQuantity<T, ZebiByte> val) where T:IConvertible {
        return new Quantity<double, MilliBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.1805916e-21)) * (8*1E3))
        );
    }
	/// <summary>
    /// Extension method to convert ZebiByte to MicroBit
    /// </summary>
    /// <param name="val">quantity measured in ZebiByte</param>
    /// <returns>quantity measured in MicroBit</returns>
    public static Quantity<double, MicroBit> ToMicroBit<T>(this BaseQuantity<T, ZebiByte> val) where T:IConvertible {
        return new Quantity<double, MicroBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.1805916e-21)) * (8*1E6))
        );
    }
	/// <summary>
    /// Extension method to convert ZebiByte to NanoBit
    /// </summary>
    /// <param name="val">quantity measured in ZebiByte</param>
    /// <returns>quantity measured in NanoBit</returns>
    public static Quantity<double, NanoBit> ToNanoBit<T>(this BaseQuantity<T, ZebiByte> val) where T:IConvertible {
        return new Quantity<double, NanoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.1805916e-21)) * (8*1E9))
        );
    }
	/// <summary>
    /// Extension method to convert ZebiByte to PicoBit
    /// </summary>
    /// <param name="val">quantity measured in ZebiByte</param>
    /// <returns>quantity measured in PicoBit</returns>
    public static Quantity<double, PicoBit> ToPicoBit<T>(this BaseQuantity<T, ZebiByte> val) where T:IConvertible {
        return new Quantity<double, PicoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.1805916e-21)) * (8*1E12))
        );
    }
	/// <summary>
    /// Extension method to convert ZebiByte to FemtoBit
    /// </summary>
    /// <param name="val">quantity measured in ZebiByte</param>
    /// <returns>quantity measured in FemtoBit</returns>
    public static Quantity<double, FemtoBit> ToFemtoBit<T>(this BaseQuantity<T, ZebiByte> val) where T:IConvertible {
        return new Quantity<double, FemtoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.1805916e-21)) * (8*1E15))
        );
    }
	/// <summary>
    /// Extension method to convert ZebiByte to AttoBit
    /// </summary>
    /// <param name="val">quantity measured in ZebiByte</param>
    /// <returns>quantity measured in AttoBit</returns>
    public static Quantity<double, AttoBit> ToAttoBit<T>(this BaseQuantity<T, ZebiByte> val) where T:IConvertible {
        return new Quantity<double, AttoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.1805916e-21)) * (8*1E18))
        );
    }
	/// <summary>
    /// Extension method to convert ZebiByte to ZeptoBit
    /// </summary>
    /// <param name="val">quantity measured in ZebiByte</param>
    /// <returns>quantity measured in ZeptoBit</returns>
    public static Quantity<double, ZeptoBit> ToZeptoBit<T>(this BaseQuantity<T, ZebiByte> val) where T:IConvertible {
        return new Quantity<double, ZeptoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.1805916e-21)) * (8*1E21))
        );
    }
	/// <summary>
    /// Extension method to convert ZebiByte to YoctoBit
    /// </summary>
    /// <param name="val">quantity measured in ZebiByte</param>
    /// <returns>quantity measured in YoctoBit</returns>
    public static Quantity<double, YoctoBit> ToYoctoBit<T>(this BaseQuantity<T, ZebiByte> val) where T:IConvertible {
        return new Quantity<double, YoctoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.1805916e-21)) * (8*1E24))
        );
    }
	/// <summary>
    /// Extension method to convert ZebiByte to YottaByte
    /// </summary>
    /// <param name="val">quantity measured in ZebiByte</param>
    /// <returns>quantity measured in YottaByte</returns>
    public static Quantity<double, YottaByte> ToYottaByte<T>(this BaseQuantity<T, ZebiByte> val) where T:IConvertible {
        return new Quantity<double, YottaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1805916e-21)) * (1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert ZebiByte to ZettaByte
    /// </summary>
    /// <param name="val">quantity measured in ZebiByte</param>
    /// <returns>quantity measured in ZettaByte</returns>
    public static Quantity<double, ZettaByte> ToZettaByte<T>(this BaseQuantity<T, ZebiByte> val) where T:IConvertible {
        return new Quantity<double, ZettaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1805916e-21)) * (1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert ZebiByte to ExaByte
    /// </summary>
    /// <param name="val">quantity measured in ZebiByte</param>
    /// <returns>quantity measured in ExaByte</returns>
    public static Quantity<double, ExaByte> ToExaByte<T>(this BaseQuantity<T, ZebiByte> val) where T:IConvertible {
        return new Quantity<double, ExaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1805916e-21)) * (1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert ZebiByte to PetaByte
    /// </summary>
    /// <param name="val">quantity measured in ZebiByte</param>
    /// <returns>quantity measured in PetaByte</returns>
    public static Quantity<double, PetaByte> ToPetaByte<T>(this BaseQuantity<T, ZebiByte> val) where T:IConvertible {
        return new Quantity<double, PetaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1805916e-21)) * (1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert ZebiByte to TeraByte
    /// </summary>
    /// <param name="val">quantity measured in ZebiByte</param>
    /// <returns>quantity measured in TeraByte</returns>
    public static Quantity<double, TeraByte> ToTeraByte<T>(this BaseQuantity<T, ZebiByte> val) where T:IConvertible {
        return new Quantity<double, TeraByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1805916e-21)) * (1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert ZebiByte to GigaByte
    /// </summary>
    /// <param name="val">quantity measured in ZebiByte</param>
    /// <returns>quantity measured in GigaByte</returns>
    public static Quantity<double, GigaByte> ToGigaByte<T>(this BaseQuantity<T, ZebiByte> val) where T:IConvertible {
        return new Quantity<double, GigaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1805916e-21)) * (1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert ZebiByte to MegaByte
    /// </summary>
    /// <param name="val">quantity measured in ZebiByte</param>
    /// <returns>quantity measured in MegaByte</returns>
    public static Quantity<double, MegaByte> ToMegaByte<T>(this BaseQuantity<T, ZebiByte> val) where T:IConvertible {
        return new Quantity<double, MegaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1805916e-21)) * (1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert ZebiByte to KiloByte
    /// </summary>
    /// <param name="val">quantity measured in ZebiByte</param>
    /// <returns>quantity measured in KiloByte</returns>
    public static Quantity<double, KiloByte> ToKiloByte<T>(this BaseQuantity<T, ZebiByte> val) where T:IConvertible {
        return new Quantity<double, KiloByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1805916e-21)) * (1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert ZebiByte to HectoByte
    /// </summary>
    /// <param name="val">quantity measured in ZebiByte</param>
    /// <returns>quantity measured in HectoByte</returns>
    public static Quantity<double, HectoByte> ToHectoByte<T>(this BaseQuantity<T, ZebiByte> val) where T:IConvertible {
        return new Quantity<double, HectoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1805916e-21)) * (1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert ZebiByte to DekaByte
    /// </summary>
    /// <param name="val">quantity measured in ZebiByte</param>
    /// <returns>quantity measured in DekaByte</returns>
    public static Quantity<double, DekaByte> ToDekaByte<T>(this BaseQuantity<T, ZebiByte> val) where T:IConvertible {
        return new Quantity<double, DekaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1805916e-21)) * (1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert ZebiByte to DeciByte
    /// </summary>
    /// <param name="val">quantity measured in ZebiByte</param>
    /// <returns>quantity measured in DeciByte</returns>
    public static Quantity<double, DeciByte> ToDeciByte<T>(this BaseQuantity<T, ZebiByte> val) where T:IConvertible {
        return new Quantity<double, DeciByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1805916e-21)) * (1E1))
        );
    }
	/// <summary>
    /// Extension method to convert ZebiByte to CentiByte
    /// </summary>
    /// <param name="val">quantity measured in ZebiByte</param>
    /// <returns>quantity measured in CentiByte</returns>
    public static Quantity<double, CentiByte> ToCentiByte<T>(this BaseQuantity<T, ZebiByte> val) where T:IConvertible {
        return new Quantity<double, CentiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1805916e-21)) * (1E2))
        );
    }
	/// <summary>
    /// Extension method to convert ZebiByte to MilliByte
    /// </summary>
    /// <param name="val">quantity measured in ZebiByte</param>
    /// <returns>quantity measured in MilliByte</returns>
    public static Quantity<double, MilliByte> ToMilliByte<T>(this BaseQuantity<T, ZebiByte> val) where T:IConvertible {
        return new Quantity<double, MilliByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1805916e-21)) * (1E3))
        );
    }
	/// <summary>
    /// Extension method to convert ZebiByte to MicroByte
    /// </summary>
    /// <param name="val">quantity measured in ZebiByte</param>
    /// <returns>quantity measured in MicroByte</returns>
    public static Quantity<double, MicroByte> ToMicroByte<T>(this BaseQuantity<T, ZebiByte> val) where T:IConvertible {
        return new Quantity<double, MicroByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1805916e-21)) * (1E6))
        );
    }
	/// <summary>
    /// Extension method to convert ZebiByte to NanoByte
    /// </summary>
    /// <param name="val">quantity measured in ZebiByte</param>
    /// <returns>quantity measured in NanoByte</returns>
    public static Quantity<double, NanoByte> ToNanoByte<T>(this BaseQuantity<T, ZebiByte> val) where T:IConvertible {
        return new Quantity<double, NanoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1805916e-21)) * (1E9))
        );
    }
	/// <summary>
    /// Extension method to convert ZebiByte to PicoByte
    /// </summary>
    /// <param name="val">quantity measured in ZebiByte</param>
    /// <returns>quantity measured in PicoByte</returns>
    public static Quantity<double, PicoByte> ToPicoByte<T>(this BaseQuantity<T, ZebiByte> val) where T:IConvertible {
        return new Quantity<double, PicoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1805916e-21)) * (1E12))
        );
    }
	/// <summary>
    /// Extension method to convert ZebiByte to FemtoByte
    /// </summary>
    /// <param name="val">quantity measured in ZebiByte</param>
    /// <returns>quantity measured in FemtoByte</returns>
    public static Quantity<double, FemtoByte> ToFemtoByte<T>(this BaseQuantity<T, ZebiByte> val) where T:IConvertible {
        return new Quantity<double, FemtoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1805916e-21)) * (1E15))
        );
    }
	/// <summary>
    /// Extension method to convert ZebiByte to AttoByte
    /// </summary>
    /// <param name="val">quantity measured in ZebiByte</param>
    /// <returns>quantity measured in AttoByte</returns>
    public static Quantity<double, AttoByte> ToAttoByte<T>(this BaseQuantity<T, ZebiByte> val) where T:IConvertible {
        return new Quantity<double, AttoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1805916e-21)) * (1E18))
        );
    }
	/// <summary>
    /// Extension method to convert ZebiByte to ZeptoByte
    /// </summary>
    /// <param name="val">quantity measured in ZebiByte</param>
    /// <returns>quantity measured in ZeptoByte</returns>
    public static Quantity<double, ZeptoByte> ToZeptoByte<T>(this BaseQuantity<T, ZebiByte> val) where T:IConvertible {
        return new Quantity<double, ZeptoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1805916e-21)) * (1E21))
        );
    }
	/// <summary>
    /// Extension method to convert ZebiByte to YoctoByte
    /// </summary>
    /// <param name="val">quantity measured in ZebiByte</param>
    /// <returns>quantity measured in YoctoByte</returns>
    public static Quantity<double, YoctoByte> ToYoctoByte<T>(this BaseQuantity<T, ZebiByte> val) where T:IConvertible {
        return new Quantity<double, YoctoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1805916e-21)) * (1E24))
        );
    }
	/// <summary>
    /// Extension method to convert ZebiByte to YobiByte
    /// </summary>
    /// <param name="val">quantity measured in ZebiByte</param>
    /// <returns>quantity measured in YobiByte</returns>
    public static Quantity<double, YobiByte> ToYobiByte<T>(this BaseQuantity<T, ZebiByte> val) where T:IConvertible {
        return new Quantity<double, YobiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1805916e-21)) * (1.2089258e-24))
        );
    }
	/// <summary>
    /// Extension method to convert ZebiByte to ExbiByte
    /// </summary>
    /// <param name="val">quantity measured in ZebiByte</param>
    /// <returns>quantity measured in ExbiByte</returns>
    public static Quantity<double, ExbiByte> ToExbiByte<T>(this BaseQuantity<T, ZebiByte> val) where T:IConvertible {
        return new Quantity<double, ExbiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1805916e-21)) * (1.1529215e-18))
        );
    }
	/// <summary>
    /// Extension method to convert ZebiByte to PebiByte
    /// </summary>
    /// <param name="val">quantity measured in ZebiByte</param>
    /// <returns>quantity measured in PebiByte</returns>
    public static Quantity<double, PebiByte> ToPebiByte<T>(this BaseQuantity<T, ZebiByte> val) where T:IConvertible {
        return new Quantity<double, PebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1805916e-21)) * (1.1258999e-15))
        );
    }
	/// <summary>
    /// Extension method to convert ZebiByte to TebiByte
    /// </summary>
    /// <param name="val">quantity measured in ZebiByte</param>
    /// <returns>quantity measured in TebiByte</returns>
    public static Quantity<double, TebiByte> ToTebiByte<T>(this BaseQuantity<T, ZebiByte> val) where T:IConvertible {
        return new Quantity<double, TebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1805916e-21)) * (1.0995116e-12))
        );
    }
	/// <summary>
    /// Extension method to convert ZebiByte to GibiByte
    /// </summary>
    /// <param name="val">quantity measured in ZebiByte</param>
    /// <returns>quantity measured in GibiByte</returns>
    public static Quantity<double, GibiByte> ToGibiByte<T>(this BaseQuantity<T, ZebiByte> val) where T:IConvertible {
        return new Quantity<double, GibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1805916e-21)) * (1d/1073741824))
        );
    }
	/// <summary>
    /// Extension method to convert ZebiByte to MebiByte
    /// </summary>
    /// <param name="val">quantity measured in ZebiByte</param>
    /// <returns>quantity measured in MebiByte</returns>
    public static Quantity<double, MebiByte> ToMebiByte<T>(this BaseQuantity<T, ZebiByte> val) where T:IConvertible {
        return new Quantity<double, MebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1805916e-21)) * (1d/1048576))
        );
    }
	/// <summary>
    /// Extension method to convert ZebiByte to KibiByte
    /// </summary>
    /// <param name="val">quantity measured in ZebiByte</param>
    /// <returns>quantity measured in KibiByte</returns>
    public static Quantity<double, KibiByte> ToKibiByte<T>(this BaseQuantity<T, ZebiByte> val) where T:IConvertible {
        return new Quantity<double, KibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1805916e-21)) * (1d/1024))
        );
    }
	/// <summary>
    /// Extension method to convert Byte to ExbiByte
    /// </summary>
    /// <param name="val">quantity measured in Byte</param>
    /// <returns>quantity measured in ExbiByte</returns>
    public static Quantity<double, ExbiByte> ToExbiByte<T>(this BaseQuantity<T, Byte> val) where T:IConvertible {
        return new Quantity<double, ExbiByte>(
            Convert.ToDouble(val.Value) * (1.1529215e-18)
        );
    }
	/// <summary>
    /// Extension method to convert ExbiByte to Byte
    /// </summary>
    /// <param name="val">quantity measured in ExbiByte</param>
    /// <returns>quantity measured in Byte</returns>
    public static Quantity<double, Byte> ToByte<T>(this BaseQuantity<T, ExbiByte> val) where T:IConvertible {
        return new Quantity<double, Byte>(
            Convert.ToDouble(val.Value) * (1d/(1.1529215e-18))
        );
    }
	/// <summary>
    /// Extension method to convert ExbiByte to Bit
    /// </summary>
    /// <param name="val">quantity measured in ExbiByte</param>
    /// <returns>quantity measured in Bit</returns>
    public static Quantity<double, Bit> ToBit<T>(this BaseQuantity<T, ExbiByte> val) where T:IConvertible {
        return new Quantity<double, Bit>(
            Convert.ToDouble(val.Value) * ((1d/(1.1529215e-18)) * (8))
        );
    }
	/// <summary>
    /// Extension method to convert ExbiByte to YottaBit
    /// </summary>
    /// <param name="val">quantity measured in ExbiByte</param>
    /// <returns>quantity measured in YottaBit</returns>
    public static Quantity<double, YottaBit> ToYottaBit<T>(this BaseQuantity<T, ExbiByte> val) where T:IConvertible {
        return new Quantity<double, YottaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.1529215e-18)) * (8*1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert ExbiByte to ZettaBit
    /// </summary>
    /// <param name="val">quantity measured in ExbiByte</param>
    /// <returns>quantity measured in ZettaBit</returns>
    public static Quantity<double, ZettaBit> ToZettaBit<T>(this BaseQuantity<T, ExbiByte> val) where T:IConvertible {
        return new Quantity<double, ZettaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.1529215e-18)) * (8*1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert ExbiByte to ExaBit
    /// </summary>
    /// <param name="val">quantity measured in ExbiByte</param>
    /// <returns>quantity measured in ExaBit</returns>
    public static Quantity<double, ExaBit> ToExaBit<T>(this BaseQuantity<T, ExbiByte> val) where T:IConvertible {
        return new Quantity<double, ExaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.1529215e-18)) * (8*1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert ExbiByte to PetaBit
    /// </summary>
    /// <param name="val">quantity measured in ExbiByte</param>
    /// <returns>quantity measured in PetaBit</returns>
    public static Quantity<double, PetaBit> ToPetaBit<T>(this BaseQuantity<T, ExbiByte> val) where T:IConvertible {
        return new Quantity<double, PetaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.1529215e-18)) * (8*1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert ExbiByte to TeraBit
    /// </summary>
    /// <param name="val">quantity measured in ExbiByte</param>
    /// <returns>quantity measured in TeraBit</returns>
    public static Quantity<double, TeraBit> ToTeraBit<T>(this BaseQuantity<T, ExbiByte> val) where T:IConvertible {
        return new Quantity<double, TeraBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.1529215e-18)) * (8*1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert ExbiByte to GigaBit
    /// </summary>
    /// <param name="val">quantity measured in ExbiByte</param>
    /// <returns>quantity measured in GigaBit</returns>
    public static Quantity<double, GigaBit> ToGigaBit<T>(this BaseQuantity<T, ExbiByte> val) where T:IConvertible {
        return new Quantity<double, GigaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.1529215e-18)) * (8*1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert ExbiByte to MegaBit
    /// </summary>
    /// <param name="val">quantity measured in ExbiByte</param>
    /// <returns>quantity measured in MegaBit</returns>
    public static Quantity<double, MegaBit> ToMegaBit<T>(this BaseQuantity<T, ExbiByte> val) where T:IConvertible {
        return new Quantity<double, MegaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.1529215e-18)) * (8*1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert ExbiByte to KiloBit
    /// </summary>
    /// <param name="val">quantity measured in ExbiByte</param>
    /// <returns>quantity measured in KiloBit</returns>
    public static Quantity<double, KiloBit> ToKiloBit<T>(this BaseQuantity<T, ExbiByte> val) where T:IConvertible {
        return new Quantity<double, KiloBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.1529215e-18)) * (8*1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert ExbiByte to HectoBit
    /// </summary>
    /// <param name="val">quantity measured in ExbiByte</param>
    /// <returns>quantity measured in HectoBit</returns>
    public static Quantity<double, HectoBit> ToHectoBit<T>(this BaseQuantity<T, ExbiByte> val) where T:IConvertible {
        return new Quantity<double, HectoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.1529215e-18)) * (8*1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert ExbiByte to DekaBit
    /// </summary>
    /// <param name="val">quantity measured in ExbiByte</param>
    /// <returns>quantity measured in DekaBit</returns>
    public static Quantity<double, DekaBit> ToDekaBit<T>(this BaseQuantity<T, ExbiByte> val) where T:IConvertible {
        return new Quantity<double, DekaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.1529215e-18)) * (8*1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert ExbiByte to DeciBit
    /// </summary>
    /// <param name="val">quantity measured in ExbiByte</param>
    /// <returns>quantity measured in DeciBit</returns>
    public static Quantity<double, DeciBit> ToDeciBit<T>(this BaseQuantity<T, ExbiByte> val) where T:IConvertible {
        return new Quantity<double, DeciBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.1529215e-18)) * (8*1E1))
        );
    }
	/// <summary>
    /// Extension method to convert ExbiByte to CentiBit
    /// </summary>
    /// <param name="val">quantity measured in ExbiByte</param>
    /// <returns>quantity measured in CentiBit</returns>
    public static Quantity<double, CentiBit> ToCentiBit<T>(this BaseQuantity<T, ExbiByte> val) where T:IConvertible {
        return new Quantity<double, CentiBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.1529215e-18)) * (8*1E2))
        );
    }
	/// <summary>
    /// Extension method to convert ExbiByte to MilliBit
    /// </summary>
    /// <param name="val">quantity measured in ExbiByte</param>
    /// <returns>quantity measured in MilliBit</returns>
    public static Quantity<double, MilliBit> ToMilliBit<T>(this BaseQuantity<T, ExbiByte> val) where T:IConvertible {
        return new Quantity<double, MilliBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.1529215e-18)) * (8*1E3))
        );
    }
	/// <summary>
    /// Extension method to convert ExbiByte to MicroBit
    /// </summary>
    /// <param name="val">quantity measured in ExbiByte</param>
    /// <returns>quantity measured in MicroBit</returns>
    public static Quantity<double, MicroBit> ToMicroBit<T>(this BaseQuantity<T, ExbiByte> val) where T:IConvertible {
        return new Quantity<double, MicroBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.1529215e-18)) * (8*1E6))
        );
    }
	/// <summary>
    /// Extension method to convert ExbiByte to NanoBit
    /// </summary>
    /// <param name="val">quantity measured in ExbiByte</param>
    /// <returns>quantity measured in NanoBit</returns>
    public static Quantity<double, NanoBit> ToNanoBit<T>(this BaseQuantity<T, ExbiByte> val) where T:IConvertible {
        return new Quantity<double, NanoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.1529215e-18)) * (8*1E9))
        );
    }
	/// <summary>
    /// Extension method to convert ExbiByte to PicoBit
    /// </summary>
    /// <param name="val">quantity measured in ExbiByte</param>
    /// <returns>quantity measured in PicoBit</returns>
    public static Quantity<double, PicoBit> ToPicoBit<T>(this BaseQuantity<T, ExbiByte> val) where T:IConvertible {
        return new Quantity<double, PicoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.1529215e-18)) * (8*1E12))
        );
    }
	/// <summary>
    /// Extension method to convert ExbiByte to FemtoBit
    /// </summary>
    /// <param name="val">quantity measured in ExbiByte</param>
    /// <returns>quantity measured in FemtoBit</returns>
    public static Quantity<double, FemtoBit> ToFemtoBit<T>(this BaseQuantity<T, ExbiByte> val) where T:IConvertible {
        return new Quantity<double, FemtoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.1529215e-18)) * (8*1E15))
        );
    }
	/// <summary>
    /// Extension method to convert ExbiByte to AttoBit
    /// </summary>
    /// <param name="val">quantity measured in ExbiByte</param>
    /// <returns>quantity measured in AttoBit</returns>
    public static Quantity<double, AttoBit> ToAttoBit<T>(this BaseQuantity<T, ExbiByte> val) where T:IConvertible {
        return new Quantity<double, AttoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.1529215e-18)) * (8*1E18))
        );
    }
	/// <summary>
    /// Extension method to convert ExbiByte to ZeptoBit
    /// </summary>
    /// <param name="val">quantity measured in ExbiByte</param>
    /// <returns>quantity measured in ZeptoBit</returns>
    public static Quantity<double, ZeptoBit> ToZeptoBit<T>(this BaseQuantity<T, ExbiByte> val) where T:IConvertible {
        return new Quantity<double, ZeptoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.1529215e-18)) * (8*1E21))
        );
    }
	/// <summary>
    /// Extension method to convert ExbiByte to YoctoBit
    /// </summary>
    /// <param name="val">quantity measured in ExbiByte</param>
    /// <returns>quantity measured in YoctoBit</returns>
    public static Quantity<double, YoctoBit> ToYoctoBit<T>(this BaseQuantity<T, ExbiByte> val) where T:IConvertible {
        return new Quantity<double, YoctoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.1529215e-18)) * (8*1E24))
        );
    }
	/// <summary>
    /// Extension method to convert ExbiByte to YottaByte
    /// </summary>
    /// <param name="val">quantity measured in ExbiByte</param>
    /// <returns>quantity measured in YottaByte</returns>
    public static Quantity<double, YottaByte> ToYottaByte<T>(this BaseQuantity<T, ExbiByte> val) where T:IConvertible {
        return new Quantity<double, YottaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1529215e-18)) * (1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert ExbiByte to ZettaByte
    /// </summary>
    /// <param name="val">quantity measured in ExbiByte</param>
    /// <returns>quantity measured in ZettaByte</returns>
    public static Quantity<double, ZettaByte> ToZettaByte<T>(this BaseQuantity<T, ExbiByte> val) where T:IConvertible {
        return new Quantity<double, ZettaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1529215e-18)) * (1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert ExbiByte to ExaByte
    /// </summary>
    /// <param name="val">quantity measured in ExbiByte</param>
    /// <returns>quantity measured in ExaByte</returns>
    public static Quantity<double, ExaByte> ToExaByte<T>(this BaseQuantity<T, ExbiByte> val) where T:IConvertible {
        return new Quantity<double, ExaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1529215e-18)) * (1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert ExbiByte to PetaByte
    /// </summary>
    /// <param name="val">quantity measured in ExbiByte</param>
    /// <returns>quantity measured in PetaByte</returns>
    public static Quantity<double, PetaByte> ToPetaByte<T>(this BaseQuantity<T, ExbiByte> val) where T:IConvertible {
        return new Quantity<double, PetaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1529215e-18)) * (1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert ExbiByte to TeraByte
    /// </summary>
    /// <param name="val">quantity measured in ExbiByte</param>
    /// <returns>quantity measured in TeraByte</returns>
    public static Quantity<double, TeraByte> ToTeraByte<T>(this BaseQuantity<T, ExbiByte> val) where T:IConvertible {
        return new Quantity<double, TeraByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1529215e-18)) * (1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert ExbiByte to GigaByte
    /// </summary>
    /// <param name="val">quantity measured in ExbiByte</param>
    /// <returns>quantity measured in GigaByte</returns>
    public static Quantity<double, GigaByte> ToGigaByte<T>(this BaseQuantity<T, ExbiByte> val) where T:IConvertible {
        return new Quantity<double, GigaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1529215e-18)) * (1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert ExbiByte to MegaByte
    /// </summary>
    /// <param name="val">quantity measured in ExbiByte</param>
    /// <returns>quantity measured in MegaByte</returns>
    public static Quantity<double, MegaByte> ToMegaByte<T>(this BaseQuantity<T, ExbiByte> val) where T:IConvertible {
        return new Quantity<double, MegaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1529215e-18)) * (1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert ExbiByte to KiloByte
    /// </summary>
    /// <param name="val">quantity measured in ExbiByte</param>
    /// <returns>quantity measured in KiloByte</returns>
    public static Quantity<double, KiloByte> ToKiloByte<T>(this BaseQuantity<T, ExbiByte> val) where T:IConvertible {
        return new Quantity<double, KiloByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1529215e-18)) * (1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert ExbiByte to HectoByte
    /// </summary>
    /// <param name="val">quantity measured in ExbiByte</param>
    /// <returns>quantity measured in HectoByte</returns>
    public static Quantity<double, HectoByte> ToHectoByte<T>(this BaseQuantity<T, ExbiByte> val) where T:IConvertible {
        return new Quantity<double, HectoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1529215e-18)) * (1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert ExbiByte to DekaByte
    /// </summary>
    /// <param name="val">quantity measured in ExbiByte</param>
    /// <returns>quantity measured in DekaByte</returns>
    public static Quantity<double, DekaByte> ToDekaByte<T>(this BaseQuantity<T, ExbiByte> val) where T:IConvertible {
        return new Quantity<double, DekaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1529215e-18)) * (1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert ExbiByte to DeciByte
    /// </summary>
    /// <param name="val">quantity measured in ExbiByte</param>
    /// <returns>quantity measured in DeciByte</returns>
    public static Quantity<double, DeciByte> ToDeciByte<T>(this BaseQuantity<T, ExbiByte> val) where T:IConvertible {
        return new Quantity<double, DeciByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1529215e-18)) * (1E1))
        );
    }
	/// <summary>
    /// Extension method to convert ExbiByte to CentiByte
    /// </summary>
    /// <param name="val">quantity measured in ExbiByte</param>
    /// <returns>quantity measured in CentiByte</returns>
    public static Quantity<double, CentiByte> ToCentiByte<T>(this BaseQuantity<T, ExbiByte> val) where T:IConvertible {
        return new Quantity<double, CentiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1529215e-18)) * (1E2))
        );
    }
	/// <summary>
    /// Extension method to convert ExbiByte to MilliByte
    /// </summary>
    /// <param name="val">quantity measured in ExbiByte</param>
    /// <returns>quantity measured in MilliByte</returns>
    public static Quantity<double, MilliByte> ToMilliByte<T>(this BaseQuantity<T, ExbiByte> val) where T:IConvertible {
        return new Quantity<double, MilliByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1529215e-18)) * (1E3))
        );
    }
	/// <summary>
    /// Extension method to convert ExbiByte to MicroByte
    /// </summary>
    /// <param name="val">quantity measured in ExbiByte</param>
    /// <returns>quantity measured in MicroByte</returns>
    public static Quantity<double, MicroByte> ToMicroByte<T>(this BaseQuantity<T, ExbiByte> val) where T:IConvertible {
        return new Quantity<double, MicroByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1529215e-18)) * (1E6))
        );
    }
	/// <summary>
    /// Extension method to convert ExbiByte to NanoByte
    /// </summary>
    /// <param name="val">quantity measured in ExbiByte</param>
    /// <returns>quantity measured in NanoByte</returns>
    public static Quantity<double, NanoByte> ToNanoByte<T>(this BaseQuantity<T, ExbiByte> val) where T:IConvertible {
        return new Quantity<double, NanoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1529215e-18)) * (1E9))
        );
    }
	/// <summary>
    /// Extension method to convert ExbiByte to PicoByte
    /// </summary>
    /// <param name="val">quantity measured in ExbiByte</param>
    /// <returns>quantity measured in PicoByte</returns>
    public static Quantity<double, PicoByte> ToPicoByte<T>(this BaseQuantity<T, ExbiByte> val) where T:IConvertible {
        return new Quantity<double, PicoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1529215e-18)) * (1E12))
        );
    }
	/// <summary>
    /// Extension method to convert ExbiByte to FemtoByte
    /// </summary>
    /// <param name="val">quantity measured in ExbiByte</param>
    /// <returns>quantity measured in FemtoByte</returns>
    public static Quantity<double, FemtoByte> ToFemtoByte<T>(this BaseQuantity<T, ExbiByte> val) where T:IConvertible {
        return new Quantity<double, FemtoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1529215e-18)) * (1E15))
        );
    }
	/// <summary>
    /// Extension method to convert ExbiByte to AttoByte
    /// </summary>
    /// <param name="val">quantity measured in ExbiByte</param>
    /// <returns>quantity measured in AttoByte</returns>
    public static Quantity<double, AttoByte> ToAttoByte<T>(this BaseQuantity<T, ExbiByte> val) where T:IConvertible {
        return new Quantity<double, AttoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1529215e-18)) * (1E18))
        );
    }
	/// <summary>
    /// Extension method to convert ExbiByte to ZeptoByte
    /// </summary>
    /// <param name="val">quantity measured in ExbiByte</param>
    /// <returns>quantity measured in ZeptoByte</returns>
    public static Quantity<double, ZeptoByte> ToZeptoByte<T>(this BaseQuantity<T, ExbiByte> val) where T:IConvertible {
        return new Quantity<double, ZeptoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1529215e-18)) * (1E21))
        );
    }
	/// <summary>
    /// Extension method to convert ExbiByte to YoctoByte
    /// </summary>
    /// <param name="val">quantity measured in ExbiByte</param>
    /// <returns>quantity measured in YoctoByte</returns>
    public static Quantity<double, YoctoByte> ToYoctoByte<T>(this BaseQuantity<T, ExbiByte> val) where T:IConvertible {
        return new Quantity<double, YoctoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1529215e-18)) * (1E24))
        );
    }
	/// <summary>
    /// Extension method to convert ExbiByte to YobiByte
    /// </summary>
    /// <param name="val">quantity measured in ExbiByte</param>
    /// <returns>quantity measured in YobiByte</returns>
    public static Quantity<double, YobiByte> ToYobiByte<T>(this BaseQuantity<T, ExbiByte> val) where T:IConvertible {
        return new Quantity<double, YobiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1529215e-18)) * (1.2089258e-24))
        );
    }
	/// <summary>
    /// Extension method to convert ExbiByte to ZebiByte
    /// </summary>
    /// <param name="val">quantity measured in ExbiByte</param>
    /// <returns>quantity measured in ZebiByte</returns>
    public static Quantity<double, ZebiByte> ToZebiByte<T>(this BaseQuantity<T, ExbiByte> val) where T:IConvertible {
        return new Quantity<double, ZebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1529215e-18)) * (1.1805916e-21))
        );
    }
	/// <summary>
    /// Extension method to convert ExbiByte to PebiByte
    /// </summary>
    /// <param name="val">quantity measured in ExbiByte</param>
    /// <returns>quantity measured in PebiByte</returns>
    public static Quantity<double, PebiByte> ToPebiByte<T>(this BaseQuantity<T, ExbiByte> val) where T:IConvertible {
        return new Quantity<double, PebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1529215e-18)) * (1.1258999e-15))
        );
    }
	/// <summary>
    /// Extension method to convert ExbiByte to TebiByte
    /// </summary>
    /// <param name="val">quantity measured in ExbiByte</param>
    /// <returns>quantity measured in TebiByte</returns>
    public static Quantity<double, TebiByte> ToTebiByte<T>(this BaseQuantity<T, ExbiByte> val) where T:IConvertible {
        return new Quantity<double, TebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1529215e-18)) * (1.0995116e-12))
        );
    }
	/// <summary>
    /// Extension method to convert ExbiByte to GibiByte
    /// </summary>
    /// <param name="val">quantity measured in ExbiByte</param>
    /// <returns>quantity measured in GibiByte</returns>
    public static Quantity<double, GibiByte> ToGibiByte<T>(this BaseQuantity<T, ExbiByte> val) where T:IConvertible {
        return new Quantity<double, GibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1529215e-18)) * (1d/1073741824))
        );
    }
	/// <summary>
    /// Extension method to convert ExbiByte to MebiByte
    /// </summary>
    /// <param name="val">quantity measured in ExbiByte</param>
    /// <returns>quantity measured in MebiByte</returns>
    public static Quantity<double, MebiByte> ToMebiByte<T>(this BaseQuantity<T, ExbiByte> val) where T:IConvertible {
        return new Quantity<double, MebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1529215e-18)) * (1d/1048576))
        );
    }
	/// <summary>
    /// Extension method to convert ExbiByte to KibiByte
    /// </summary>
    /// <param name="val">quantity measured in ExbiByte</param>
    /// <returns>quantity measured in KibiByte</returns>
    public static Quantity<double, KibiByte> ToKibiByte<T>(this BaseQuantity<T, ExbiByte> val) where T:IConvertible {
        return new Quantity<double, KibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1529215e-18)) * (1d/1024))
        );
    }
	/// <summary>
    /// Extension method to convert Byte to PebiByte
    /// </summary>
    /// <param name="val">quantity measured in Byte</param>
    /// <returns>quantity measured in PebiByte</returns>
    public static Quantity<double, PebiByte> ToPebiByte<T>(this BaseQuantity<T, Byte> val) where T:IConvertible {
        return new Quantity<double, PebiByte>(
            Convert.ToDouble(val.Value) * (1.1258999e-15)
        );
    }
	/// <summary>
    /// Extension method to convert PebiByte to Byte
    /// </summary>
    /// <param name="val">quantity measured in PebiByte</param>
    /// <returns>quantity measured in Byte</returns>
    public static Quantity<double, Byte> ToByte<T>(this BaseQuantity<T, PebiByte> val) where T:IConvertible {
        return new Quantity<double, Byte>(
            Convert.ToDouble(val.Value) * (1d/(1.1258999e-15))
        );
    }
	/// <summary>
    /// Extension method to convert PebiByte to Bit
    /// </summary>
    /// <param name="val">quantity measured in PebiByte</param>
    /// <returns>quantity measured in Bit</returns>
    public static Quantity<double, Bit> ToBit<T>(this BaseQuantity<T, PebiByte> val) where T:IConvertible {
        return new Quantity<double, Bit>(
            Convert.ToDouble(val.Value) * ((1d/(1.1258999e-15)) * (8))
        );
    }
	/// <summary>
    /// Extension method to convert PebiByte to YottaBit
    /// </summary>
    /// <param name="val">quantity measured in PebiByte</param>
    /// <returns>quantity measured in YottaBit</returns>
    public static Quantity<double, YottaBit> ToYottaBit<T>(this BaseQuantity<T, PebiByte> val) where T:IConvertible {
        return new Quantity<double, YottaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.1258999e-15)) * (8*1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert PebiByte to ZettaBit
    /// </summary>
    /// <param name="val">quantity measured in PebiByte</param>
    /// <returns>quantity measured in ZettaBit</returns>
    public static Quantity<double, ZettaBit> ToZettaBit<T>(this BaseQuantity<T, PebiByte> val) where T:IConvertible {
        return new Quantity<double, ZettaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.1258999e-15)) * (8*1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert PebiByte to ExaBit
    /// </summary>
    /// <param name="val">quantity measured in PebiByte</param>
    /// <returns>quantity measured in ExaBit</returns>
    public static Quantity<double, ExaBit> ToExaBit<T>(this BaseQuantity<T, PebiByte> val) where T:IConvertible {
        return new Quantity<double, ExaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.1258999e-15)) * (8*1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert PebiByte to PetaBit
    /// </summary>
    /// <param name="val">quantity measured in PebiByte</param>
    /// <returns>quantity measured in PetaBit</returns>
    public static Quantity<double, PetaBit> ToPetaBit<T>(this BaseQuantity<T, PebiByte> val) where T:IConvertible {
        return new Quantity<double, PetaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.1258999e-15)) * (8*1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert PebiByte to TeraBit
    /// </summary>
    /// <param name="val">quantity measured in PebiByte</param>
    /// <returns>quantity measured in TeraBit</returns>
    public static Quantity<double, TeraBit> ToTeraBit<T>(this BaseQuantity<T, PebiByte> val) where T:IConvertible {
        return new Quantity<double, TeraBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.1258999e-15)) * (8*1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert PebiByte to GigaBit
    /// </summary>
    /// <param name="val">quantity measured in PebiByte</param>
    /// <returns>quantity measured in GigaBit</returns>
    public static Quantity<double, GigaBit> ToGigaBit<T>(this BaseQuantity<T, PebiByte> val) where T:IConvertible {
        return new Quantity<double, GigaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.1258999e-15)) * (8*1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert PebiByte to MegaBit
    /// </summary>
    /// <param name="val">quantity measured in PebiByte</param>
    /// <returns>quantity measured in MegaBit</returns>
    public static Quantity<double, MegaBit> ToMegaBit<T>(this BaseQuantity<T, PebiByte> val) where T:IConvertible {
        return new Quantity<double, MegaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.1258999e-15)) * (8*1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert PebiByte to KiloBit
    /// </summary>
    /// <param name="val">quantity measured in PebiByte</param>
    /// <returns>quantity measured in KiloBit</returns>
    public static Quantity<double, KiloBit> ToKiloBit<T>(this BaseQuantity<T, PebiByte> val) where T:IConvertible {
        return new Quantity<double, KiloBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.1258999e-15)) * (8*1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert PebiByte to HectoBit
    /// </summary>
    /// <param name="val">quantity measured in PebiByte</param>
    /// <returns>quantity measured in HectoBit</returns>
    public static Quantity<double, HectoBit> ToHectoBit<T>(this BaseQuantity<T, PebiByte> val) where T:IConvertible {
        return new Quantity<double, HectoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.1258999e-15)) * (8*1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert PebiByte to DekaBit
    /// </summary>
    /// <param name="val">quantity measured in PebiByte</param>
    /// <returns>quantity measured in DekaBit</returns>
    public static Quantity<double, DekaBit> ToDekaBit<T>(this BaseQuantity<T, PebiByte> val) where T:IConvertible {
        return new Quantity<double, DekaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.1258999e-15)) * (8*1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert PebiByte to DeciBit
    /// </summary>
    /// <param name="val">quantity measured in PebiByte</param>
    /// <returns>quantity measured in DeciBit</returns>
    public static Quantity<double, DeciBit> ToDeciBit<T>(this BaseQuantity<T, PebiByte> val) where T:IConvertible {
        return new Quantity<double, DeciBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.1258999e-15)) * (8*1E1))
        );
    }
	/// <summary>
    /// Extension method to convert PebiByte to CentiBit
    /// </summary>
    /// <param name="val">quantity measured in PebiByte</param>
    /// <returns>quantity measured in CentiBit</returns>
    public static Quantity<double, CentiBit> ToCentiBit<T>(this BaseQuantity<T, PebiByte> val) where T:IConvertible {
        return new Quantity<double, CentiBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.1258999e-15)) * (8*1E2))
        );
    }
	/// <summary>
    /// Extension method to convert PebiByte to MilliBit
    /// </summary>
    /// <param name="val">quantity measured in PebiByte</param>
    /// <returns>quantity measured in MilliBit</returns>
    public static Quantity<double, MilliBit> ToMilliBit<T>(this BaseQuantity<T, PebiByte> val) where T:IConvertible {
        return new Quantity<double, MilliBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.1258999e-15)) * (8*1E3))
        );
    }
	/// <summary>
    /// Extension method to convert PebiByte to MicroBit
    /// </summary>
    /// <param name="val">quantity measured in PebiByte</param>
    /// <returns>quantity measured in MicroBit</returns>
    public static Quantity<double, MicroBit> ToMicroBit<T>(this BaseQuantity<T, PebiByte> val) where T:IConvertible {
        return new Quantity<double, MicroBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.1258999e-15)) * (8*1E6))
        );
    }
	/// <summary>
    /// Extension method to convert PebiByte to NanoBit
    /// </summary>
    /// <param name="val">quantity measured in PebiByte</param>
    /// <returns>quantity measured in NanoBit</returns>
    public static Quantity<double, NanoBit> ToNanoBit<T>(this BaseQuantity<T, PebiByte> val) where T:IConvertible {
        return new Quantity<double, NanoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.1258999e-15)) * (8*1E9))
        );
    }
	/// <summary>
    /// Extension method to convert PebiByte to PicoBit
    /// </summary>
    /// <param name="val">quantity measured in PebiByte</param>
    /// <returns>quantity measured in PicoBit</returns>
    public static Quantity<double, PicoBit> ToPicoBit<T>(this BaseQuantity<T, PebiByte> val) where T:IConvertible {
        return new Quantity<double, PicoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.1258999e-15)) * (8*1E12))
        );
    }
	/// <summary>
    /// Extension method to convert PebiByte to FemtoBit
    /// </summary>
    /// <param name="val">quantity measured in PebiByte</param>
    /// <returns>quantity measured in FemtoBit</returns>
    public static Quantity<double, FemtoBit> ToFemtoBit<T>(this BaseQuantity<T, PebiByte> val) where T:IConvertible {
        return new Quantity<double, FemtoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.1258999e-15)) * (8*1E15))
        );
    }
	/// <summary>
    /// Extension method to convert PebiByte to AttoBit
    /// </summary>
    /// <param name="val">quantity measured in PebiByte</param>
    /// <returns>quantity measured in AttoBit</returns>
    public static Quantity<double, AttoBit> ToAttoBit<T>(this BaseQuantity<T, PebiByte> val) where T:IConvertible {
        return new Quantity<double, AttoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.1258999e-15)) * (8*1E18))
        );
    }
	/// <summary>
    /// Extension method to convert PebiByte to ZeptoBit
    /// </summary>
    /// <param name="val">quantity measured in PebiByte</param>
    /// <returns>quantity measured in ZeptoBit</returns>
    public static Quantity<double, ZeptoBit> ToZeptoBit<T>(this BaseQuantity<T, PebiByte> val) where T:IConvertible {
        return new Quantity<double, ZeptoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.1258999e-15)) * (8*1E21))
        );
    }
	/// <summary>
    /// Extension method to convert PebiByte to YoctoBit
    /// </summary>
    /// <param name="val">quantity measured in PebiByte</param>
    /// <returns>quantity measured in YoctoBit</returns>
    public static Quantity<double, YoctoBit> ToYoctoBit<T>(this BaseQuantity<T, PebiByte> val) where T:IConvertible {
        return new Quantity<double, YoctoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.1258999e-15)) * (8*1E24))
        );
    }
	/// <summary>
    /// Extension method to convert PebiByte to YottaByte
    /// </summary>
    /// <param name="val">quantity measured in PebiByte</param>
    /// <returns>quantity measured in YottaByte</returns>
    public static Quantity<double, YottaByte> ToYottaByte<T>(this BaseQuantity<T, PebiByte> val) where T:IConvertible {
        return new Quantity<double, YottaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1258999e-15)) * (1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert PebiByte to ZettaByte
    /// </summary>
    /// <param name="val">quantity measured in PebiByte</param>
    /// <returns>quantity measured in ZettaByte</returns>
    public static Quantity<double, ZettaByte> ToZettaByte<T>(this BaseQuantity<T, PebiByte> val) where T:IConvertible {
        return new Quantity<double, ZettaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1258999e-15)) * (1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert PebiByte to ExaByte
    /// </summary>
    /// <param name="val">quantity measured in PebiByte</param>
    /// <returns>quantity measured in ExaByte</returns>
    public static Quantity<double, ExaByte> ToExaByte<T>(this BaseQuantity<T, PebiByte> val) where T:IConvertible {
        return new Quantity<double, ExaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1258999e-15)) * (1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert PebiByte to PetaByte
    /// </summary>
    /// <param name="val">quantity measured in PebiByte</param>
    /// <returns>quantity measured in PetaByte</returns>
    public static Quantity<double, PetaByte> ToPetaByte<T>(this BaseQuantity<T, PebiByte> val) where T:IConvertible {
        return new Quantity<double, PetaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1258999e-15)) * (1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert PebiByte to TeraByte
    /// </summary>
    /// <param name="val">quantity measured in PebiByte</param>
    /// <returns>quantity measured in TeraByte</returns>
    public static Quantity<double, TeraByte> ToTeraByte<T>(this BaseQuantity<T, PebiByte> val) where T:IConvertible {
        return new Quantity<double, TeraByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1258999e-15)) * (1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert PebiByte to GigaByte
    /// </summary>
    /// <param name="val">quantity measured in PebiByte</param>
    /// <returns>quantity measured in GigaByte</returns>
    public static Quantity<double, GigaByte> ToGigaByte<T>(this BaseQuantity<T, PebiByte> val) where T:IConvertible {
        return new Quantity<double, GigaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1258999e-15)) * (1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert PebiByte to MegaByte
    /// </summary>
    /// <param name="val">quantity measured in PebiByte</param>
    /// <returns>quantity measured in MegaByte</returns>
    public static Quantity<double, MegaByte> ToMegaByte<T>(this BaseQuantity<T, PebiByte> val) where T:IConvertible {
        return new Quantity<double, MegaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1258999e-15)) * (1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert PebiByte to KiloByte
    /// </summary>
    /// <param name="val">quantity measured in PebiByte</param>
    /// <returns>quantity measured in KiloByte</returns>
    public static Quantity<double, KiloByte> ToKiloByte<T>(this BaseQuantity<T, PebiByte> val) where T:IConvertible {
        return new Quantity<double, KiloByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1258999e-15)) * (1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert PebiByte to HectoByte
    /// </summary>
    /// <param name="val">quantity measured in PebiByte</param>
    /// <returns>quantity measured in HectoByte</returns>
    public static Quantity<double, HectoByte> ToHectoByte<T>(this BaseQuantity<T, PebiByte> val) where T:IConvertible {
        return new Quantity<double, HectoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1258999e-15)) * (1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert PebiByte to DekaByte
    /// </summary>
    /// <param name="val">quantity measured in PebiByte</param>
    /// <returns>quantity measured in DekaByte</returns>
    public static Quantity<double, DekaByte> ToDekaByte<T>(this BaseQuantity<T, PebiByte> val) where T:IConvertible {
        return new Quantity<double, DekaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1258999e-15)) * (1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert PebiByte to DeciByte
    /// </summary>
    /// <param name="val">quantity measured in PebiByte</param>
    /// <returns>quantity measured in DeciByte</returns>
    public static Quantity<double, DeciByte> ToDeciByte<T>(this BaseQuantity<T, PebiByte> val) where T:IConvertible {
        return new Quantity<double, DeciByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1258999e-15)) * (1E1))
        );
    }
	/// <summary>
    /// Extension method to convert PebiByte to CentiByte
    /// </summary>
    /// <param name="val">quantity measured in PebiByte</param>
    /// <returns>quantity measured in CentiByte</returns>
    public static Quantity<double, CentiByte> ToCentiByte<T>(this BaseQuantity<T, PebiByte> val) where T:IConvertible {
        return new Quantity<double, CentiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1258999e-15)) * (1E2))
        );
    }
	/// <summary>
    /// Extension method to convert PebiByte to MilliByte
    /// </summary>
    /// <param name="val">quantity measured in PebiByte</param>
    /// <returns>quantity measured in MilliByte</returns>
    public static Quantity<double, MilliByte> ToMilliByte<T>(this BaseQuantity<T, PebiByte> val) where T:IConvertible {
        return new Quantity<double, MilliByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1258999e-15)) * (1E3))
        );
    }
	/// <summary>
    /// Extension method to convert PebiByte to MicroByte
    /// </summary>
    /// <param name="val">quantity measured in PebiByte</param>
    /// <returns>quantity measured in MicroByte</returns>
    public static Quantity<double, MicroByte> ToMicroByte<T>(this BaseQuantity<T, PebiByte> val) where T:IConvertible {
        return new Quantity<double, MicroByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1258999e-15)) * (1E6))
        );
    }
	/// <summary>
    /// Extension method to convert PebiByte to NanoByte
    /// </summary>
    /// <param name="val">quantity measured in PebiByte</param>
    /// <returns>quantity measured in NanoByte</returns>
    public static Quantity<double, NanoByte> ToNanoByte<T>(this BaseQuantity<T, PebiByte> val) where T:IConvertible {
        return new Quantity<double, NanoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1258999e-15)) * (1E9))
        );
    }
	/// <summary>
    /// Extension method to convert PebiByte to PicoByte
    /// </summary>
    /// <param name="val">quantity measured in PebiByte</param>
    /// <returns>quantity measured in PicoByte</returns>
    public static Quantity<double, PicoByte> ToPicoByte<T>(this BaseQuantity<T, PebiByte> val) where T:IConvertible {
        return new Quantity<double, PicoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1258999e-15)) * (1E12))
        );
    }
	/// <summary>
    /// Extension method to convert PebiByte to FemtoByte
    /// </summary>
    /// <param name="val">quantity measured in PebiByte</param>
    /// <returns>quantity measured in FemtoByte</returns>
    public static Quantity<double, FemtoByte> ToFemtoByte<T>(this BaseQuantity<T, PebiByte> val) where T:IConvertible {
        return new Quantity<double, FemtoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1258999e-15)) * (1E15))
        );
    }
	/// <summary>
    /// Extension method to convert PebiByte to AttoByte
    /// </summary>
    /// <param name="val">quantity measured in PebiByte</param>
    /// <returns>quantity measured in AttoByte</returns>
    public static Quantity<double, AttoByte> ToAttoByte<T>(this BaseQuantity<T, PebiByte> val) where T:IConvertible {
        return new Quantity<double, AttoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1258999e-15)) * (1E18))
        );
    }
	/// <summary>
    /// Extension method to convert PebiByte to ZeptoByte
    /// </summary>
    /// <param name="val">quantity measured in PebiByte</param>
    /// <returns>quantity measured in ZeptoByte</returns>
    public static Quantity<double, ZeptoByte> ToZeptoByte<T>(this BaseQuantity<T, PebiByte> val) where T:IConvertible {
        return new Quantity<double, ZeptoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1258999e-15)) * (1E21))
        );
    }
	/// <summary>
    /// Extension method to convert PebiByte to YoctoByte
    /// </summary>
    /// <param name="val">quantity measured in PebiByte</param>
    /// <returns>quantity measured in YoctoByte</returns>
    public static Quantity<double, YoctoByte> ToYoctoByte<T>(this BaseQuantity<T, PebiByte> val) where T:IConvertible {
        return new Quantity<double, YoctoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1258999e-15)) * (1E24))
        );
    }
	/// <summary>
    /// Extension method to convert PebiByte to YobiByte
    /// </summary>
    /// <param name="val">quantity measured in PebiByte</param>
    /// <returns>quantity measured in YobiByte</returns>
    public static Quantity<double, YobiByte> ToYobiByte<T>(this BaseQuantity<T, PebiByte> val) where T:IConvertible {
        return new Quantity<double, YobiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1258999e-15)) * (1.2089258e-24))
        );
    }
	/// <summary>
    /// Extension method to convert PebiByte to ZebiByte
    /// </summary>
    /// <param name="val">quantity measured in PebiByte</param>
    /// <returns>quantity measured in ZebiByte</returns>
    public static Quantity<double, ZebiByte> ToZebiByte<T>(this BaseQuantity<T, PebiByte> val) where T:IConvertible {
        return new Quantity<double, ZebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1258999e-15)) * (1.1805916e-21))
        );
    }
	/// <summary>
    /// Extension method to convert PebiByte to ExbiByte
    /// </summary>
    /// <param name="val">quantity measured in PebiByte</param>
    /// <returns>quantity measured in ExbiByte</returns>
    public static Quantity<double, ExbiByte> ToExbiByte<T>(this BaseQuantity<T, PebiByte> val) where T:IConvertible {
        return new Quantity<double, ExbiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1258999e-15)) * (1.1529215e-18))
        );
    }
	/// <summary>
    /// Extension method to convert PebiByte to TebiByte
    /// </summary>
    /// <param name="val">quantity measured in PebiByte</param>
    /// <returns>quantity measured in TebiByte</returns>
    public static Quantity<double, TebiByte> ToTebiByte<T>(this BaseQuantity<T, PebiByte> val) where T:IConvertible {
        return new Quantity<double, TebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1258999e-15)) * (1.0995116e-12))
        );
    }
	/// <summary>
    /// Extension method to convert PebiByte to GibiByte
    /// </summary>
    /// <param name="val">quantity measured in PebiByte</param>
    /// <returns>quantity measured in GibiByte</returns>
    public static Quantity<double, GibiByte> ToGibiByte<T>(this BaseQuantity<T, PebiByte> val) where T:IConvertible {
        return new Quantity<double, GibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1258999e-15)) * (1d/1073741824))
        );
    }
	/// <summary>
    /// Extension method to convert PebiByte to MebiByte
    /// </summary>
    /// <param name="val">quantity measured in PebiByte</param>
    /// <returns>quantity measured in MebiByte</returns>
    public static Quantity<double, MebiByte> ToMebiByte<T>(this BaseQuantity<T, PebiByte> val) where T:IConvertible {
        return new Quantity<double, MebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1258999e-15)) * (1d/1048576))
        );
    }
	/// <summary>
    /// Extension method to convert PebiByte to KibiByte
    /// </summary>
    /// <param name="val">quantity measured in PebiByte</param>
    /// <returns>quantity measured in KibiByte</returns>
    public static Quantity<double, KibiByte> ToKibiByte<T>(this BaseQuantity<T, PebiByte> val) where T:IConvertible {
        return new Quantity<double, KibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.1258999e-15)) * (1d/1024))
        );
    }
	/// <summary>
    /// Extension method to convert Byte to TebiByte
    /// </summary>
    /// <param name="val">quantity measured in Byte</param>
    /// <returns>quantity measured in TebiByte</returns>
    public static Quantity<double, TebiByte> ToTebiByte<T>(this BaseQuantity<T, Byte> val) where T:IConvertible {
        return new Quantity<double, TebiByte>(
            Convert.ToDouble(val.Value) * (1.0995116e-12)
        );
    }
	/// <summary>
    /// Extension method to convert TebiByte to Byte
    /// </summary>
    /// <param name="val">quantity measured in TebiByte</param>
    /// <returns>quantity measured in Byte</returns>
    public static Quantity<double, Byte> ToByte<T>(this BaseQuantity<T, TebiByte> val) where T:IConvertible {
        return new Quantity<double, Byte>(
            Convert.ToDouble(val.Value) * (1d/(1.0995116e-12))
        );
    }
	/// <summary>
    /// Extension method to convert TebiByte to Bit
    /// </summary>
    /// <param name="val">quantity measured in TebiByte</param>
    /// <returns>quantity measured in Bit</returns>
    public static Quantity<double, Bit> ToBit<T>(this BaseQuantity<T, TebiByte> val) where T:IConvertible {
        return new Quantity<double, Bit>(
            Convert.ToDouble(val.Value) * ((1d/(1.0995116e-12)) * (8))
        );
    }
	/// <summary>
    /// Extension method to convert TebiByte to YottaBit
    /// </summary>
    /// <param name="val">quantity measured in TebiByte</param>
    /// <returns>quantity measured in YottaBit</returns>
    public static Quantity<double, YottaBit> ToYottaBit<T>(this BaseQuantity<T, TebiByte> val) where T:IConvertible {
        return new Quantity<double, YottaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.0995116e-12)) * (8*1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert TebiByte to ZettaBit
    /// </summary>
    /// <param name="val">quantity measured in TebiByte</param>
    /// <returns>quantity measured in ZettaBit</returns>
    public static Quantity<double, ZettaBit> ToZettaBit<T>(this BaseQuantity<T, TebiByte> val) where T:IConvertible {
        return new Quantity<double, ZettaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.0995116e-12)) * (8*1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert TebiByte to ExaBit
    /// </summary>
    /// <param name="val">quantity measured in TebiByte</param>
    /// <returns>quantity measured in ExaBit</returns>
    public static Quantity<double, ExaBit> ToExaBit<T>(this BaseQuantity<T, TebiByte> val) where T:IConvertible {
        return new Quantity<double, ExaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.0995116e-12)) * (8*1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert TebiByte to PetaBit
    /// </summary>
    /// <param name="val">quantity measured in TebiByte</param>
    /// <returns>quantity measured in PetaBit</returns>
    public static Quantity<double, PetaBit> ToPetaBit<T>(this BaseQuantity<T, TebiByte> val) where T:IConvertible {
        return new Quantity<double, PetaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.0995116e-12)) * (8*1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert TebiByte to TeraBit
    /// </summary>
    /// <param name="val">quantity measured in TebiByte</param>
    /// <returns>quantity measured in TeraBit</returns>
    public static Quantity<double, TeraBit> ToTeraBit<T>(this BaseQuantity<T, TebiByte> val) where T:IConvertible {
        return new Quantity<double, TeraBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.0995116e-12)) * (8*1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert TebiByte to GigaBit
    /// </summary>
    /// <param name="val">quantity measured in TebiByte</param>
    /// <returns>quantity measured in GigaBit</returns>
    public static Quantity<double, GigaBit> ToGigaBit<T>(this BaseQuantity<T, TebiByte> val) where T:IConvertible {
        return new Quantity<double, GigaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.0995116e-12)) * (8*1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert TebiByte to MegaBit
    /// </summary>
    /// <param name="val">quantity measured in TebiByte</param>
    /// <returns>quantity measured in MegaBit</returns>
    public static Quantity<double, MegaBit> ToMegaBit<T>(this BaseQuantity<T, TebiByte> val) where T:IConvertible {
        return new Quantity<double, MegaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.0995116e-12)) * (8*1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert TebiByte to KiloBit
    /// </summary>
    /// <param name="val">quantity measured in TebiByte</param>
    /// <returns>quantity measured in KiloBit</returns>
    public static Quantity<double, KiloBit> ToKiloBit<T>(this BaseQuantity<T, TebiByte> val) where T:IConvertible {
        return new Quantity<double, KiloBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.0995116e-12)) * (8*1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert TebiByte to HectoBit
    /// </summary>
    /// <param name="val">quantity measured in TebiByte</param>
    /// <returns>quantity measured in HectoBit</returns>
    public static Quantity<double, HectoBit> ToHectoBit<T>(this BaseQuantity<T, TebiByte> val) where T:IConvertible {
        return new Quantity<double, HectoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.0995116e-12)) * (8*1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert TebiByte to DekaBit
    /// </summary>
    /// <param name="val">quantity measured in TebiByte</param>
    /// <returns>quantity measured in DekaBit</returns>
    public static Quantity<double, DekaBit> ToDekaBit<T>(this BaseQuantity<T, TebiByte> val) where T:IConvertible {
        return new Quantity<double, DekaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.0995116e-12)) * (8*1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert TebiByte to DeciBit
    /// </summary>
    /// <param name="val">quantity measured in TebiByte</param>
    /// <returns>quantity measured in DeciBit</returns>
    public static Quantity<double, DeciBit> ToDeciBit<T>(this BaseQuantity<T, TebiByte> val) where T:IConvertible {
        return new Quantity<double, DeciBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.0995116e-12)) * (8*1E1))
        );
    }
	/// <summary>
    /// Extension method to convert TebiByte to CentiBit
    /// </summary>
    /// <param name="val">quantity measured in TebiByte</param>
    /// <returns>quantity measured in CentiBit</returns>
    public static Quantity<double, CentiBit> ToCentiBit<T>(this BaseQuantity<T, TebiByte> val) where T:IConvertible {
        return new Quantity<double, CentiBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.0995116e-12)) * (8*1E2))
        );
    }
	/// <summary>
    /// Extension method to convert TebiByte to MilliBit
    /// </summary>
    /// <param name="val">quantity measured in TebiByte</param>
    /// <returns>quantity measured in MilliBit</returns>
    public static Quantity<double, MilliBit> ToMilliBit<T>(this BaseQuantity<T, TebiByte> val) where T:IConvertible {
        return new Quantity<double, MilliBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.0995116e-12)) * (8*1E3))
        );
    }
	/// <summary>
    /// Extension method to convert TebiByte to MicroBit
    /// </summary>
    /// <param name="val">quantity measured in TebiByte</param>
    /// <returns>quantity measured in MicroBit</returns>
    public static Quantity<double, MicroBit> ToMicroBit<T>(this BaseQuantity<T, TebiByte> val) where T:IConvertible {
        return new Quantity<double, MicroBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.0995116e-12)) * (8*1E6))
        );
    }
	/// <summary>
    /// Extension method to convert TebiByte to NanoBit
    /// </summary>
    /// <param name="val">quantity measured in TebiByte</param>
    /// <returns>quantity measured in NanoBit</returns>
    public static Quantity<double, NanoBit> ToNanoBit<T>(this BaseQuantity<T, TebiByte> val) where T:IConvertible {
        return new Quantity<double, NanoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.0995116e-12)) * (8*1E9))
        );
    }
	/// <summary>
    /// Extension method to convert TebiByte to PicoBit
    /// </summary>
    /// <param name="val">quantity measured in TebiByte</param>
    /// <returns>quantity measured in PicoBit</returns>
    public static Quantity<double, PicoBit> ToPicoBit<T>(this BaseQuantity<T, TebiByte> val) where T:IConvertible {
        return new Quantity<double, PicoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.0995116e-12)) * (8*1E12))
        );
    }
	/// <summary>
    /// Extension method to convert TebiByte to FemtoBit
    /// </summary>
    /// <param name="val">quantity measured in TebiByte</param>
    /// <returns>quantity measured in FemtoBit</returns>
    public static Quantity<double, FemtoBit> ToFemtoBit<T>(this BaseQuantity<T, TebiByte> val) where T:IConvertible {
        return new Quantity<double, FemtoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.0995116e-12)) * (8*1E15))
        );
    }
	/// <summary>
    /// Extension method to convert TebiByte to AttoBit
    /// </summary>
    /// <param name="val">quantity measured in TebiByte</param>
    /// <returns>quantity measured in AttoBit</returns>
    public static Quantity<double, AttoBit> ToAttoBit<T>(this BaseQuantity<T, TebiByte> val) where T:IConvertible {
        return new Quantity<double, AttoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.0995116e-12)) * (8*1E18))
        );
    }
	/// <summary>
    /// Extension method to convert TebiByte to ZeptoBit
    /// </summary>
    /// <param name="val">quantity measured in TebiByte</param>
    /// <returns>quantity measured in ZeptoBit</returns>
    public static Quantity<double, ZeptoBit> ToZeptoBit<T>(this BaseQuantity<T, TebiByte> val) where T:IConvertible {
        return new Quantity<double, ZeptoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.0995116e-12)) * (8*1E21))
        );
    }
	/// <summary>
    /// Extension method to convert TebiByte to YoctoBit
    /// </summary>
    /// <param name="val">quantity measured in TebiByte</param>
    /// <returns>quantity measured in YoctoBit</returns>
    public static Quantity<double, YoctoBit> ToYoctoBit<T>(this BaseQuantity<T, TebiByte> val) where T:IConvertible {
        return new Quantity<double, YoctoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1.0995116e-12)) * (8*1E24))
        );
    }
	/// <summary>
    /// Extension method to convert TebiByte to YottaByte
    /// </summary>
    /// <param name="val">quantity measured in TebiByte</param>
    /// <returns>quantity measured in YottaByte</returns>
    public static Quantity<double, YottaByte> ToYottaByte<T>(this BaseQuantity<T, TebiByte> val) where T:IConvertible {
        return new Quantity<double, YottaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.0995116e-12)) * (1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert TebiByte to ZettaByte
    /// </summary>
    /// <param name="val">quantity measured in TebiByte</param>
    /// <returns>quantity measured in ZettaByte</returns>
    public static Quantity<double, ZettaByte> ToZettaByte<T>(this BaseQuantity<T, TebiByte> val) where T:IConvertible {
        return new Quantity<double, ZettaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.0995116e-12)) * (1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert TebiByte to ExaByte
    /// </summary>
    /// <param name="val">quantity measured in TebiByte</param>
    /// <returns>quantity measured in ExaByte</returns>
    public static Quantity<double, ExaByte> ToExaByte<T>(this BaseQuantity<T, TebiByte> val) where T:IConvertible {
        return new Quantity<double, ExaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.0995116e-12)) * (1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert TebiByte to PetaByte
    /// </summary>
    /// <param name="val">quantity measured in TebiByte</param>
    /// <returns>quantity measured in PetaByte</returns>
    public static Quantity<double, PetaByte> ToPetaByte<T>(this BaseQuantity<T, TebiByte> val) where T:IConvertible {
        return new Quantity<double, PetaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.0995116e-12)) * (1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert TebiByte to TeraByte
    /// </summary>
    /// <param name="val">quantity measured in TebiByte</param>
    /// <returns>quantity measured in TeraByte</returns>
    public static Quantity<double, TeraByte> ToTeraByte<T>(this BaseQuantity<T, TebiByte> val) where T:IConvertible {
        return new Quantity<double, TeraByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.0995116e-12)) * (1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert TebiByte to GigaByte
    /// </summary>
    /// <param name="val">quantity measured in TebiByte</param>
    /// <returns>quantity measured in GigaByte</returns>
    public static Quantity<double, GigaByte> ToGigaByte<T>(this BaseQuantity<T, TebiByte> val) where T:IConvertible {
        return new Quantity<double, GigaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.0995116e-12)) * (1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert TebiByte to MegaByte
    /// </summary>
    /// <param name="val">quantity measured in TebiByte</param>
    /// <returns>quantity measured in MegaByte</returns>
    public static Quantity<double, MegaByte> ToMegaByte<T>(this BaseQuantity<T, TebiByte> val) where T:IConvertible {
        return new Quantity<double, MegaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.0995116e-12)) * (1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert TebiByte to KiloByte
    /// </summary>
    /// <param name="val">quantity measured in TebiByte</param>
    /// <returns>quantity measured in KiloByte</returns>
    public static Quantity<double, KiloByte> ToKiloByte<T>(this BaseQuantity<T, TebiByte> val) where T:IConvertible {
        return new Quantity<double, KiloByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.0995116e-12)) * (1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert TebiByte to HectoByte
    /// </summary>
    /// <param name="val">quantity measured in TebiByte</param>
    /// <returns>quantity measured in HectoByte</returns>
    public static Quantity<double, HectoByte> ToHectoByte<T>(this BaseQuantity<T, TebiByte> val) where T:IConvertible {
        return new Quantity<double, HectoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.0995116e-12)) * (1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert TebiByte to DekaByte
    /// </summary>
    /// <param name="val">quantity measured in TebiByte</param>
    /// <returns>quantity measured in DekaByte</returns>
    public static Quantity<double, DekaByte> ToDekaByte<T>(this BaseQuantity<T, TebiByte> val) where T:IConvertible {
        return new Quantity<double, DekaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.0995116e-12)) * (1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert TebiByte to DeciByte
    /// </summary>
    /// <param name="val">quantity measured in TebiByte</param>
    /// <returns>quantity measured in DeciByte</returns>
    public static Quantity<double, DeciByte> ToDeciByte<T>(this BaseQuantity<T, TebiByte> val) where T:IConvertible {
        return new Quantity<double, DeciByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.0995116e-12)) * (1E1))
        );
    }
	/// <summary>
    /// Extension method to convert TebiByte to CentiByte
    /// </summary>
    /// <param name="val">quantity measured in TebiByte</param>
    /// <returns>quantity measured in CentiByte</returns>
    public static Quantity<double, CentiByte> ToCentiByte<T>(this BaseQuantity<T, TebiByte> val) where T:IConvertible {
        return new Quantity<double, CentiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.0995116e-12)) * (1E2))
        );
    }
	/// <summary>
    /// Extension method to convert TebiByte to MilliByte
    /// </summary>
    /// <param name="val">quantity measured in TebiByte</param>
    /// <returns>quantity measured in MilliByte</returns>
    public static Quantity<double, MilliByte> ToMilliByte<T>(this BaseQuantity<T, TebiByte> val) where T:IConvertible {
        return new Quantity<double, MilliByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.0995116e-12)) * (1E3))
        );
    }
	/// <summary>
    /// Extension method to convert TebiByte to MicroByte
    /// </summary>
    /// <param name="val">quantity measured in TebiByte</param>
    /// <returns>quantity measured in MicroByte</returns>
    public static Quantity<double, MicroByte> ToMicroByte<T>(this BaseQuantity<T, TebiByte> val) where T:IConvertible {
        return new Quantity<double, MicroByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.0995116e-12)) * (1E6))
        );
    }
	/// <summary>
    /// Extension method to convert TebiByte to NanoByte
    /// </summary>
    /// <param name="val">quantity measured in TebiByte</param>
    /// <returns>quantity measured in NanoByte</returns>
    public static Quantity<double, NanoByte> ToNanoByte<T>(this BaseQuantity<T, TebiByte> val) where T:IConvertible {
        return new Quantity<double, NanoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.0995116e-12)) * (1E9))
        );
    }
	/// <summary>
    /// Extension method to convert TebiByte to PicoByte
    /// </summary>
    /// <param name="val">quantity measured in TebiByte</param>
    /// <returns>quantity measured in PicoByte</returns>
    public static Quantity<double, PicoByte> ToPicoByte<T>(this BaseQuantity<T, TebiByte> val) where T:IConvertible {
        return new Quantity<double, PicoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.0995116e-12)) * (1E12))
        );
    }
	/// <summary>
    /// Extension method to convert TebiByte to FemtoByte
    /// </summary>
    /// <param name="val">quantity measured in TebiByte</param>
    /// <returns>quantity measured in FemtoByte</returns>
    public static Quantity<double, FemtoByte> ToFemtoByte<T>(this BaseQuantity<T, TebiByte> val) where T:IConvertible {
        return new Quantity<double, FemtoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.0995116e-12)) * (1E15))
        );
    }
	/// <summary>
    /// Extension method to convert TebiByte to AttoByte
    /// </summary>
    /// <param name="val">quantity measured in TebiByte</param>
    /// <returns>quantity measured in AttoByte</returns>
    public static Quantity<double, AttoByte> ToAttoByte<T>(this BaseQuantity<T, TebiByte> val) where T:IConvertible {
        return new Quantity<double, AttoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.0995116e-12)) * (1E18))
        );
    }
	/// <summary>
    /// Extension method to convert TebiByte to ZeptoByte
    /// </summary>
    /// <param name="val">quantity measured in TebiByte</param>
    /// <returns>quantity measured in ZeptoByte</returns>
    public static Quantity<double, ZeptoByte> ToZeptoByte<T>(this BaseQuantity<T, TebiByte> val) where T:IConvertible {
        return new Quantity<double, ZeptoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.0995116e-12)) * (1E21))
        );
    }
	/// <summary>
    /// Extension method to convert TebiByte to YoctoByte
    /// </summary>
    /// <param name="val">quantity measured in TebiByte</param>
    /// <returns>quantity measured in YoctoByte</returns>
    public static Quantity<double, YoctoByte> ToYoctoByte<T>(this BaseQuantity<T, TebiByte> val) where T:IConvertible {
        return new Quantity<double, YoctoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.0995116e-12)) * (1E24))
        );
    }
	/// <summary>
    /// Extension method to convert TebiByte to YobiByte
    /// </summary>
    /// <param name="val">quantity measured in TebiByte</param>
    /// <returns>quantity measured in YobiByte</returns>
    public static Quantity<double, YobiByte> ToYobiByte<T>(this BaseQuantity<T, TebiByte> val) where T:IConvertible {
        return new Quantity<double, YobiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.0995116e-12)) * (1.2089258e-24))
        );
    }
	/// <summary>
    /// Extension method to convert TebiByte to ZebiByte
    /// </summary>
    /// <param name="val">quantity measured in TebiByte</param>
    /// <returns>quantity measured in ZebiByte</returns>
    public static Quantity<double, ZebiByte> ToZebiByte<T>(this BaseQuantity<T, TebiByte> val) where T:IConvertible {
        return new Quantity<double, ZebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.0995116e-12)) * (1.1805916e-21))
        );
    }
	/// <summary>
    /// Extension method to convert TebiByte to ExbiByte
    /// </summary>
    /// <param name="val">quantity measured in TebiByte</param>
    /// <returns>quantity measured in ExbiByte</returns>
    public static Quantity<double, ExbiByte> ToExbiByte<T>(this BaseQuantity<T, TebiByte> val) where T:IConvertible {
        return new Quantity<double, ExbiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.0995116e-12)) * (1.1529215e-18))
        );
    }
	/// <summary>
    /// Extension method to convert TebiByte to PebiByte
    /// </summary>
    /// <param name="val">quantity measured in TebiByte</param>
    /// <returns>quantity measured in PebiByte</returns>
    public static Quantity<double, PebiByte> ToPebiByte<T>(this BaseQuantity<T, TebiByte> val) where T:IConvertible {
        return new Quantity<double, PebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.0995116e-12)) * (1.1258999e-15))
        );
    }
	/// <summary>
    /// Extension method to convert TebiByte to GibiByte
    /// </summary>
    /// <param name="val">quantity measured in TebiByte</param>
    /// <returns>quantity measured in GibiByte</returns>
    public static Quantity<double, GibiByte> ToGibiByte<T>(this BaseQuantity<T, TebiByte> val) where T:IConvertible {
        return new Quantity<double, GibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.0995116e-12)) * (1d/1073741824))
        );
    }
	/// <summary>
    /// Extension method to convert TebiByte to MebiByte
    /// </summary>
    /// <param name="val">quantity measured in TebiByte</param>
    /// <returns>quantity measured in MebiByte</returns>
    public static Quantity<double, MebiByte> ToMebiByte<T>(this BaseQuantity<T, TebiByte> val) where T:IConvertible {
        return new Quantity<double, MebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.0995116e-12)) * (1d/1048576))
        );
    }
	/// <summary>
    /// Extension method to convert TebiByte to KibiByte
    /// </summary>
    /// <param name="val">quantity measured in TebiByte</param>
    /// <returns>quantity measured in KibiByte</returns>
    public static Quantity<double, KibiByte> ToKibiByte<T>(this BaseQuantity<T, TebiByte> val) where T:IConvertible {
        return new Quantity<double, KibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1.0995116e-12)) * (1d/1024))
        );
    }
	/// <summary>
    /// Extension method to convert Byte to GibiByte
    /// </summary>
    /// <param name="val">quantity measured in Byte</param>
    /// <returns>quantity measured in GibiByte</returns>
    public static Quantity<double, GibiByte> ToGibiByte<T>(this BaseQuantity<T, Byte> val) where T:IConvertible {
        return new Quantity<double, GibiByte>(
            Convert.ToDouble(val.Value) * (1d/1073741824)
        );
    }
	/// <summary>
    /// Extension method to convert GibiByte to Byte
    /// </summary>
    /// <param name="val">quantity measured in GibiByte</param>
    /// <returns>quantity measured in Byte</returns>
    public static Quantity<double, Byte> ToByte<T>(this BaseQuantity<T, GibiByte> val) where T:IConvertible {
        return new Quantity<double, Byte>(
            Convert.ToDouble(val.Value) * (1d/(1d/1073741824))
        );
    }
	/// <summary>
    /// Extension method to convert GibiByte to Bit
    /// </summary>
    /// <param name="val">quantity measured in GibiByte</param>
    /// <returns>quantity measured in Bit</returns>
    public static Quantity<double, Bit> ToBit<T>(this BaseQuantity<T, GibiByte> val) where T:IConvertible {
        return new Quantity<double, Bit>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1073741824)) * (8))
        );
    }
	/// <summary>
    /// Extension method to convert GibiByte to YottaBit
    /// </summary>
    /// <param name="val">quantity measured in GibiByte</param>
    /// <returns>quantity measured in YottaBit</returns>
    public static Quantity<double, YottaBit> ToYottaBit<T>(this BaseQuantity<T, GibiByte> val) where T:IConvertible {
        return new Quantity<double, YottaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1073741824)) * (8*1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert GibiByte to ZettaBit
    /// </summary>
    /// <param name="val">quantity measured in GibiByte</param>
    /// <returns>quantity measured in ZettaBit</returns>
    public static Quantity<double, ZettaBit> ToZettaBit<T>(this BaseQuantity<T, GibiByte> val) where T:IConvertible {
        return new Quantity<double, ZettaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1073741824)) * (8*1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert GibiByte to ExaBit
    /// </summary>
    /// <param name="val">quantity measured in GibiByte</param>
    /// <returns>quantity measured in ExaBit</returns>
    public static Quantity<double, ExaBit> ToExaBit<T>(this BaseQuantity<T, GibiByte> val) where T:IConvertible {
        return new Quantity<double, ExaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1073741824)) * (8*1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert GibiByte to PetaBit
    /// </summary>
    /// <param name="val">quantity measured in GibiByte</param>
    /// <returns>quantity measured in PetaBit</returns>
    public static Quantity<double, PetaBit> ToPetaBit<T>(this BaseQuantity<T, GibiByte> val) where T:IConvertible {
        return new Quantity<double, PetaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1073741824)) * (8*1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert GibiByte to TeraBit
    /// </summary>
    /// <param name="val">quantity measured in GibiByte</param>
    /// <returns>quantity measured in TeraBit</returns>
    public static Quantity<double, TeraBit> ToTeraBit<T>(this BaseQuantity<T, GibiByte> val) where T:IConvertible {
        return new Quantity<double, TeraBit>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1073741824)) * (8*1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert GibiByte to GigaBit
    /// </summary>
    /// <param name="val">quantity measured in GibiByte</param>
    /// <returns>quantity measured in GigaBit</returns>
    public static Quantity<double, GigaBit> ToGigaBit<T>(this BaseQuantity<T, GibiByte> val) where T:IConvertible {
        return new Quantity<double, GigaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1073741824)) * (8*1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert GibiByte to MegaBit
    /// </summary>
    /// <param name="val">quantity measured in GibiByte</param>
    /// <returns>quantity measured in MegaBit</returns>
    public static Quantity<double, MegaBit> ToMegaBit<T>(this BaseQuantity<T, GibiByte> val) where T:IConvertible {
        return new Quantity<double, MegaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1073741824)) * (8*1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert GibiByte to KiloBit
    /// </summary>
    /// <param name="val">quantity measured in GibiByte</param>
    /// <returns>quantity measured in KiloBit</returns>
    public static Quantity<double, KiloBit> ToKiloBit<T>(this BaseQuantity<T, GibiByte> val) where T:IConvertible {
        return new Quantity<double, KiloBit>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1073741824)) * (8*1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert GibiByte to HectoBit
    /// </summary>
    /// <param name="val">quantity measured in GibiByte</param>
    /// <returns>quantity measured in HectoBit</returns>
    public static Quantity<double, HectoBit> ToHectoBit<T>(this BaseQuantity<T, GibiByte> val) where T:IConvertible {
        return new Quantity<double, HectoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1073741824)) * (8*1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert GibiByte to DekaBit
    /// </summary>
    /// <param name="val">quantity measured in GibiByte</param>
    /// <returns>quantity measured in DekaBit</returns>
    public static Quantity<double, DekaBit> ToDekaBit<T>(this BaseQuantity<T, GibiByte> val) where T:IConvertible {
        return new Quantity<double, DekaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1073741824)) * (8*1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert GibiByte to DeciBit
    /// </summary>
    /// <param name="val">quantity measured in GibiByte</param>
    /// <returns>quantity measured in DeciBit</returns>
    public static Quantity<double, DeciBit> ToDeciBit<T>(this BaseQuantity<T, GibiByte> val) where T:IConvertible {
        return new Quantity<double, DeciBit>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1073741824)) * (8*1E1))
        );
    }
	/// <summary>
    /// Extension method to convert GibiByte to CentiBit
    /// </summary>
    /// <param name="val">quantity measured in GibiByte</param>
    /// <returns>quantity measured in CentiBit</returns>
    public static Quantity<double, CentiBit> ToCentiBit<T>(this BaseQuantity<T, GibiByte> val) where T:IConvertible {
        return new Quantity<double, CentiBit>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1073741824)) * (8*1E2))
        );
    }
	/// <summary>
    /// Extension method to convert GibiByte to MilliBit
    /// </summary>
    /// <param name="val">quantity measured in GibiByte</param>
    /// <returns>quantity measured in MilliBit</returns>
    public static Quantity<double, MilliBit> ToMilliBit<T>(this BaseQuantity<T, GibiByte> val) where T:IConvertible {
        return new Quantity<double, MilliBit>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1073741824)) * (8*1E3))
        );
    }
	/// <summary>
    /// Extension method to convert GibiByte to MicroBit
    /// </summary>
    /// <param name="val">quantity measured in GibiByte</param>
    /// <returns>quantity measured in MicroBit</returns>
    public static Quantity<double, MicroBit> ToMicroBit<T>(this BaseQuantity<T, GibiByte> val) where T:IConvertible {
        return new Quantity<double, MicroBit>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1073741824)) * (8*1E6))
        );
    }
	/// <summary>
    /// Extension method to convert GibiByte to NanoBit
    /// </summary>
    /// <param name="val">quantity measured in GibiByte</param>
    /// <returns>quantity measured in NanoBit</returns>
    public static Quantity<double, NanoBit> ToNanoBit<T>(this BaseQuantity<T, GibiByte> val) where T:IConvertible {
        return new Quantity<double, NanoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1073741824)) * (8*1E9))
        );
    }
	/// <summary>
    /// Extension method to convert GibiByte to PicoBit
    /// </summary>
    /// <param name="val">quantity measured in GibiByte</param>
    /// <returns>quantity measured in PicoBit</returns>
    public static Quantity<double, PicoBit> ToPicoBit<T>(this BaseQuantity<T, GibiByte> val) where T:IConvertible {
        return new Quantity<double, PicoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1073741824)) * (8*1E12))
        );
    }
	/// <summary>
    /// Extension method to convert GibiByte to FemtoBit
    /// </summary>
    /// <param name="val">quantity measured in GibiByte</param>
    /// <returns>quantity measured in FemtoBit</returns>
    public static Quantity<double, FemtoBit> ToFemtoBit<T>(this BaseQuantity<T, GibiByte> val) where T:IConvertible {
        return new Quantity<double, FemtoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1073741824)) * (8*1E15))
        );
    }
	/// <summary>
    /// Extension method to convert GibiByte to AttoBit
    /// </summary>
    /// <param name="val">quantity measured in GibiByte</param>
    /// <returns>quantity measured in AttoBit</returns>
    public static Quantity<double, AttoBit> ToAttoBit<T>(this BaseQuantity<T, GibiByte> val) where T:IConvertible {
        return new Quantity<double, AttoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1073741824)) * (8*1E18))
        );
    }
	/// <summary>
    /// Extension method to convert GibiByte to ZeptoBit
    /// </summary>
    /// <param name="val">quantity measured in GibiByte</param>
    /// <returns>quantity measured in ZeptoBit</returns>
    public static Quantity<double, ZeptoBit> ToZeptoBit<T>(this BaseQuantity<T, GibiByte> val) where T:IConvertible {
        return new Quantity<double, ZeptoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1073741824)) * (8*1E21))
        );
    }
	/// <summary>
    /// Extension method to convert GibiByte to YoctoBit
    /// </summary>
    /// <param name="val">quantity measured in GibiByte</param>
    /// <returns>quantity measured in YoctoBit</returns>
    public static Quantity<double, YoctoBit> ToYoctoBit<T>(this BaseQuantity<T, GibiByte> val) where T:IConvertible {
        return new Quantity<double, YoctoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1073741824)) * (8*1E24))
        );
    }
	/// <summary>
    /// Extension method to convert GibiByte to YottaByte
    /// </summary>
    /// <param name="val">quantity measured in GibiByte</param>
    /// <returns>quantity measured in YottaByte</returns>
    public static Quantity<double, YottaByte> ToYottaByte<T>(this BaseQuantity<T, GibiByte> val) where T:IConvertible {
        return new Quantity<double, YottaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1073741824)) * (1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert GibiByte to ZettaByte
    /// </summary>
    /// <param name="val">quantity measured in GibiByte</param>
    /// <returns>quantity measured in ZettaByte</returns>
    public static Quantity<double, ZettaByte> ToZettaByte<T>(this BaseQuantity<T, GibiByte> val) where T:IConvertible {
        return new Quantity<double, ZettaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1073741824)) * (1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert GibiByte to ExaByte
    /// </summary>
    /// <param name="val">quantity measured in GibiByte</param>
    /// <returns>quantity measured in ExaByte</returns>
    public static Quantity<double, ExaByte> ToExaByte<T>(this BaseQuantity<T, GibiByte> val) where T:IConvertible {
        return new Quantity<double, ExaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1073741824)) * (1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert GibiByte to PetaByte
    /// </summary>
    /// <param name="val">quantity measured in GibiByte</param>
    /// <returns>quantity measured in PetaByte</returns>
    public static Quantity<double, PetaByte> ToPetaByte<T>(this BaseQuantity<T, GibiByte> val) where T:IConvertible {
        return new Quantity<double, PetaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1073741824)) * (1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert GibiByte to TeraByte
    /// </summary>
    /// <param name="val">quantity measured in GibiByte</param>
    /// <returns>quantity measured in TeraByte</returns>
    public static Quantity<double, TeraByte> ToTeraByte<T>(this BaseQuantity<T, GibiByte> val) where T:IConvertible {
        return new Quantity<double, TeraByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1073741824)) * (1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert GibiByte to GigaByte
    /// </summary>
    /// <param name="val">quantity measured in GibiByte</param>
    /// <returns>quantity measured in GigaByte</returns>
    public static Quantity<double, GigaByte> ToGigaByte<T>(this BaseQuantity<T, GibiByte> val) where T:IConvertible {
        return new Quantity<double, GigaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1073741824)) * (1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert GibiByte to MegaByte
    /// </summary>
    /// <param name="val">quantity measured in GibiByte</param>
    /// <returns>quantity measured in MegaByte</returns>
    public static Quantity<double, MegaByte> ToMegaByte<T>(this BaseQuantity<T, GibiByte> val) where T:IConvertible {
        return new Quantity<double, MegaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1073741824)) * (1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert GibiByte to KiloByte
    /// </summary>
    /// <param name="val">quantity measured in GibiByte</param>
    /// <returns>quantity measured in KiloByte</returns>
    public static Quantity<double, KiloByte> ToKiloByte<T>(this BaseQuantity<T, GibiByte> val) where T:IConvertible {
        return new Quantity<double, KiloByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1073741824)) * (1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert GibiByte to HectoByte
    /// </summary>
    /// <param name="val">quantity measured in GibiByte</param>
    /// <returns>quantity measured in HectoByte</returns>
    public static Quantity<double, HectoByte> ToHectoByte<T>(this BaseQuantity<T, GibiByte> val) where T:IConvertible {
        return new Quantity<double, HectoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1073741824)) * (1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert GibiByte to DekaByte
    /// </summary>
    /// <param name="val">quantity measured in GibiByte</param>
    /// <returns>quantity measured in DekaByte</returns>
    public static Quantity<double, DekaByte> ToDekaByte<T>(this BaseQuantity<T, GibiByte> val) where T:IConvertible {
        return new Quantity<double, DekaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1073741824)) * (1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert GibiByte to DeciByte
    /// </summary>
    /// <param name="val">quantity measured in GibiByte</param>
    /// <returns>quantity measured in DeciByte</returns>
    public static Quantity<double, DeciByte> ToDeciByte<T>(this BaseQuantity<T, GibiByte> val) where T:IConvertible {
        return new Quantity<double, DeciByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1073741824)) * (1E1))
        );
    }
	/// <summary>
    /// Extension method to convert GibiByte to CentiByte
    /// </summary>
    /// <param name="val">quantity measured in GibiByte</param>
    /// <returns>quantity measured in CentiByte</returns>
    public static Quantity<double, CentiByte> ToCentiByte<T>(this BaseQuantity<T, GibiByte> val) where T:IConvertible {
        return new Quantity<double, CentiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1073741824)) * (1E2))
        );
    }
	/// <summary>
    /// Extension method to convert GibiByte to MilliByte
    /// </summary>
    /// <param name="val">quantity measured in GibiByte</param>
    /// <returns>quantity measured in MilliByte</returns>
    public static Quantity<double, MilliByte> ToMilliByte<T>(this BaseQuantity<T, GibiByte> val) where T:IConvertible {
        return new Quantity<double, MilliByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1073741824)) * (1E3))
        );
    }
	/// <summary>
    /// Extension method to convert GibiByte to MicroByte
    /// </summary>
    /// <param name="val">quantity measured in GibiByte</param>
    /// <returns>quantity measured in MicroByte</returns>
    public static Quantity<double, MicroByte> ToMicroByte<T>(this BaseQuantity<T, GibiByte> val) where T:IConvertible {
        return new Quantity<double, MicroByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1073741824)) * (1E6))
        );
    }
	/// <summary>
    /// Extension method to convert GibiByte to NanoByte
    /// </summary>
    /// <param name="val">quantity measured in GibiByte</param>
    /// <returns>quantity measured in NanoByte</returns>
    public static Quantity<double, NanoByte> ToNanoByte<T>(this BaseQuantity<T, GibiByte> val) where T:IConvertible {
        return new Quantity<double, NanoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1073741824)) * (1E9))
        );
    }
	/// <summary>
    /// Extension method to convert GibiByte to PicoByte
    /// </summary>
    /// <param name="val">quantity measured in GibiByte</param>
    /// <returns>quantity measured in PicoByte</returns>
    public static Quantity<double, PicoByte> ToPicoByte<T>(this BaseQuantity<T, GibiByte> val) where T:IConvertible {
        return new Quantity<double, PicoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1073741824)) * (1E12))
        );
    }
	/// <summary>
    /// Extension method to convert GibiByte to FemtoByte
    /// </summary>
    /// <param name="val">quantity measured in GibiByte</param>
    /// <returns>quantity measured in FemtoByte</returns>
    public static Quantity<double, FemtoByte> ToFemtoByte<T>(this BaseQuantity<T, GibiByte> val) where T:IConvertible {
        return new Quantity<double, FemtoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1073741824)) * (1E15))
        );
    }
	/// <summary>
    /// Extension method to convert GibiByte to AttoByte
    /// </summary>
    /// <param name="val">quantity measured in GibiByte</param>
    /// <returns>quantity measured in AttoByte</returns>
    public static Quantity<double, AttoByte> ToAttoByte<T>(this BaseQuantity<T, GibiByte> val) where T:IConvertible {
        return new Quantity<double, AttoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1073741824)) * (1E18))
        );
    }
	/// <summary>
    /// Extension method to convert GibiByte to ZeptoByte
    /// </summary>
    /// <param name="val">quantity measured in GibiByte</param>
    /// <returns>quantity measured in ZeptoByte</returns>
    public static Quantity<double, ZeptoByte> ToZeptoByte<T>(this BaseQuantity<T, GibiByte> val) where T:IConvertible {
        return new Quantity<double, ZeptoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1073741824)) * (1E21))
        );
    }
	/// <summary>
    /// Extension method to convert GibiByte to YoctoByte
    /// </summary>
    /// <param name="val">quantity measured in GibiByte</param>
    /// <returns>quantity measured in YoctoByte</returns>
    public static Quantity<double, YoctoByte> ToYoctoByte<T>(this BaseQuantity<T, GibiByte> val) where T:IConvertible {
        return new Quantity<double, YoctoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1073741824)) * (1E24))
        );
    }
	/// <summary>
    /// Extension method to convert GibiByte to YobiByte
    /// </summary>
    /// <param name="val">quantity measured in GibiByte</param>
    /// <returns>quantity measured in YobiByte</returns>
    public static Quantity<double, YobiByte> ToYobiByte<T>(this BaseQuantity<T, GibiByte> val) where T:IConvertible {
        return new Quantity<double, YobiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1073741824)) * (1.2089258e-24))
        );
    }
	/// <summary>
    /// Extension method to convert GibiByte to ZebiByte
    /// </summary>
    /// <param name="val">quantity measured in GibiByte</param>
    /// <returns>quantity measured in ZebiByte</returns>
    public static Quantity<double, ZebiByte> ToZebiByte<T>(this BaseQuantity<T, GibiByte> val) where T:IConvertible {
        return new Quantity<double, ZebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1073741824)) * (1.1805916e-21))
        );
    }
	/// <summary>
    /// Extension method to convert GibiByte to ExbiByte
    /// </summary>
    /// <param name="val">quantity measured in GibiByte</param>
    /// <returns>quantity measured in ExbiByte</returns>
    public static Quantity<double, ExbiByte> ToExbiByte<T>(this BaseQuantity<T, GibiByte> val) where T:IConvertible {
        return new Quantity<double, ExbiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1073741824)) * (1.1529215e-18))
        );
    }
	/// <summary>
    /// Extension method to convert GibiByte to PebiByte
    /// </summary>
    /// <param name="val">quantity measured in GibiByte</param>
    /// <returns>quantity measured in PebiByte</returns>
    public static Quantity<double, PebiByte> ToPebiByte<T>(this BaseQuantity<T, GibiByte> val) where T:IConvertible {
        return new Quantity<double, PebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1073741824)) * (1.1258999e-15))
        );
    }
	/// <summary>
    /// Extension method to convert GibiByte to TebiByte
    /// </summary>
    /// <param name="val">quantity measured in GibiByte</param>
    /// <returns>quantity measured in TebiByte</returns>
    public static Quantity<double, TebiByte> ToTebiByte<T>(this BaseQuantity<T, GibiByte> val) where T:IConvertible {
        return new Quantity<double, TebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1073741824)) * (1.0995116e-12))
        );
    }
	/// <summary>
    /// Extension method to convert GibiByte to MebiByte
    /// </summary>
    /// <param name="val">quantity measured in GibiByte</param>
    /// <returns>quantity measured in MebiByte</returns>
    public static Quantity<double, MebiByte> ToMebiByte<T>(this BaseQuantity<T, GibiByte> val) where T:IConvertible {
        return new Quantity<double, MebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1073741824)) * (1d/1048576))
        );
    }
	/// <summary>
    /// Extension method to convert GibiByte to KibiByte
    /// </summary>
    /// <param name="val">quantity measured in GibiByte</param>
    /// <returns>quantity measured in KibiByte</returns>
    public static Quantity<double, KibiByte> ToKibiByte<T>(this BaseQuantity<T, GibiByte> val) where T:IConvertible {
        return new Quantity<double, KibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1073741824)) * (1d/1024))
        );
    }
	/// <summary>
    /// Extension method to convert Byte to MebiByte
    /// </summary>
    /// <param name="val">quantity measured in Byte</param>
    /// <returns>quantity measured in MebiByte</returns>
    public static Quantity<double, MebiByte> ToMebiByte<T>(this BaseQuantity<T, Byte> val) where T:IConvertible {
        return new Quantity<double, MebiByte>(
            Convert.ToDouble(val.Value) * (1d/1048576)
        );
    }
	/// <summary>
    /// Extension method to convert MebiByte to Byte
    /// </summary>
    /// <param name="val">quantity measured in MebiByte</param>
    /// <returns>quantity measured in Byte</returns>
    public static Quantity<double, Byte> ToByte<T>(this BaseQuantity<T, MebiByte> val) where T:IConvertible {
        return new Quantity<double, Byte>(
            Convert.ToDouble(val.Value) * (1d/(1d/1048576))
        );
    }
	/// <summary>
    /// Extension method to convert MebiByte to Bit
    /// </summary>
    /// <param name="val">quantity measured in MebiByte</param>
    /// <returns>quantity measured in Bit</returns>
    public static Quantity<double, Bit> ToBit<T>(this BaseQuantity<T, MebiByte> val) where T:IConvertible {
        return new Quantity<double, Bit>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1048576)) * (8))
        );
    }
	/// <summary>
    /// Extension method to convert MebiByte to YottaBit
    /// </summary>
    /// <param name="val">quantity measured in MebiByte</param>
    /// <returns>quantity measured in YottaBit</returns>
    public static Quantity<double, YottaBit> ToYottaBit<T>(this BaseQuantity<T, MebiByte> val) where T:IConvertible {
        return new Quantity<double, YottaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1048576)) * (8*1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert MebiByte to ZettaBit
    /// </summary>
    /// <param name="val">quantity measured in MebiByte</param>
    /// <returns>quantity measured in ZettaBit</returns>
    public static Quantity<double, ZettaBit> ToZettaBit<T>(this BaseQuantity<T, MebiByte> val) where T:IConvertible {
        return new Quantity<double, ZettaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1048576)) * (8*1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert MebiByte to ExaBit
    /// </summary>
    /// <param name="val">quantity measured in MebiByte</param>
    /// <returns>quantity measured in ExaBit</returns>
    public static Quantity<double, ExaBit> ToExaBit<T>(this BaseQuantity<T, MebiByte> val) where T:IConvertible {
        return new Quantity<double, ExaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1048576)) * (8*1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert MebiByte to PetaBit
    /// </summary>
    /// <param name="val">quantity measured in MebiByte</param>
    /// <returns>quantity measured in PetaBit</returns>
    public static Quantity<double, PetaBit> ToPetaBit<T>(this BaseQuantity<T, MebiByte> val) where T:IConvertible {
        return new Quantity<double, PetaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1048576)) * (8*1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert MebiByte to TeraBit
    /// </summary>
    /// <param name="val">quantity measured in MebiByte</param>
    /// <returns>quantity measured in TeraBit</returns>
    public static Quantity<double, TeraBit> ToTeraBit<T>(this BaseQuantity<T, MebiByte> val) where T:IConvertible {
        return new Quantity<double, TeraBit>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1048576)) * (8*1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert MebiByte to GigaBit
    /// </summary>
    /// <param name="val">quantity measured in MebiByte</param>
    /// <returns>quantity measured in GigaBit</returns>
    public static Quantity<double, GigaBit> ToGigaBit<T>(this BaseQuantity<T, MebiByte> val) where T:IConvertible {
        return new Quantity<double, GigaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1048576)) * (8*1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert MebiByte to MegaBit
    /// </summary>
    /// <param name="val">quantity measured in MebiByte</param>
    /// <returns>quantity measured in MegaBit</returns>
    public static Quantity<double, MegaBit> ToMegaBit<T>(this BaseQuantity<T, MebiByte> val) where T:IConvertible {
        return new Quantity<double, MegaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1048576)) * (8*1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert MebiByte to KiloBit
    /// </summary>
    /// <param name="val">quantity measured in MebiByte</param>
    /// <returns>quantity measured in KiloBit</returns>
    public static Quantity<double, KiloBit> ToKiloBit<T>(this BaseQuantity<T, MebiByte> val) where T:IConvertible {
        return new Quantity<double, KiloBit>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1048576)) * (8*1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert MebiByte to HectoBit
    /// </summary>
    /// <param name="val">quantity measured in MebiByte</param>
    /// <returns>quantity measured in HectoBit</returns>
    public static Quantity<double, HectoBit> ToHectoBit<T>(this BaseQuantity<T, MebiByte> val) where T:IConvertible {
        return new Quantity<double, HectoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1048576)) * (8*1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert MebiByte to DekaBit
    /// </summary>
    /// <param name="val">quantity measured in MebiByte</param>
    /// <returns>quantity measured in DekaBit</returns>
    public static Quantity<double, DekaBit> ToDekaBit<T>(this BaseQuantity<T, MebiByte> val) where T:IConvertible {
        return new Quantity<double, DekaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1048576)) * (8*1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert MebiByte to DeciBit
    /// </summary>
    /// <param name="val">quantity measured in MebiByte</param>
    /// <returns>quantity measured in DeciBit</returns>
    public static Quantity<double, DeciBit> ToDeciBit<T>(this BaseQuantity<T, MebiByte> val) where T:IConvertible {
        return new Quantity<double, DeciBit>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1048576)) * (8*1E1))
        );
    }
	/// <summary>
    /// Extension method to convert MebiByte to CentiBit
    /// </summary>
    /// <param name="val">quantity measured in MebiByte</param>
    /// <returns>quantity measured in CentiBit</returns>
    public static Quantity<double, CentiBit> ToCentiBit<T>(this BaseQuantity<T, MebiByte> val) where T:IConvertible {
        return new Quantity<double, CentiBit>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1048576)) * (8*1E2))
        );
    }
	/// <summary>
    /// Extension method to convert MebiByte to MilliBit
    /// </summary>
    /// <param name="val">quantity measured in MebiByte</param>
    /// <returns>quantity measured in MilliBit</returns>
    public static Quantity<double, MilliBit> ToMilliBit<T>(this BaseQuantity<T, MebiByte> val) where T:IConvertible {
        return new Quantity<double, MilliBit>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1048576)) * (8*1E3))
        );
    }
	/// <summary>
    /// Extension method to convert MebiByte to MicroBit
    /// </summary>
    /// <param name="val">quantity measured in MebiByte</param>
    /// <returns>quantity measured in MicroBit</returns>
    public static Quantity<double, MicroBit> ToMicroBit<T>(this BaseQuantity<T, MebiByte> val) where T:IConvertible {
        return new Quantity<double, MicroBit>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1048576)) * (8*1E6))
        );
    }
	/// <summary>
    /// Extension method to convert MebiByte to NanoBit
    /// </summary>
    /// <param name="val">quantity measured in MebiByte</param>
    /// <returns>quantity measured in NanoBit</returns>
    public static Quantity<double, NanoBit> ToNanoBit<T>(this BaseQuantity<T, MebiByte> val) where T:IConvertible {
        return new Quantity<double, NanoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1048576)) * (8*1E9))
        );
    }
	/// <summary>
    /// Extension method to convert MebiByte to PicoBit
    /// </summary>
    /// <param name="val">quantity measured in MebiByte</param>
    /// <returns>quantity measured in PicoBit</returns>
    public static Quantity<double, PicoBit> ToPicoBit<T>(this BaseQuantity<T, MebiByte> val) where T:IConvertible {
        return new Quantity<double, PicoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1048576)) * (8*1E12))
        );
    }
	/// <summary>
    /// Extension method to convert MebiByte to FemtoBit
    /// </summary>
    /// <param name="val">quantity measured in MebiByte</param>
    /// <returns>quantity measured in FemtoBit</returns>
    public static Quantity<double, FemtoBit> ToFemtoBit<T>(this BaseQuantity<T, MebiByte> val) where T:IConvertible {
        return new Quantity<double, FemtoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1048576)) * (8*1E15))
        );
    }
	/// <summary>
    /// Extension method to convert MebiByte to AttoBit
    /// </summary>
    /// <param name="val">quantity measured in MebiByte</param>
    /// <returns>quantity measured in AttoBit</returns>
    public static Quantity<double, AttoBit> ToAttoBit<T>(this BaseQuantity<T, MebiByte> val) where T:IConvertible {
        return new Quantity<double, AttoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1048576)) * (8*1E18))
        );
    }
	/// <summary>
    /// Extension method to convert MebiByte to ZeptoBit
    /// </summary>
    /// <param name="val">quantity measured in MebiByte</param>
    /// <returns>quantity measured in ZeptoBit</returns>
    public static Quantity<double, ZeptoBit> ToZeptoBit<T>(this BaseQuantity<T, MebiByte> val) where T:IConvertible {
        return new Quantity<double, ZeptoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1048576)) * (8*1E21))
        );
    }
	/// <summary>
    /// Extension method to convert MebiByte to YoctoBit
    /// </summary>
    /// <param name="val">quantity measured in MebiByte</param>
    /// <returns>quantity measured in YoctoBit</returns>
    public static Quantity<double, YoctoBit> ToYoctoBit<T>(this BaseQuantity<T, MebiByte> val) where T:IConvertible {
        return new Quantity<double, YoctoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1048576)) * (8*1E24))
        );
    }
	/// <summary>
    /// Extension method to convert MebiByte to YottaByte
    /// </summary>
    /// <param name="val">quantity measured in MebiByte</param>
    /// <returns>quantity measured in YottaByte</returns>
    public static Quantity<double, YottaByte> ToYottaByte<T>(this BaseQuantity<T, MebiByte> val) where T:IConvertible {
        return new Quantity<double, YottaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1048576)) * (1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert MebiByte to ZettaByte
    /// </summary>
    /// <param name="val">quantity measured in MebiByte</param>
    /// <returns>quantity measured in ZettaByte</returns>
    public static Quantity<double, ZettaByte> ToZettaByte<T>(this BaseQuantity<T, MebiByte> val) where T:IConvertible {
        return new Quantity<double, ZettaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1048576)) * (1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert MebiByte to ExaByte
    /// </summary>
    /// <param name="val">quantity measured in MebiByte</param>
    /// <returns>quantity measured in ExaByte</returns>
    public static Quantity<double, ExaByte> ToExaByte<T>(this BaseQuantity<T, MebiByte> val) where T:IConvertible {
        return new Quantity<double, ExaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1048576)) * (1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert MebiByte to PetaByte
    /// </summary>
    /// <param name="val">quantity measured in MebiByte</param>
    /// <returns>quantity measured in PetaByte</returns>
    public static Quantity<double, PetaByte> ToPetaByte<T>(this BaseQuantity<T, MebiByte> val) where T:IConvertible {
        return new Quantity<double, PetaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1048576)) * (1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert MebiByte to TeraByte
    /// </summary>
    /// <param name="val">quantity measured in MebiByte</param>
    /// <returns>quantity measured in TeraByte</returns>
    public static Quantity<double, TeraByte> ToTeraByte<T>(this BaseQuantity<T, MebiByte> val) where T:IConvertible {
        return new Quantity<double, TeraByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1048576)) * (1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert MebiByte to GigaByte
    /// </summary>
    /// <param name="val">quantity measured in MebiByte</param>
    /// <returns>quantity measured in GigaByte</returns>
    public static Quantity<double, GigaByte> ToGigaByte<T>(this BaseQuantity<T, MebiByte> val) where T:IConvertible {
        return new Quantity<double, GigaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1048576)) * (1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert MebiByte to MegaByte
    /// </summary>
    /// <param name="val">quantity measured in MebiByte</param>
    /// <returns>quantity measured in MegaByte</returns>
    public static Quantity<double, MegaByte> ToMegaByte<T>(this BaseQuantity<T, MebiByte> val) where T:IConvertible {
        return new Quantity<double, MegaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1048576)) * (1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert MebiByte to KiloByte
    /// </summary>
    /// <param name="val">quantity measured in MebiByte</param>
    /// <returns>quantity measured in KiloByte</returns>
    public static Quantity<double, KiloByte> ToKiloByte<T>(this BaseQuantity<T, MebiByte> val) where T:IConvertible {
        return new Quantity<double, KiloByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1048576)) * (1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert MebiByte to HectoByte
    /// </summary>
    /// <param name="val">quantity measured in MebiByte</param>
    /// <returns>quantity measured in HectoByte</returns>
    public static Quantity<double, HectoByte> ToHectoByte<T>(this BaseQuantity<T, MebiByte> val) where T:IConvertible {
        return new Quantity<double, HectoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1048576)) * (1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert MebiByte to DekaByte
    /// </summary>
    /// <param name="val">quantity measured in MebiByte</param>
    /// <returns>quantity measured in DekaByte</returns>
    public static Quantity<double, DekaByte> ToDekaByte<T>(this BaseQuantity<T, MebiByte> val) where T:IConvertible {
        return new Quantity<double, DekaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1048576)) * (1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert MebiByte to DeciByte
    /// </summary>
    /// <param name="val">quantity measured in MebiByte</param>
    /// <returns>quantity measured in DeciByte</returns>
    public static Quantity<double, DeciByte> ToDeciByte<T>(this BaseQuantity<T, MebiByte> val) where T:IConvertible {
        return new Quantity<double, DeciByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1048576)) * (1E1))
        );
    }
	/// <summary>
    /// Extension method to convert MebiByte to CentiByte
    /// </summary>
    /// <param name="val">quantity measured in MebiByte</param>
    /// <returns>quantity measured in CentiByte</returns>
    public static Quantity<double, CentiByte> ToCentiByte<T>(this BaseQuantity<T, MebiByte> val) where T:IConvertible {
        return new Quantity<double, CentiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1048576)) * (1E2))
        );
    }
	/// <summary>
    /// Extension method to convert MebiByte to MilliByte
    /// </summary>
    /// <param name="val">quantity measured in MebiByte</param>
    /// <returns>quantity measured in MilliByte</returns>
    public static Quantity<double, MilliByte> ToMilliByte<T>(this BaseQuantity<T, MebiByte> val) where T:IConvertible {
        return new Quantity<double, MilliByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1048576)) * (1E3))
        );
    }
	/// <summary>
    /// Extension method to convert MebiByte to MicroByte
    /// </summary>
    /// <param name="val">quantity measured in MebiByte</param>
    /// <returns>quantity measured in MicroByte</returns>
    public static Quantity<double, MicroByte> ToMicroByte<T>(this BaseQuantity<T, MebiByte> val) where T:IConvertible {
        return new Quantity<double, MicroByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1048576)) * (1E6))
        );
    }
	/// <summary>
    /// Extension method to convert MebiByte to NanoByte
    /// </summary>
    /// <param name="val">quantity measured in MebiByte</param>
    /// <returns>quantity measured in NanoByte</returns>
    public static Quantity<double, NanoByte> ToNanoByte<T>(this BaseQuantity<T, MebiByte> val) where T:IConvertible {
        return new Quantity<double, NanoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1048576)) * (1E9))
        );
    }
	/// <summary>
    /// Extension method to convert MebiByte to PicoByte
    /// </summary>
    /// <param name="val">quantity measured in MebiByte</param>
    /// <returns>quantity measured in PicoByte</returns>
    public static Quantity<double, PicoByte> ToPicoByte<T>(this BaseQuantity<T, MebiByte> val) where T:IConvertible {
        return new Quantity<double, PicoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1048576)) * (1E12))
        );
    }
	/// <summary>
    /// Extension method to convert MebiByte to FemtoByte
    /// </summary>
    /// <param name="val">quantity measured in MebiByte</param>
    /// <returns>quantity measured in FemtoByte</returns>
    public static Quantity<double, FemtoByte> ToFemtoByte<T>(this BaseQuantity<T, MebiByte> val) where T:IConvertible {
        return new Quantity<double, FemtoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1048576)) * (1E15))
        );
    }
	/// <summary>
    /// Extension method to convert MebiByte to AttoByte
    /// </summary>
    /// <param name="val">quantity measured in MebiByte</param>
    /// <returns>quantity measured in AttoByte</returns>
    public static Quantity<double, AttoByte> ToAttoByte<T>(this BaseQuantity<T, MebiByte> val) where T:IConvertible {
        return new Quantity<double, AttoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1048576)) * (1E18))
        );
    }
	/// <summary>
    /// Extension method to convert MebiByte to ZeptoByte
    /// </summary>
    /// <param name="val">quantity measured in MebiByte</param>
    /// <returns>quantity measured in ZeptoByte</returns>
    public static Quantity<double, ZeptoByte> ToZeptoByte<T>(this BaseQuantity<T, MebiByte> val) where T:IConvertible {
        return new Quantity<double, ZeptoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1048576)) * (1E21))
        );
    }
	/// <summary>
    /// Extension method to convert MebiByte to YoctoByte
    /// </summary>
    /// <param name="val">quantity measured in MebiByte</param>
    /// <returns>quantity measured in YoctoByte</returns>
    public static Quantity<double, YoctoByte> ToYoctoByte<T>(this BaseQuantity<T, MebiByte> val) where T:IConvertible {
        return new Quantity<double, YoctoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1048576)) * (1E24))
        );
    }
	/// <summary>
    /// Extension method to convert MebiByte to YobiByte
    /// </summary>
    /// <param name="val">quantity measured in MebiByte</param>
    /// <returns>quantity measured in YobiByte</returns>
    public static Quantity<double, YobiByte> ToYobiByte<T>(this BaseQuantity<T, MebiByte> val) where T:IConvertible {
        return new Quantity<double, YobiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1048576)) * (1.2089258e-24))
        );
    }
	/// <summary>
    /// Extension method to convert MebiByte to ZebiByte
    /// </summary>
    /// <param name="val">quantity measured in MebiByte</param>
    /// <returns>quantity measured in ZebiByte</returns>
    public static Quantity<double, ZebiByte> ToZebiByte<T>(this BaseQuantity<T, MebiByte> val) where T:IConvertible {
        return new Quantity<double, ZebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1048576)) * (1.1805916e-21))
        );
    }
	/// <summary>
    /// Extension method to convert MebiByte to ExbiByte
    /// </summary>
    /// <param name="val">quantity measured in MebiByte</param>
    /// <returns>quantity measured in ExbiByte</returns>
    public static Quantity<double, ExbiByte> ToExbiByte<T>(this BaseQuantity<T, MebiByte> val) where T:IConvertible {
        return new Quantity<double, ExbiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1048576)) * (1.1529215e-18))
        );
    }
	/// <summary>
    /// Extension method to convert MebiByte to PebiByte
    /// </summary>
    /// <param name="val">quantity measured in MebiByte</param>
    /// <returns>quantity measured in PebiByte</returns>
    public static Quantity<double, PebiByte> ToPebiByte<T>(this BaseQuantity<T, MebiByte> val) where T:IConvertible {
        return new Quantity<double, PebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1048576)) * (1.1258999e-15))
        );
    }
	/// <summary>
    /// Extension method to convert MebiByte to TebiByte
    /// </summary>
    /// <param name="val">quantity measured in MebiByte</param>
    /// <returns>quantity measured in TebiByte</returns>
    public static Quantity<double, TebiByte> ToTebiByte<T>(this BaseQuantity<T, MebiByte> val) where T:IConvertible {
        return new Quantity<double, TebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1048576)) * (1.0995116e-12))
        );
    }
	/// <summary>
    /// Extension method to convert MebiByte to GibiByte
    /// </summary>
    /// <param name="val">quantity measured in MebiByte</param>
    /// <returns>quantity measured in GibiByte</returns>
    public static Quantity<double, GibiByte> ToGibiByte<T>(this BaseQuantity<T, MebiByte> val) where T:IConvertible {
        return new Quantity<double, GibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1048576)) * (1d/1073741824))
        );
    }
	/// <summary>
    /// Extension method to convert MebiByte to KibiByte
    /// </summary>
    /// <param name="val">quantity measured in MebiByte</param>
    /// <returns>quantity measured in KibiByte</returns>
    public static Quantity<double, KibiByte> ToKibiByte<T>(this BaseQuantity<T, MebiByte> val) where T:IConvertible {
        return new Quantity<double, KibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1048576)) * (1d/1024))
        );
    }
	/// <summary>
    /// Extension method to convert Byte to KibiByte
    /// </summary>
    /// <param name="val">quantity measured in Byte</param>
    /// <returns>quantity measured in KibiByte</returns>
    public static Quantity<double, KibiByte> ToKibiByte<T>(this BaseQuantity<T, Byte> val) where T:IConvertible {
        return new Quantity<double, KibiByte>(
            Convert.ToDouble(val.Value) * (1d/1024)
        );
    }
	/// <summary>
    /// Extension method to convert KibiByte to Byte
    /// </summary>
    /// <param name="val">quantity measured in KibiByte</param>
    /// <returns>quantity measured in Byte</returns>
    public static Quantity<double, Byte> ToByte<T>(this BaseQuantity<T, KibiByte> val) where T:IConvertible {
        return new Quantity<double, Byte>(
            Convert.ToDouble(val.Value) * (1d/(1d/1024))
        );
    }
	/// <summary>
    /// Extension method to convert KibiByte to Bit
    /// </summary>
    /// <param name="val">quantity measured in KibiByte</param>
    /// <returns>quantity measured in Bit</returns>
    public static Quantity<double, Bit> ToBit<T>(this BaseQuantity<T, KibiByte> val) where T:IConvertible {
        return new Quantity<double, Bit>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1024)) * (8))
        );
    }
	/// <summary>
    /// Extension method to convert KibiByte to YottaBit
    /// </summary>
    /// <param name="val">quantity measured in KibiByte</param>
    /// <returns>quantity measured in YottaBit</returns>
    public static Quantity<double, YottaBit> ToYottaBit<T>(this BaseQuantity<T, KibiByte> val) where T:IConvertible {
        return new Quantity<double, YottaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1024)) * (8*1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert KibiByte to ZettaBit
    /// </summary>
    /// <param name="val">quantity measured in KibiByte</param>
    /// <returns>quantity measured in ZettaBit</returns>
    public static Quantity<double, ZettaBit> ToZettaBit<T>(this BaseQuantity<T, KibiByte> val) where T:IConvertible {
        return new Quantity<double, ZettaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1024)) * (8*1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert KibiByte to ExaBit
    /// </summary>
    /// <param name="val">quantity measured in KibiByte</param>
    /// <returns>quantity measured in ExaBit</returns>
    public static Quantity<double, ExaBit> ToExaBit<T>(this BaseQuantity<T, KibiByte> val) where T:IConvertible {
        return new Quantity<double, ExaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1024)) * (8*1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert KibiByte to PetaBit
    /// </summary>
    /// <param name="val">quantity measured in KibiByte</param>
    /// <returns>quantity measured in PetaBit</returns>
    public static Quantity<double, PetaBit> ToPetaBit<T>(this BaseQuantity<T, KibiByte> val) where T:IConvertible {
        return new Quantity<double, PetaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1024)) * (8*1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert KibiByte to TeraBit
    /// </summary>
    /// <param name="val">quantity measured in KibiByte</param>
    /// <returns>quantity measured in TeraBit</returns>
    public static Quantity<double, TeraBit> ToTeraBit<T>(this BaseQuantity<T, KibiByte> val) where T:IConvertible {
        return new Quantity<double, TeraBit>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1024)) * (8*1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert KibiByte to GigaBit
    /// </summary>
    /// <param name="val">quantity measured in KibiByte</param>
    /// <returns>quantity measured in GigaBit</returns>
    public static Quantity<double, GigaBit> ToGigaBit<T>(this BaseQuantity<T, KibiByte> val) where T:IConvertible {
        return new Quantity<double, GigaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1024)) * (8*1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert KibiByte to MegaBit
    /// </summary>
    /// <param name="val">quantity measured in KibiByte</param>
    /// <returns>quantity measured in MegaBit</returns>
    public static Quantity<double, MegaBit> ToMegaBit<T>(this BaseQuantity<T, KibiByte> val) where T:IConvertible {
        return new Quantity<double, MegaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1024)) * (8*1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert KibiByte to KiloBit
    /// </summary>
    /// <param name="val">quantity measured in KibiByte</param>
    /// <returns>quantity measured in KiloBit</returns>
    public static Quantity<double, KiloBit> ToKiloBit<T>(this BaseQuantity<T, KibiByte> val) where T:IConvertible {
        return new Quantity<double, KiloBit>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1024)) * (8*1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert KibiByte to HectoBit
    /// </summary>
    /// <param name="val">quantity measured in KibiByte</param>
    /// <returns>quantity measured in HectoBit</returns>
    public static Quantity<double, HectoBit> ToHectoBit<T>(this BaseQuantity<T, KibiByte> val) where T:IConvertible {
        return new Quantity<double, HectoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1024)) * (8*1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert KibiByte to DekaBit
    /// </summary>
    /// <param name="val">quantity measured in KibiByte</param>
    /// <returns>quantity measured in DekaBit</returns>
    public static Quantity<double, DekaBit> ToDekaBit<T>(this BaseQuantity<T, KibiByte> val) where T:IConvertible {
        return new Quantity<double, DekaBit>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1024)) * (8*1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert KibiByte to DeciBit
    /// </summary>
    /// <param name="val">quantity measured in KibiByte</param>
    /// <returns>quantity measured in DeciBit</returns>
    public static Quantity<double, DeciBit> ToDeciBit<T>(this BaseQuantity<T, KibiByte> val) where T:IConvertible {
        return new Quantity<double, DeciBit>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1024)) * (8*1E1))
        );
    }
	/// <summary>
    /// Extension method to convert KibiByte to CentiBit
    /// </summary>
    /// <param name="val">quantity measured in KibiByte</param>
    /// <returns>quantity measured in CentiBit</returns>
    public static Quantity<double, CentiBit> ToCentiBit<T>(this BaseQuantity<T, KibiByte> val) where T:IConvertible {
        return new Quantity<double, CentiBit>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1024)) * (8*1E2))
        );
    }
	/// <summary>
    /// Extension method to convert KibiByte to MilliBit
    /// </summary>
    /// <param name="val">quantity measured in KibiByte</param>
    /// <returns>quantity measured in MilliBit</returns>
    public static Quantity<double, MilliBit> ToMilliBit<T>(this BaseQuantity<T, KibiByte> val) where T:IConvertible {
        return new Quantity<double, MilliBit>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1024)) * (8*1E3))
        );
    }
	/// <summary>
    /// Extension method to convert KibiByte to MicroBit
    /// </summary>
    /// <param name="val">quantity measured in KibiByte</param>
    /// <returns>quantity measured in MicroBit</returns>
    public static Quantity<double, MicroBit> ToMicroBit<T>(this BaseQuantity<T, KibiByte> val) where T:IConvertible {
        return new Quantity<double, MicroBit>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1024)) * (8*1E6))
        );
    }
	/// <summary>
    /// Extension method to convert KibiByte to NanoBit
    /// </summary>
    /// <param name="val">quantity measured in KibiByte</param>
    /// <returns>quantity measured in NanoBit</returns>
    public static Quantity<double, NanoBit> ToNanoBit<T>(this BaseQuantity<T, KibiByte> val) where T:IConvertible {
        return new Quantity<double, NanoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1024)) * (8*1E9))
        );
    }
	/// <summary>
    /// Extension method to convert KibiByte to PicoBit
    /// </summary>
    /// <param name="val">quantity measured in KibiByte</param>
    /// <returns>quantity measured in PicoBit</returns>
    public static Quantity<double, PicoBit> ToPicoBit<T>(this BaseQuantity<T, KibiByte> val) where T:IConvertible {
        return new Quantity<double, PicoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1024)) * (8*1E12))
        );
    }
	/// <summary>
    /// Extension method to convert KibiByte to FemtoBit
    /// </summary>
    /// <param name="val">quantity measured in KibiByte</param>
    /// <returns>quantity measured in FemtoBit</returns>
    public static Quantity<double, FemtoBit> ToFemtoBit<T>(this BaseQuantity<T, KibiByte> val) where T:IConvertible {
        return new Quantity<double, FemtoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1024)) * (8*1E15))
        );
    }
	/// <summary>
    /// Extension method to convert KibiByte to AttoBit
    /// </summary>
    /// <param name="val">quantity measured in KibiByte</param>
    /// <returns>quantity measured in AttoBit</returns>
    public static Quantity<double, AttoBit> ToAttoBit<T>(this BaseQuantity<T, KibiByte> val) where T:IConvertible {
        return new Quantity<double, AttoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1024)) * (8*1E18))
        );
    }
	/// <summary>
    /// Extension method to convert KibiByte to ZeptoBit
    /// </summary>
    /// <param name="val">quantity measured in KibiByte</param>
    /// <returns>quantity measured in ZeptoBit</returns>
    public static Quantity<double, ZeptoBit> ToZeptoBit<T>(this BaseQuantity<T, KibiByte> val) where T:IConvertible {
        return new Quantity<double, ZeptoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1024)) * (8*1E21))
        );
    }
	/// <summary>
    /// Extension method to convert KibiByte to YoctoBit
    /// </summary>
    /// <param name="val">quantity measured in KibiByte</param>
    /// <returns>quantity measured in YoctoBit</returns>
    public static Quantity<double, YoctoBit> ToYoctoBit<T>(this BaseQuantity<T, KibiByte> val) where T:IConvertible {
        return new Quantity<double, YoctoBit>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1024)) * (8*1E24))
        );
    }
	/// <summary>
    /// Extension method to convert KibiByte to YottaByte
    /// </summary>
    /// <param name="val">quantity measured in KibiByte</param>
    /// <returns>quantity measured in YottaByte</returns>
    public static Quantity<double, YottaByte> ToYottaByte<T>(this BaseQuantity<T, KibiByte> val) where T:IConvertible {
        return new Quantity<double, YottaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1024)) * (1E-24))
        );
    }
	/// <summary>
    /// Extension method to convert KibiByte to ZettaByte
    /// </summary>
    /// <param name="val">quantity measured in KibiByte</param>
    /// <returns>quantity measured in ZettaByte</returns>
    public static Quantity<double, ZettaByte> ToZettaByte<T>(this BaseQuantity<T, KibiByte> val) where T:IConvertible {
        return new Quantity<double, ZettaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1024)) * (1E-21))
        );
    }
	/// <summary>
    /// Extension method to convert KibiByte to ExaByte
    /// </summary>
    /// <param name="val">quantity measured in KibiByte</param>
    /// <returns>quantity measured in ExaByte</returns>
    public static Quantity<double, ExaByte> ToExaByte<T>(this BaseQuantity<T, KibiByte> val) where T:IConvertible {
        return new Quantity<double, ExaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1024)) * (1E-18))
        );
    }
	/// <summary>
    /// Extension method to convert KibiByte to PetaByte
    /// </summary>
    /// <param name="val">quantity measured in KibiByte</param>
    /// <returns>quantity measured in PetaByte</returns>
    public static Quantity<double, PetaByte> ToPetaByte<T>(this BaseQuantity<T, KibiByte> val) where T:IConvertible {
        return new Quantity<double, PetaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1024)) * (1E-15))
        );
    }
	/// <summary>
    /// Extension method to convert KibiByte to TeraByte
    /// </summary>
    /// <param name="val">quantity measured in KibiByte</param>
    /// <returns>quantity measured in TeraByte</returns>
    public static Quantity<double, TeraByte> ToTeraByte<T>(this BaseQuantity<T, KibiByte> val) where T:IConvertible {
        return new Quantity<double, TeraByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1024)) * (1E-12))
        );
    }
	/// <summary>
    /// Extension method to convert KibiByte to GigaByte
    /// </summary>
    /// <param name="val">quantity measured in KibiByte</param>
    /// <returns>quantity measured in GigaByte</returns>
    public static Quantity<double, GigaByte> ToGigaByte<T>(this BaseQuantity<T, KibiByte> val) where T:IConvertible {
        return new Quantity<double, GigaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1024)) * (1E-9))
        );
    }
	/// <summary>
    /// Extension method to convert KibiByte to MegaByte
    /// </summary>
    /// <param name="val">quantity measured in KibiByte</param>
    /// <returns>quantity measured in MegaByte</returns>
    public static Quantity<double, MegaByte> ToMegaByte<T>(this BaseQuantity<T, KibiByte> val) where T:IConvertible {
        return new Quantity<double, MegaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1024)) * (1E-6))
        );
    }
	/// <summary>
    /// Extension method to convert KibiByte to KiloByte
    /// </summary>
    /// <param name="val">quantity measured in KibiByte</param>
    /// <returns>quantity measured in KiloByte</returns>
    public static Quantity<double, KiloByte> ToKiloByte<T>(this BaseQuantity<T, KibiByte> val) where T:IConvertible {
        return new Quantity<double, KiloByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1024)) * (1E-3))
        );
    }
	/// <summary>
    /// Extension method to convert KibiByte to HectoByte
    /// </summary>
    /// <param name="val">quantity measured in KibiByte</param>
    /// <returns>quantity measured in HectoByte</returns>
    public static Quantity<double, HectoByte> ToHectoByte<T>(this BaseQuantity<T, KibiByte> val) where T:IConvertible {
        return new Quantity<double, HectoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1024)) * (1E-2))
        );
    }
	/// <summary>
    /// Extension method to convert KibiByte to DekaByte
    /// </summary>
    /// <param name="val">quantity measured in KibiByte</param>
    /// <returns>quantity measured in DekaByte</returns>
    public static Quantity<double, DekaByte> ToDekaByte<T>(this BaseQuantity<T, KibiByte> val) where T:IConvertible {
        return new Quantity<double, DekaByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1024)) * (1E-1))
        );
    }
	/// <summary>
    /// Extension method to convert KibiByte to DeciByte
    /// </summary>
    /// <param name="val">quantity measured in KibiByte</param>
    /// <returns>quantity measured in DeciByte</returns>
    public static Quantity<double, DeciByte> ToDeciByte<T>(this BaseQuantity<T, KibiByte> val) where T:IConvertible {
        return new Quantity<double, DeciByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1024)) * (1E1))
        );
    }
	/// <summary>
    /// Extension method to convert KibiByte to CentiByte
    /// </summary>
    /// <param name="val">quantity measured in KibiByte</param>
    /// <returns>quantity measured in CentiByte</returns>
    public static Quantity<double, CentiByte> ToCentiByte<T>(this BaseQuantity<T, KibiByte> val) where T:IConvertible {
        return new Quantity<double, CentiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1024)) * (1E2))
        );
    }
	/// <summary>
    /// Extension method to convert KibiByte to MilliByte
    /// </summary>
    /// <param name="val">quantity measured in KibiByte</param>
    /// <returns>quantity measured in MilliByte</returns>
    public static Quantity<double, MilliByte> ToMilliByte<T>(this BaseQuantity<T, KibiByte> val) where T:IConvertible {
        return new Quantity<double, MilliByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1024)) * (1E3))
        );
    }
	/// <summary>
    /// Extension method to convert KibiByte to MicroByte
    /// </summary>
    /// <param name="val">quantity measured in KibiByte</param>
    /// <returns>quantity measured in MicroByte</returns>
    public static Quantity<double, MicroByte> ToMicroByte<T>(this BaseQuantity<T, KibiByte> val) where T:IConvertible {
        return new Quantity<double, MicroByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1024)) * (1E6))
        );
    }
	/// <summary>
    /// Extension method to convert KibiByte to NanoByte
    /// </summary>
    /// <param name="val">quantity measured in KibiByte</param>
    /// <returns>quantity measured in NanoByte</returns>
    public static Quantity<double, NanoByte> ToNanoByte<T>(this BaseQuantity<T, KibiByte> val) where T:IConvertible {
        return new Quantity<double, NanoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1024)) * (1E9))
        );
    }
	/// <summary>
    /// Extension method to convert KibiByte to PicoByte
    /// </summary>
    /// <param name="val">quantity measured in KibiByte</param>
    /// <returns>quantity measured in PicoByte</returns>
    public static Quantity<double, PicoByte> ToPicoByte<T>(this BaseQuantity<T, KibiByte> val) where T:IConvertible {
        return new Quantity<double, PicoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1024)) * (1E12))
        );
    }
	/// <summary>
    /// Extension method to convert KibiByte to FemtoByte
    /// </summary>
    /// <param name="val">quantity measured in KibiByte</param>
    /// <returns>quantity measured in FemtoByte</returns>
    public static Quantity<double, FemtoByte> ToFemtoByte<T>(this BaseQuantity<T, KibiByte> val) where T:IConvertible {
        return new Quantity<double, FemtoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1024)) * (1E15))
        );
    }
	/// <summary>
    /// Extension method to convert KibiByte to AttoByte
    /// </summary>
    /// <param name="val">quantity measured in KibiByte</param>
    /// <returns>quantity measured in AttoByte</returns>
    public static Quantity<double, AttoByte> ToAttoByte<T>(this BaseQuantity<T, KibiByte> val) where T:IConvertible {
        return new Quantity<double, AttoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1024)) * (1E18))
        );
    }
	/// <summary>
    /// Extension method to convert KibiByte to ZeptoByte
    /// </summary>
    /// <param name="val">quantity measured in KibiByte</param>
    /// <returns>quantity measured in ZeptoByte</returns>
    public static Quantity<double, ZeptoByte> ToZeptoByte<T>(this BaseQuantity<T, KibiByte> val) where T:IConvertible {
        return new Quantity<double, ZeptoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1024)) * (1E21))
        );
    }
	/// <summary>
    /// Extension method to convert KibiByte to YoctoByte
    /// </summary>
    /// <param name="val">quantity measured in KibiByte</param>
    /// <returns>quantity measured in YoctoByte</returns>
    public static Quantity<double, YoctoByte> ToYoctoByte<T>(this BaseQuantity<T, KibiByte> val) where T:IConvertible {
        return new Quantity<double, YoctoByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1024)) * (1E24))
        );
    }
	/// <summary>
    /// Extension method to convert KibiByte to YobiByte
    /// </summary>
    /// <param name="val">quantity measured in KibiByte</param>
    /// <returns>quantity measured in YobiByte</returns>
    public static Quantity<double, YobiByte> ToYobiByte<T>(this BaseQuantity<T, KibiByte> val) where T:IConvertible {
        return new Quantity<double, YobiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1024)) * (1.2089258e-24))
        );
    }
	/// <summary>
    /// Extension method to convert KibiByte to ZebiByte
    /// </summary>
    /// <param name="val">quantity measured in KibiByte</param>
    /// <returns>quantity measured in ZebiByte</returns>
    public static Quantity<double, ZebiByte> ToZebiByte<T>(this BaseQuantity<T, KibiByte> val) where T:IConvertible {
        return new Quantity<double, ZebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1024)) * (1.1805916e-21))
        );
    }
	/// <summary>
    /// Extension method to convert KibiByte to ExbiByte
    /// </summary>
    /// <param name="val">quantity measured in KibiByte</param>
    /// <returns>quantity measured in ExbiByte</returns>
    public static Quantity<double, ExbiByte> ToExbiByte<T>(this BaseQuantity<T, KibiByte> val) where T:IConvertible {
        return new Quantity<double, ExbiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1024)) * (1.1529215e-18))
        );
    }
	/// <summary>
    /// Extension method to convert KibiByte to PebiByte
    /// </summary>
    /// <param name="val">quantity measured in KibiByte</param>
    /// <returns>quantity measured in PebiByte</returns>
    public static Quantity<double, PebiByte> ToPebiByte<T>(this BaseQuantity<T, KibiByte> val) where T:IConvertible {
        return new Quantity<double, PebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1024)) * (1.1258999e-15))
        );
    }
	/// <summary>
    /// Extension method to convert KibiByte to TebiByte
    /// </summary>
    /// <param name="val">quantity measured in KibiByte</param>
    /// <returns>quantity measured in TebiByte</returns>
    public static Quantity<double, TebiByte> ToTebiByte<T>(this BaseQuantity<T, KibiByte> val) where T:IConvertible {
        return new Quantity<double, TebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1024)) * (1.0995116e-12))
        );
    }
	/// <summary>
    /// Extension method to convert KibiByte to GibiByte
    /// </summary>
    /// <param name="val">quantity measured in KibiByte</param>
    /// <returns>quantity measured in GibiByte</returns>
    public static Quantity<double, GibiByte> ToGibiByte<T>(this BaseQuantity<T, KibiByte> val) where T:IConvertible {
        return new Quantity<double, GibiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1024)) * (1d/1073741824))
        );
    }
	/// <summary>
    /// Extension method to convert KibiByte to MebiByte
    /// </summary>
    /// <param name="val">quantity measured in KibiByte</param>
    /// <returns>quantity measured in MebiByte</returns>
    public static Quantity<double, MebiByte> ToMebiByte<T>(this BaseQuantity<T, KibiByte> val) where T:IConvertible {
        return new Quantity<double, MebiByte>(
            Convert.ToDouble(val.Value) * ((1d/(1d/1024)) * (1d/1048576))
        );
    }
}
}